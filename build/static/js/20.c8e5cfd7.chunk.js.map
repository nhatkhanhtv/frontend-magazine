{"version":3,"sources":["app/common-library/common-components/master-header.tsx","app/common-library/forms/input-custom.tsx","app/common-library/common-components/modify-entity-page.tsx","app/common-library/common-components/master-entity-detail-dialog.tsx","app/common-library/common-components/actions-column-formatter.tsx","app/common-library/common-components/modify-entity-dialog-form.tsx","app/common-library/common-components/modify-entity-dialog.tsx","app/pages/post/post-comments.tsx","app/common-library/common-components/entity-crud-page.tsx","app/pages/user/user.service.tsx","app/pages/qr-management/qr.service.tsx","app/pages/qr-management/qr.render-info.tsx","app/pages/user/user-body.tsx","app/pages/qr-management/qr.tsx"],"names":["MasterHeader","title","onSearch","searchModel","initValue","onClickBack","value","intl","useIntl","defaultClassName","className","onClick","formatMessage","id","toUpperCase","initialValues","onSubmit","values","onReset","data","handleSubmit","resetForm","handleBlur","handleChange","setFieldValue","Object","keys","map","key","type","name","undefined","t","style","iconStyle","handleResetForm","src","ToAbsoluteUrl","InputCustom","component","props","Component","formik","useFormikContext","ModifyEntityPage","inputGroups","mode","pl","_subTitle","inputGroup","index","_","isString","Error","JSON","stringify","_className","_inputClassName","inputs","prevKey","inputClassName","RenderForm","input","trimKey","trim","_type","innt","MasterEntityDetailDialog","moduleName","show","entity","onHide","renderInfo","size","aria-labelledby","dialogClassName","Header","closeButton","Title","MasterEntityDetail","Footer","Body","header","dataKey","titleClassName","dataClassName","displayInfo","fieldName","keyField","displayData","indexOf","getFieldV3","formatter","isNumber","ActionsColumnFormatter","cellContent","row","rowIndex","onShowDetail","onDelete","onEdit","onLock","onClone","onChangeRole","onGoHistory","e","preventDefault","TickColumnFormatter","color","ModifyEntityDialogForm","onModify","modifyPanel","validation","loading","_title","initValues","useMemo","InitValues","_header","panel1","useState","entityForEdit","setEntityForEdit","useEffect","enableReinitialize","validationSchema","setSubmitting","__v","then","catch","err","Modal","Fragment","Spinner","animation","variant","ModifyEntityDialog","formModel","panels","panel","PostComments","onComments","valueRef","React","useRef","comments","commentsArr","setCommentArr","fontSize","createdBy","fullName","content","TextareaAutosize","rowsMin","aria-label","ref","placeholder","error","current","comment","res","handleComment","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","EntityCrudPage","code","get","actions","setEditEntity","homePageUrl","allFormButton","showComment","history","useHistory","modifyPanels","console","log","validateForm","push","GetHomePage","window","location","pathname","val","goBack","keyss","role","icon","label","to","linkto","length","confirmationStatus","isMaster","API_URL","API_BASE_URL","BULK_API_URL","Create","axios","post","GetAll","queryProps","sortList","paginationProps","params","Count","GetById","_id","Get","Update","put","Delete","delete","DeleteMany","entities","QrTypeList","QrTypeStatus","GetType","typeList","Promise","resolve","reject","totalData","filter","arr","some","query","toLowerCase","sort","GetCompareFunction","sortBy","orderType","sortType","slice","page","limit","paging","total","success","listSpecies","producerInfo","paddingInfo","borderTop","commonInfo","seedingInfo","DisplayDownloadLink","DisplayCoordinates","DisplayCelcius","DisplayPercent","image","Display3Info","DisplayImage","DisplayArray","plantingInfo","harvestingInfo","startTime","endTime","preliminaryTreatmentInfo","cleaningInfo","packingInfo","master","item","coordinates","estimatedExpireTimeStart","estimatedExpireTimeEnd","preservationInfo","sellStatus","agency","user","customer","username","TabPane","Tabs","UserBody","tabData","setCurrentTab","currentTab","setEntities","setPaginationProps","trigger","setTrigger","defaultActiveKey","onChange","DefaultPagination","tabBarStyle","tab","tabTitle","button","btn","columns","paginationParams","setPaginationParams","QR_PRODUCT_TYPE","TAB_QR","QrPage","InitMasterProps","getServer","countServer","createServer","deleteServer","deleteManyServer","getAllServer","updateServer","showCreate","setShowCreate","filterProps","setFilterProps","setShowDetail","setDetailEntity","add","setDeleteEntity","setShowDelete","getAll","refreshData","showImage","setShowImage","logisticImageDetail","setLogisticImage","QrProductType","setQrProductType","setSearchForm","rootSearchModel","order","dataField","text","cell","classes","paddingTop","landlot","SortColumn","align","createdAt","status","distributionTime","expiry","distributionLocation","action","formatExtraData","NormalColumn","minWidth","landLotColumn","codeType","activeBy","activeAt","find","selectField","UserService","__type","packagingSearchModel","shippingInfoColumns","shippingInfo","distributionInfoColumns","logisticImageRenderDetail","images","width","height","Yup","shape","min","distributionInfo","downloadQrFile","useCallback","date_input","Date","a","document","createElement","href","buffers","download","format","click","parentQrInfo","childQrColumns","link","childQrInfo","dE","setDE","renderInfoProduct","renderInfoPacking","matchId","setMatchId","setRenderInfo","createForm","_panel1","group1","required","target","Number","detailForm","disabled","qr","TabData","exact","path","match"],"mappings":"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","file":"static/js/20.c8e5cfd7.chunk.js","sourcesContent":["import React from 'react';\nimport {useIntl} from 'react-intl';\nimport {Formik} from 'formik';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {Card, CardBody, CardHeader} from '../card';\nimport SVG from 'react-inlinesvg';\nimport {ToAbsoluteUrl} from '../helpers/assets-helpers';\nimport {SearchModel} from '../common-types/common-type';\n// import InfiniteScroll from 'react-infinite-scroll-component';\nimport {iconStyle} from '../common-consts/const';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nimport './master-header.css';\nimport {\n  InputDateTime,\n  InputNumber,\n  InputSearchSelect,\n  InputString,\n  InputStringNumber,\n  InputTreeSelect\n} from \"./common-input\";\n\nexport function MasterHeader<T>({\n                                  title,\n                                  onSearch,\n                                  searchModel,\n                                  initValue = {},\n                                  value,\n                                  onClickBack\n                                }: {\n  searchModel: SearchModel;\n  title: string;\n  initValue?: any;\n  value?: any;\n  onSearch?: (data: any) => void;\n  onClickBack?: () => void;\n}) {\n  const intl = useIntl();\n  const defaultClassName = \"col-xxl-2 col-md-3 master-header-search-input-margin\";\n  const handleResetForm = (resetForm: any) => {\n    resetForm();\n  };\n  return (\n    <Card className={'master-header-card'}>\n      <CardHeader title={onClickBack ? <span\n                            onClick={onClickBack}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {intl.formatMessage({id: title}).toUpperCase()}\n                          </span> : intl.formatMessage({id: title}).toUpperCase()}/>\n      <CardBody>\n        <Formik\n          initialValues={initValue}\n          onSubmit={values => {\n            onSearch && onSearch({...values});\n          }}\n          onReset={data => {\n            onSearch && onSearch({});\n            // if (onReset) {\n            //   onReset(data);\n            // }\n          }}\n        >\n          {({values, handleSubmit, handleBlur, handleChange, setFieldValue, resetForm}) => (\n            <form onSubmit={handleSubmit} className=\"form form-label-right\">\n              <div className=\"form-group row master-header-search-margin\">\n                {searchModel ? (\n                  Object.keys(searchModel).map(key => {\n                    // console.log(values)\n                    switch (searchModel[key].type) {\n                      case 'string': {\n                        return (\n                          <InputString\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'string-number': {\n                        return (\n                          <InputStringNumber\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'number': {\n                        return (\n                          <InputNumber\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'date-time': {\n                        return (\n                          <InputDateTime\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                      case 'search-select': {\n                        if (searchModel[key].onSearch === undefined || searchModel[key].onSearch === null) return;\n                        const t: any = (t: any) => null;\n                        return (\n                          <InputSearchSelect\n                            className={defaultClassName}\n                            name={key}\n                            value={values[key]}\n                            {...searchModel[key]}\n                            onSearch={searchModel[key].onSearch ?? t}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                      case 'tree-select': {\n                        if (searchModel[key].onSearch === undefined || searchModel[key].onSearch === null) return;\n                        const t: any = (t: any) => null;\n                        return (\n                          <InputTreeSelect\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            onSearch={searchModel[key].onSearch ?? t}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                    }\n                    return <></>;\n                  })\n                ) : (\n                  <></>\n                )}\n              </div>\n  \n              {onSearch && (<div className=\"row no-gutters\">\n                <button className=\"btn btn-primary mr-8 fixed-btn-width\" type=\"submit\">\n                  <SearchIcon style={iconStyle}/>\n                  {intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_HEADER.SEARCH_BTN'})}\n                </button>\n                <button\n                  className=\"btn btn-outline-primary fixed-btn-width\"\n                  type=\"reset\"\n                  onClick={() => handleResetForm(resetForm)}>\n                  <SVG src={ToAbsoluteUrl('/media/svg/vncheck/reset-filter.svg')}\n                       style={iconStyle}/>\n                  {intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_HEADER.RESET_FILTER_BTN'})}\n                </button>\n              </div>)}\n            </form>\n          )}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n}\n","import React, {ReactElement} from 'react';\nimport {useFormikContext} from \"formik\";\n\nexport function InputCustom({\n                              className, component, ...props\n                            }: {\n  className: string,\n  component: (props: any) => ReactElement;\n  \n}) {\n  const Component = component;\n  const formik = useFormikContext<any>();\n  return (<div className={className}>\n    <Component  {...formik} {...props}/>\n  </div>)\n}\n\n","import React, {Fragment} from 'react';\nimport {InputGroups} from '../common-types/common-type';\nimport {useIntl} from 'react-intl';\nimport {\n  InputBoolean,\n  InputCheckBox,\n  InputDateTime,\n  InputImage,\n    InputFile,\n  InputNumber,\n  InputRadio,\n  InputSearchSelect,\n  InputSelect,\n  InputString,\n  InputStringNumber,\n  InputTag,\n  InputTreeSelect,\n} from './common-input';\nimport _ from 'lodash';\nimport {InputCustom} from \"../forms/input-custom\";\n\nexport function ModifyEntityPage<T>({\n                                      inputGroups,\n                                      mode = 'horizontal',\n                                    }:\n                                      {\n                                        inputGroups: InputGroups;\n                                        mode?: 'horizontal' | 'vertical';\n                                        errors?: any;\n                                      }) {\n  const intl = useIntl();\n  const {_subTitle, ...pl} = inputGroups;\n  return (\n    <>\n      <div className={'row'}>\n        {pl && Object.values(pl).map((inputGroup, index) => {\n          if (_.isString(inputGroup)) throw new Error('Sử dụng sai cách ' + inputGroup + '\\n' + JSON.stringify(pl));\n          const {_subTitle, _className, _inputClassName, ...inputs} = inputGroup;\n          return (\n            <div key={`modify-entity-page${index}`} className={_className ?? 'col-12'}>\n              {_subTitle && _subTitle !== '' && (<div\n                className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n              <RenderForm inputs={inputs} prevKey={''} inputClassName={_inputClassName} mode={mode}/>\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n\nexport const RenderForm = ({inputs, prevKey, mode, inputClassName}: any) => {\n  const intl = useIntl();\n  const defaultClassName = inputClassName ?? 'mb-5';\n  return (<>\n    {Object.keys(inputs).map(key => {\n      const input = inputs[key];\n      const trimKey = key.trim();\n      if (_.isString(input)) throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(inputs));\n      const name = prevKey ? ((trimKey === '' || prevKey === '') ? prevKey : `${prevKey}.${trimKey}`) : trimKey;\n      switch (input._type) {\n        case 'string':\n        case 'email':\n          return (\n            <InputString\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              mode={mode}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'string-number': {\n          return (\n            <InputStringNumber\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              mode={mode}\n              key={`modify-page-form-${name}`}/>\n          );\n        }\n        case 'number':\n          return (\n            <InputNumber\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'date-time':\n          return (\n            <InputDateTime\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'radio':\n          return (\n            <InputRadio\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          )\n        case 'boolean': {\n          return (\n            <InputBoolean\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        case 'image':\n          return (\n            <InputImage\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              // value={(values && values[key]) || []}\n              key={`modify-page-form-${name}`}\n            />\n          );\n      case 'file':\n          return (\n              <InputFile\n                  className={defaultClassName}\n                  name={name}\n                  mode={mode}\n                  type={input._type}\n                  {...input}\n                  // value={(values && values[key]) || []}\n                  key={`modify-page-form-${name}`}\n              />\n          );\n        case 'search-select': {\n          return (\n            <InputSearchSelect\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        case 'tree-select': {\n          return (\n            <InputTreeSelect\n              className={defaultClassName}\n              name={key}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`master_header${key}`}\n            />\n          );\n        }\n        case 'tag': {\n          return (\n            <InputTag\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        \n        case 'checkbox':\n          return (\n            <InputCheckBox\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        \n        case 'select':\n          return (\n            <InputSelect\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          )\n        \n        case 'custom': {\n          const {_type, ...props} = input;\n          return (<InputCustom {...props} key={`modify-page-form-${name}`}/>);\n        }\n        default: {\n          const {_type, _subTitle, _className, _inputClassName, ...innt} = input as any;\n          return _className ? (\n              <span key={`render_form_span${name}`} className={_className}>\n            {_subTitle && _subTitle !== '' && (<div\n              className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n                <RenderForm inputs={innt} inputClassName={_inputClassName ?? inputClassName}\n                            prevKey={name}\n                            mode={mode}/>\n            </span>) :\n            (<Fragment key={`render_form${name}`}>\n              {_subTitle && _subTitle !== '' && (<div\n                className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n              <RenderForm inputs={innt} inputClassName={_inputClassName ?? inputClassName}\n                          prevKey={name}\n                          mode={mode}/>\n            </Fragment>)\n        }\n      }\n    })}</>)\n};\n","import React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {useIntl} from 'react-intl';\nimport {iconStyle} from \"../common-consts/const\";\nimport {getField} from \"../helpers/common-function\";\nimport {RenderInfoDetail} from \"../common-types/common-type\";\nimport _ from \"lodash\";\nimport {getFieldV3} from \"./master-detail-page\";\n\nexport function MasterEntityDetailDialog({\n                                           title = 'COMMON_COMPONENT.DETAIL_DIALOG.HEADER_TITLE',\n                                           moduleName = 'COMMON_COMPONENT.DETAIL_DIALOG.MODULE_NAME',\n                                           show,\n                                           entity,\n                                           onHide,\n                                           renderInfo,\n                                           size = 'sm'\n                                         }: {\n  title?: string;\n  moduleName?: string;\n  show: boolean;\n  entity: any;\n  renderInfo: RenderInfoDetail;\n  onHide: () => void;\n  size?: 'sm' | 'lg' | 'xl';\n}) {\n  const intl = useIntl();\n  return (\n    <Modal\n      size={size}\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-detail\"\n    >\n      <Modal.Header closeButton className=\"border-bottom-0\">\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {intl\n            .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n            .toUpperCase()}\n        </Modal.Title>\n      </Modal.Header>\n      \n      <MasterEntityDetail entity={entity} renderInfo={renderInfo}/>\n      <Modal.Footer className=\"border-top-0\">\n        <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n          <CancelOutlinedIcon style={iconStyle}/>\n          {intl.formatMessage({id: 'COMMON_COMPONENT.DETAIL_DIALOG.CLOSE_BTN'})}\n        </button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport function MasterEntityDetail({\n                                     entity,\n                                     renderInfo,\n                                   }: {\n  renderInfo: RenderInfoDetail;\n  entity: any;\n}) {\n  const intl = useIntl();\n  return entity ? (\n    <Modal.Body>\n      <div className={`row`}>\n        {renderInfo.map((value, index) => (\n          <div key={index} className={`${value.className ?? 'col-12'}`}>\n            {value.header && value.header !== '' && <p className=\"text-primary detail-dialog-subtitle\">\n              {intl.formatMessage({id: value.header})}\n            </p>}\n            {Object.keys(value.data).map((dataKey) => (\n              <div className={`detail-dialog-row-info row`} key={dataKey}>\n                {value.data[dataKey].title && value.data[dataKey].title !== '' &&\n                <div className={`${value.titleClassName ?? 'col-4'}`}>\n                  {intl.formatMessage({id: value.data[dataKey].title})}:\n                </div>}\n                <div className={`${value.dataClassName ?? 'col-8'}`}>\n                  {(() => {\n                    const displayInfo = value.data[dataKey];\n                    const fieldName = displayInfo.keyField ?? dataKey;\n                    const displayData = fieldName.indexOf(\"[\") > -1 ?\n                      getFieldV3(entity, fieldName) :\n                      getFieldV3(entity, fieldName)[0]\n                    return displayInfo.formatter ? displayInfo.formatter(displayData, entity)\n                      : (<>{(_.isNumber(displayData) || _.isString(displayData)) ? displayData : JSON.stringify(displayData)}</>)\n                  })()\n                  }\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Modal.Body>\n  ) : (\n    <></>\n  );\n}\n","// please be familiar with react-bootstrap-table-next column formaters\n// https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Work%20on%20Columns&selectedStory=Column%20Formatter&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\n/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\nimport Visibility from '@material-ui/icons/Visibility';\nimport './master-table.scss';\nimport {ToAbsoluteUrl} from '../helpers/assets-helpers';\nimport {ActionColumnProps} from '../common-types/common-type';\nimport {IntlShape} from 'react-intl';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport QueueOutlinedIcon from '@material-ui/icons/QueueOutlined';\nimport HistoryIcon from '@material-ui/icons/History';\n\nexport function ActionsColumnFormatter<T>(\n  cellContent: any,\n  row: any,\n  rowIndex: number,\n  {onShowDetail, onDelete, onEdit,onLock, onChangeRole, onClone, onGoHistory, intl}: ActionColumnProps<T> & { intl: IntlShape },\n) {\n  return (\n    <div>\n      {onLock && (<a\n        // to={`/purchase-order/${row.code}`}\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-1\"\n        onClick={(e) => {\n          onLock(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <SVG\n            src={ToAbsoluteUrl('/media/svg/vncheck/lock.svg')}\n            title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.LOCK_BTN'})}\n          />\n        </span>\n      </a>)}\n      {onClone &&  (<a\n        title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.CLONE_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility mx-1\"\n        onClick={(e) => {\n          onClone(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <QueueOutlinedIcon className=\"text-primary eye\"/>\n          </span>\n        </span>\n      </a>)}\n      {onShowDetail && (<a\n        title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.SHOW_DETAIL_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility\"\n        onClick={(e) => {\n          onShowDetail(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <Visibility className=\"text-primary eye\"/>\n        </span>\n      </a>)}\n      {onEdit && (<a\n        // to={`/purchase-order/${row.code}`}\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-1\"\n        onClick={(e) => {\n          onEdit(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <SVG\n            src={ToAbsoluteUrl('/media/svg/icons/Communication/Write.svg')}\n            title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n          />\n        </span>\n      </a>)}\n      {onDelete &&  (<a\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.DELETE_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility\"\n        onClick={(e) => {\n          onDelete(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <DeleteIcon className=\"text-primary eye\"/>\n          </span>\n        </span>\n      </a>)}\n      {\n        onGoHistory && (\n          <a\n          className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility mx-1\"\n          onClick={(e) => {\n            onGoHistory(row);\n            e.preventDefault();\n          }}>\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <HistoryIcon className=\"text-primary eye\" />\n          </span>\n        </a>\n        )\n      }\n    </div>\n  );\n}\n\nexport function TickColumnFormatter<T>(\n  cellContent: string | boolean,\n  row: any) {\n  return (cellContent === \"1\" || cellContent === \"true\" || cellContent === true) ? (\n    <CheckCircleIcon style={{color: '#1DBE2D'}}/>) : (<CheckCircleIcon style={{color: '#C4C4C4'}}/>)\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {Modal, Spinner} from 'react-bootstrap';\nimport {Form, Formik} from 'formik';\nimport {useIntl} from 'react-intl';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {ModifyPanel} from '../common-types/common-type';\nimport {iconStyle} from '../common-consts/const';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {InitValues} from \"../helpers/common-function\";\n\nfunction ModifyEntityDialogForm<T>({\n                                     entity,\n                                     onModify,\n                                     moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                                     onHide,\n                                     modifyPanel,\n                                     validation,\n                                     loading\n                                   }: {\n  moduleName?: string;\n  entity?: any;\n  onHide: () => void;\n  onModify: (values: any) => Promise<any>;\n  modifyPanel: ModifyPanel;\n  validation: any;\n  loading?: boolean\n}) {\n  const intl = useIntl();\n  const {_title, ...inputGroups} = modifyPanel;\n  const initValues = useMemo(() => InitValues({_header: '', panel1: modifyPanel}), [modifyPanel]);\n  const [entityForEdit, setEntityForEdit] = useState(initValues);\n  \n  useEffect(() => {\n     setEntityForEdit(entity ?? initValues);\n  }, [entity,initValues]);\n  \n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={entityForEdit}\n      validationSchema={validation}\n      onSubmit={(values, {setSubmitting}) => {\n        // console.log(values);\n        onModify({...entity, ...values, __v: undefined}).then(() => {\n          onHide()\n        }).catch((err) => {\n          setSubmitting(false)\n        });\n      }}>\n      {({handleSubmit}) => (\n        <>\n          <Modal.Body className=\"overlay overlay-block cursor-default\">\n            <Form className=\"form form-label-right\">\n              {Object.keys(inputGroups).map(key => (\n                <React.Fragment key={key}>\n                  <ModifyEntityPage inputGroups={inputGroups}/>\n                </React.Fragment>\n              ))}\n            </Form>\n          </Modal.Body>\n          <Modal.Footer className=\"border-top-0 pt-10\">\n            <button\n              type=\"submit\"\n              onClick={() => handleSubmit()}\n              className=\"btn btn-primary fixed-btn-width\">\n              {\n                loading === true ? <Spinner animation=\"border\" variant=\"light\" size=\"sm\"/> :\n                  <SaveOutlinedIcon style={iconStyle}/>\n              }\n              {'\\u00A0'}\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.SAVE_BTN'})}\n            </button>\n            <button\n              type=\"button\"\n              onClick={onHide}\n              className=\"btn btn-outline-primary fixed-btn-width\">\n              <CancelOutlinedIcon style={iconStyle}/>\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.CLOSE_BTN'})}\n            </button>\n          </Modal.Footer>\n        </>\n      )}\n    </Formik>\n  );\n}\n\nexport default ModifyEntityDialogForm;\n","import React, {useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ModifyEntityDialogForm from './modify-entity-dialog-form';\nimport {useIntl} from 'react-intl';\nimport {ModifyForm} from \"../common-types/common-type\";\nimport _ from \"lodash\";\nfunction ModifyEntityDialog<T>({\n                                 show,\n                                 onHide,\n                                 entity,\n                                 onModify,\n                                 size = 'sm',\n                                 moduleName = 'COMMON_COMPONENT.DETAIL_DIALOG.MODULE_NAME',\n                                 formModel,\n                                 validation,\n                                 loading\n                               }: {\n  show: boolean;\n  onHide: () => void;\n  entity?: T;\n  moduleName?: string;\n  onModify: (values: any) => Promise<any>;\n  formModel: ModifyForm;\n  size?: 'sm' | 'lg';\n  actions?: any;\n  validation?: any;\n  homePage?: string;\n  error?: { error: string };\n  loading?: boolean;\n}) {\n  const intl = useIntl();\n  const {_header, ...panels} = formModel;\n  return (\n    <Modal\n      size={size}\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-modify\"\n      // style={{width}}\n    >\n      <Modal.Header closeButton className=\"border-bottom-0\">\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {_.isString(_header) ? intl\n            .formatMessage(\n              {id: _header},\n              {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n            )\n            .toUpperCase() : _header(entity)}\n        </Modal.Title>\n      </Modal.Header>\n      {Object.values(panels).map((panel, index) => {\n        if(_.isString(panel)) throw new Error('Sử dụng sai cách ' + panel);\n        return (<ModifyEntityDialogForm\n          modifyPanel={panel}\n          validation={validation}\n          entity={entity}\n          onHide={onHide}\n          onModify={onModify}\n          key={`tttttttt${index}`}\n          loading={loading}\n        />)\n      })}\n      {/*<MasterEntityDetail data={entity} renderInfo={renderInfo}/>*/}\n     \n    </Modal>\n  );\n}\n\nexport default ModifyEntityDialog;\n","import React from 'react';\nimport { Card, CardBody } from '../../common-library/card';\nimport { TextareaAutosize } from '@material-ui/core';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AxiosResponse } from 'axios';\nimport _ from 'lodash';\n\nconst notifyError = (error: string) => {\n  toast.error(error, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nconst PostComments = ({\n                                  entity,\n                                  onComments,\n                                }: {\n  entity?: any;\n  onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n}) => {\n  const valueRef = React.useRef<any>({ value: '' });\n  const [commentsArr, setCommentArr] = React.useState(entity?.comments || []);\n\n  React.useEffect(() => {\n    if (entity) {\n      setCommentArr(entity.comments)\n    }\n  }, [entity])\n\n  const handleComment = (entity: any, comment: any) => {\n    if (onComments && entity) {\n      onComments(entity, comment)\n          .then(res => {\n            setCommentArr(res.data);\n            // setComment({ content: '' });\n            valueRef.current.value = '';\n          })\n          .catch(err => {\n            throw err;\n          });\n    }\n  };\n\n  return (\n      <Card>\n        <CardBody>\n          <div className=\"pl-xl-15 pl-md-10 pl-5 mb-5\">\n            <span className=\"modify-subtitle text-primary mt-8\">COMMENTS</span>\n            <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n              {//entityForEdit.comments\n                // [\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                // ]\n                commentsArr?.map(\n                    (\n                        value: { createdBy: { _id: string; fullName: string }; content: string },\n                        key: number,\n                    ) => (\n                        <div key={key} className=\"row mb-3\">\n                          <div className=\"col-1 text-center\">\n                            <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                          </div>\n                          <div className=\"col-10 bg-light rounded p-3\">\n                            <p className=\"font-bold\">\n                              {_.isString(value.createdBy)\n                                  ? value.createdBy\n                                  : value.createdBy.fullName\n                                      ? value.createdBy.fullName\n                                      : 'Anonymous'}\n                            </p>\n                            <p>{value.content}</p>\n                          </div>\n                        </div>\n                    ),\n                )}\n              <div className=\"row\">\n                <div className=\"col-1\"></div>\n                <div className=\"col-10\">\n                  <div className=\"row\">\n                    <div className=\"col-11\">\n                      <TextareaAutosize\n                          className=\"form-control\"\n                          rowsMin={1}\n                          aria-label=\"empty textarea\"\n                          ref={valueRef}\n                          placeholder=\"Write comment...\"\n                      />\n                    </div>\n                    <div className=\"col-1\">\n                      <button\n                          className=\"btn btn-primary pl-11 pr-11\"\n                          onClick={() => {\n                            if (valueRef.current.value !== '') {\n                              handleComment(entity, { content: valueRef.current.value });\n                            } else {\n                              notifyError('Comment is empty!');\n                            }\n                          }}>\n                        Sent\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n  );\n};\n\nexport default PostComments;\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {Form, Formik} from 'formik';\nimport {Link, useHistory} from 'react-router-dom';\nimport {Card, CardBody, CardHeader} from '../card';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport {ModifyForm} from '../common-types/common-type';\nimport _ from 'lodash';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {GetHomePage, InitValues} from \"../helpers/common-function\";\nimport {Spinner} from \"react-bootstrap\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PostComments from \"../../pages/post/post-comments\";\nimport {AxiosResponse} from \"axios\";\n\nfunction EntityCrudPage({\n                          entity,\n                          onModify,\n                          moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                          code,\n                          get,\n                          formModel,\n                          actions,\n                          validation,\n                          loading,\n                          mode,\n                          setEditEntity,\n                          homePageUrl,\n                            allFormButton,\n                            onComments,\n                            showComment = true\n                        }: {\n  // modifyModel: ModifyModel;\n  moduleName?: string;\n  entity?: any;\n  onModify: (values: any) => Promise<any>;\n  code?: string;\n  get?: (code: string) => any;\n  formModel: ModifyForm;\n  mode?: 'horizontal' | 'vertical';\n  actions?: any;\n  validation?: any;\n  autoFill?: any;\n  loading?: boolean;\n  setEditEntity?: (entity: any) => void;\n  homePageUrl?: string\n    allFormButton?: any;\n    onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n    showComment?: boolean;\n}) {\n  const intl = useIntl();\n  const history = useHistory();\n  const initValues = useMemo(() => InitValues(formModel), [formModel]);\n\n  const [entityForEdit, setEntityForEdit] = useState(entity);\n  useEffect(()=>{\n    entity && setEntityForEdit(entity);\n  }, [entity])\n\n  useEffect(() => {\n    if (!code && !entity) setEntityForEdit(initValues);\n  }, [initValues, code]);\n  const {_header, ...modifyPanels} = formModel;\n  \n  useEffect(() => {\n    if (code) {\n      get &&\n      get(code).then((res: { data: any }) => {\n        setEntityForEdit({...res.data});\n        if (setEditEntity) { setEditEntity(res.data) }\n      });\n    }\n  }, [code]);\n\n  console.log(entityForEdit)\n  \n  return (\n    <>\n      <Formik\n        enableReinitialize={true}\n        initialValues={entityForEdit}\n        validationSchema={validation}\n        onSubmit={(values, {setSubmitting, validateForm}) => {\n          console.log(values)\n          onModify(values).then(() => {\n            history.push(homePageUrl ?? GetHomePage(window.location.pathname))\n          }).catch((err) => {\n            // setSubmitting(false);\n          });\n        }}>\n        {({handleSubmit, setFieldValue}) => (\n          <>\n            <Form className=\"form form-label-right\">\n              {Object.keys(modifyPanels).map((key, index, keys) => {\n                const val = modifyPanels[key];\n                if (_.isString(val))\n                  throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(modifyPanels));\n                const {_title, ...panel} = val;\n                return (\n                  <Card key={`entity-crud-card` + key} className={'modify-page'}>\n                    <CardHeader\n                      className={'border-bottom-0'}\n                      title={\n                        index == 0 ? (\n                          <a\n                            onClick={() => history.goBack()}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {_.isString(_header) ? intl\n                              .formatMessage(\n                                {id: _header},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase() : _header(entityForEdit)}\n                          </a>\n                        ) : (\n                          <>\n                            {intl\n                              .formatMessage(\n                                {id: _title},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase()}\n                          </>\n                        )\n                      }\n                    />\n                    <CardBody>\n                      <ModifyEntityPage\n                        mode={mode}\n                        // className={formPart[key].className}\n                        // images={images}\n                        inputGroups={panel}\n                      />\n                    {allFormButton && allFormButton.type === 'outside' && (\n                        <div className=\"text-right mt-10\">\n                            {Object.keys(allFormButton.data).map(keyss => {\n                                switch (allFormButton['data'][keyss].role) {\n                                    case 'submit':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick();\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n\n                                    case 'special':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'button':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}\n                                                onClick={() => {\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'link-button':\n                                        return (\n                                            <Link to={allFormButton['data'][keyss].linkto} key={keyss}>\n                                                <button\n                                                    type={allFormButton['data'][keyss].type}\n                                                    className={allFormButton['data'][keyss].className}>\n                                                    {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                                </button>\n                                            </Link>\n                                        );\n                                }\n                            })}\n                        </div>\n                    )}\n                      {(actions && index === Object.keys(modifyPanels).length - 1) && (\n                        <div className=\"text-right mt-10\" key={key}>\n                          {Object.keys(actions.data).map(keyss => {\n                            switch (actions.data[keyss].role) {\n                              case 'submit':\n                                return (\n                                  <button\n                                    className={actions.data[keyss].className}\n                                    key={keyss}\n                                    type={'submit'}\n                                  >\n                                    {loading === true ? actions.data[keyss].loading ?? (\n                                      <Spinner animation=\"border\" variant=\"light\"\n                                               size=\"sm\"/>) : actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              \n                              case 'button':\n                                return (\n                                  <button\n                                    type={actions.data[keyss].type}\n                                    className={actions.data[keyss].className}\n                                    key={keyss}>\n                                    {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              case 'link-button':\n                                return (\n                                  <Link to={actions.data[keyss].linkto} key={keyss}>\n                                    <button\n                                      type={actions.data[keyss].type}\n                                      className={actions.data[keyss].className}>\n                                      {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                    </button>\n                                  </Link>\n                                );\n                            }\n                          })}\n                        </div>)\n                      }\n                    </CardBody>\n                  </Card>\n                );\n              })}\n\n            </Form>\n              {showComment !== true || !onComments ? <></> : (entityForEdit?.confirmationStatus === '3'\n                  || (entityForEdit?.isMaster === true && entityForEdit?.confirmationStatus === '2')) ? (\n                  <Card>\n                      <CardBody className={'p-0'}>\n                          <div className=\"mb-5 mt-5\">\n                              <span className=\"text-primary detail-dialog-subtitle mt-8\">BÌNH LUẬN</span>\n                              <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n                                  {entityForEdit && entityForEdit.comments.length > 0 ? (\n                                      entityForEdit.comments.map(\n                                          (\n                                              value: { createdBy: { _id: string; fullName: string }; content: string },\n                                              key: number,\n                                          ) => (\n                                              <div key={key} className=\"row mb-3\">\n                                                  <div className=\"col-1 text-center\">\n                                                      <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                                                  </div>\n                                                  <div className=\"col-10 bg-light rounded p-3\">\n                                                      <p className=\"font-bold\">{value.createdBy.fullName}</p>\n                                                      <p>{value.content}</p>\n                                                  </div>\n                                              </div>\n                                          ),\n                                      )\n                                  ) : (\n                                      <span>Chưa có bình luận</span>\n                                  )}\n                              </div>\n                          </div>\n                      </CardBody>\n                  </Card>\n              ) : (\n                  <PostComments entity={entityForEdit} onComments={onComments} />\n              )}\n          </>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default EntityCrudPage;\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {UserModel} from \"./user.model\";\nimport {RoleArrayToObject, RoleObjectToArray} from \"../../common-library/helpers/common-function\";\nimport _ from \"lodash\";\n\n\nexport const API_URL = API_BASE_URL + '/user';\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\n// export const Create: CreateProps<any> = (data: any) => {\n//   const sendData = _.cloneDeep(data);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   console.log(sendData)\n//   return axios.post(API_URL, sendData);\n// };\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Count: CountProps<UserModel> = (queryProps) => {\n  return axios.get(`${API_URL}/get/count`, {\n    params: {...queryProps},\n  });\n};\n\n// export const GetById = (id: string) => {\n//   return axios.get(`${API_URL}/${id}`).then(res => {\n//     if (_.isArray(res.data.scopes)) {\n//       let scopeArray = res.data.scopes;\n//       scopeArray = _.isEqual(scopeArray, res.data.addedScope.enable) ? [...scopeArray] : [...scopeArray, ...res.data.addedScope.enable];\n//       scopeArray = scopeArray.filter((s: string) => {\n//         return !res.data.addedScope.disable.some((d: string) => (s === d));\n//       });\n//       res.data.scopes = RoleArrayToObject(scopeArray);\n//     }\n//     console.log(res)\n//     return res;\n//   });\n// };\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\n\nexport const Get: GetProps<UserModel> = (entity) => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\n// export const Update: UpdateProps<any> = (entity) => {\n//   const sendData = _.cloneDeep(entity);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   return axios.put(`${API_URL}/${entity._id}`, sendData);\n// };\n\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {data:entities},\n  });\n};\n\n// export const Delete: DeleteProps<UserModel> = (entity) => {\n//   //Lười sửa nên viết như này cho nhanh\n//   return axios.put(`${API_URL}/${entity._id}`, {...entity, status: '0'});\n// };\n//\n// export const DeleteMany: DeleteManyProps<UserModel> = (entities) => {\n//   return axios.delete(API_URL, {\n//     data: {arrayEntities: entities}\n//   });\n// };\n\n","import axios from 'axios';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\n\nimport {QrModel} from './qr.model';\nimport {GetCompareFunction} from \"../../common-library/helpers/common-function\";\nimport {API_BASE_URL} from \"../../common-library/common-consts/enviroment\";\n\nexport const API_URL = API_BASE_URL + '/qrcode';\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\nexport const API_FILE_URL = API_BASE_URL + '/file';\n\nexport const Create: CreateProps<QrModel> = (data: QrModel) => {\n  return axios.post<QrModel>(API_URL, {...data, type: data.type.code});\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps},\n    // paramsSerializer: ParamsSerializer\n  });\n};\nexport const QrTypeList = [{code: \"1\", name: \"Sản phẩm\"}, {code: \"2\", name: \"Đóng gói\"}];\nexport const QrTypeStatus = [{code: \"1\", name: \"Mới tạo\"}, {code: \"2\", name: \"Đã phân phối\"}, {code: \"3\", name: \"Đã sử dụng\"}];\n\nexport const GetType = (typeList: { code: string; name: string }[], {queryProps, paginationProps}: any): Promise<any> => {\n  // console.log(queryProps);\n  return new Promise((resolve, reject) => {\n    const totalData = typeList.filter((val, index, arr) => {\n      return Object.values(queryProps).some((query: any) => val.name.toLowerCase().indexOf(query.toLowerCase()) > -1);\n    });\n    const data = totalData.sort(GetCompareFunction({\n      key: paginationProps.sortBy,\n      orderType: paginationProps.sortType === 'asc' ? 1 : -1\n    })).slice((paginationProps.page - 1) * paginationProps.limit, paginationProps.page * paginationProps.limit);\n    // console.log(data);\n    resolve({\n      code: 200,\n      data: {\n        data: data,\n        paging: {page: paginationProps.page, limit: paginationProps.limit, total: totalData.length}\n      },\n      success: true\n    })\n  })\n}\n\nexport const Count: CountProps<any> = ({\n                                         queryProps,\n                                         sortList,\n                                         paginationProps,\n                                       }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Get: GetProps<any> = entity => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {listSpecies: entities},\n  });\n};\n","import React from \"react\";\nimport {RenderInfoDetail} from \"../../common-library/common-types/common-type\";\nimport {\n  Display3Info,\n  DisplayArray,\n  DisplayCelcius,\n  DisplayCoordinates,\n  DisplayDateTime,\n  DisplayDiffTime,\n  DisplayDownloadLink,\n  DisplayImage,\n  DisplayPercent\n} from \"../../common-library/helpers/detail-helpers\";\n\n\nexport const producerInfo: RenderInfoDetail = [{\n  header: 'ENTERPRISE_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'enterprise.name': {title: 'ENTERPRISE.NAME'},\n    'enterprise.taxId': {title: 'ENTERPRISE.TAX_ID'},\n    'enterprise.address': {title: 'ENTERPRISE.ADDRESS'},\n    'enterprise.phone': {title: 'ENTERPRISE.PHONE'},\n    'enterprise.presentedBy': {title: 'ENTERPRISE.REPRESENTED_BY'},\n    'enterprise.gln': {title: 'ENTERPRISE.GLN'},\n  }\n}];\nexport const paddingInfo: RenderInfoDetail = [{\n  className: 'col-12',\n  dataClassName: 'col-12',\n  data: {\n    'padding': {formatter: () => (<div style={{borderTop: '1px solid #DADADA'}} className={'mb-10'}/>)},\n  }\n}]\n\nexport const commonInfo: RenderInfoDetail = [{\n  header: 'GENERAL_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.seeding.species.name': {title: 'SEEDING.SPECIES_NAME',},\n    'productPlan.seeding.species.barcode': {title: 'SEEDING.GTIN',},\n  }\n}]\nexport const seedingInfo: RenderInfoDetail = [{\n  header: 'SEEDING_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.seeding.certificates': {\n      title: 'SEEDING.CERTIFICATE',\n      formatter: (input) => DisplayDownloadLink(input, 'path')\n    },\n    'productPlan.seeding.buyInvoice': {\n      title: 'SEEDING.INVOICE',\n      formatter: (input) => DisplayDownloadLink(input, 'path')\n    },\n    'productPlan.seeding.seedingTime': {\n      title: 'SEEDING.SEEDING_TIME',\n      formatter: (input) => (<DisplayDateTime input={input}/>),\n    },\n    'productPlan.seeding.farmLocation.[coordinates]': {\n      title: 'SEEDING.FARM_LOCATION',\n      formatter: DisplayCoordinates\n    },\n    'productPlan.seeding.numberOfSeed': {title: 'SEEDING.NUMBER_OF_SEED',},\n    'productPlan.seeding.landLot.code': {title: 'SEEDING.LAND_LOT',},\n    'productPlan.seeding.area': {\n      title: 'SEEDING_AREA',\n      formatter: (input) => {\n        return (<>{input ? (input + ' m2') : ''}</>)\n      },\n    },\n    'productPlan.seeding.temperature': {\n      title: 'TEMPERATURE',\n      formatter: DisplayCelcius,\n    },\n    'productPlan.seeding.humidity': {\n      title: 'HUMIDITY',\n      formatter: DisplayPercent,\n    },\n    'productPlan.seeding.porosity': {\n      title: 'POROSITY',\n      formatter: DisplayPercent,\n    },\n    'productPlan.seeding.seedingImage': {\n      title: 'PLANTING_IMAGE_BEFORE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo)\n      }\n    },\n    'productPlan.seeding.landLotImage': {\n      title: 'PLANTING_LAND_LOT_IMAGE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo)\n      }\n    },\n    'productPlan.seeding.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.seeding.[leader].fullName': {\n      title: 'ADMIN_SEEDING_LEADER',\n      formatter: (input) => DisplayArray(input)\n    },\n    'productPlan.seeding.[technical].user.fullName': {\n      title: 'ROLE.TECHNICIAN',\n      formatter: (input) => DisplayArray(input)\n    },\n    'productPlan.seeding.[worker].fullName': {\n      title: 'SEEDING_WORKER',\n      formatter: (input) => {\n        console.log(input);\n        return DisplayArray(input)\n      }\n    },\n  }\n}];\n\nexport const plantingInfo: RenderInfoDetail = [{\n  header: 'PLANTING_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.planting.numberOfPlants': {\n      title: 'PLATING_QUANTITY',\n    },\n    'productPlan.planting.area': {\n      title: 'PLANTING_AREA',\n      formatter: (input) => {\n        return (<>{input ? (input + ' m2') : ''}</>)\n      },\n    },\n    'productPlan.planting.farmLocation.[coordinates]': {\n      title: 'PLANTING.FARM_LOCATION',\n      formatter: DisplayCoordinates\n    },\n    'productPlan.planting.imageBefore': {\n      title: 'PLANTING_LAND_LOT_IMAGE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo)\n      }\n    },\n    'productPlan.planting.imageAfter': {\n      title: 'PLANTING_IMAGE_PROCESSING',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo)\n      }\n    },\n    'productPlan.planting.temperature': {\n      title: 'TEMPERATURE',\n      formatter: DisplayCelcius,\n    },\n    'productPlan.planting.humidity': {\n      title: 'HUMIDITY',\n      formatter: DisplayPercent,\n    },\n    'productPlan.planting.porosity': {\n      title: 'POROSITY',\n      formatter: DisplayPercent,\n    },\n    'productPlan.planting.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.planting.[leader].fullName': {\n      title: 'ADMIN_SEEDING_LEADER',\n      formatter: (input) => DisplayArray(input)\n    },\n    'productPlan.planting.[technical].user.fullName': {\n      title: 'ROLE.TECHNICIAN',\n      formatter: (input) => DisplayArray(input)\n    },\n    'productPlan.planting.[worker].fullName': {\n      title: 'PLANTING_WORKER',\n      formatter: (input) => DisplayArray(input)\n    },\n  }\n}];\n\nexport const harvestingInfo: RenderInfoDetail = [{\n  header: 'HARVESTING_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.harvesting.time': {\n      keyField: 'productPlan.harvesting',\n      title: 'HARVESTING_DATE',\n      formatter: (e) => (<DisplayDiffTime startTime={e?.startTime} endTime={e?.endTime}/>)\n    },\n    'productPlan.harvesting.quantity': {\n      title: 'HARVESTING_REAL_QUANTITY',\n    },\n    'productPlan.harvesting.imageBefore': {\n      title: 'HARVESTING_IMAGE_BEFORE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.harvesting.imageInProgress': {\n      title: 'HARVESTING_IMAGE_PROCESSING',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.harvesting.imageAfter': {\n      title: 'HARVESTING_IMAGE_AFTER',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.harvesting.temperature': {\n      title: 'TEMPERATURE',\n      formatter: DisplayCelcius\n    },\n    'productPlan.harvesting.humidity': {\n      title: 'HUMIDITY',\n      formatter: DisplayPercent\n    },\n    'productPlan.harvesting.porosity': {\n      title: 'POROSITY',\n      formatter: DisplayPercent\n    },\n    'productPlan.planting.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.harvesting.[leader].user.fullName': {\n      title: 'ADMIN_HARVESTING_LEADER',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.harvesting.[technical].user.fullName': {\n      title: 'ROLE.TECHNICIAN',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.harvesting.[worker].user.fullName': {\n      title: 'HARVESTING_WORKER',\n      formatter: (input) => DisplayArray(input),\n    },\n  }\n}];\n\nexport const preliminaryTreatmentInfo: RenderInfoDetail = [{\n  header: 'PRELIMINARY_TREATMENT_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.preliminaryTreatment.time': {\n      keyField: 'productPlan.preliminaryTreatment', title: 'PRELIMINARY_TREATMENT_TIME',\n      formatter: (e) => (<DisplayDiffTime startTime={e?.startTime} endTime={e?.endTime}/>)\n    },\n    'productPlan.preliminaryTreatment.quantity': {\n      title: 'PRELIMINARY_TREATMENT_QUANTITY_REAL',\n    },\n    'productPlan.preliminaryTreatment.imageBefore': {\n      title: 'PRELIMINARY_TREATMENT_IMAGE_BEFORE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.preliminaryTreatment.imageInProgress': {\n      title: 'PRELIMINARY_TREATMENT_IMAGE_PROCESSING',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.preliminaryTreatment.imageAfter': {\n      title: 'PRELIMINARY_TREATMENT_IMAGE_AFTER',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.planting.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.preliminaryTreatment.[leader].user.fullName': {\n      title: 'PRELIMINARY_TREATMENT_LEADER',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.preliminaryTreatment.[technical].user.fullName': {\n      title: 'PRELIMINARY_TREATMENT_TECHNICAL',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.preliminaryTreatment.[worker].user.fullName': {\n      title: 'PRELIMINARY_TREATMENT_WORKER',\n      formatter: (input) => DisplayArray(input),\n    },\n  }\n}];\n\nexport const cleaningInfo: RenderInfoDetail = [{\n  header: 'CLEANING_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.cleaning.time': {\n      keyField: 'productPlan.cleaning', title: 'CLEANING_TIME',\n      formatter: (e) => (<DisplayDiffTime startTime={e?.startTime} endTime={e?.endTime}/>)\n    },\n    'productPlan.cleaning.quantity': {\n      title: 'Sản lượng sau làm sạch',\n    },\n    'productPlan.cleaning.imageBefore': {\n      title: 'CLEANING_IMAGE_BEFORE',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.cleaning.imageInProgress': {\n      title: 'CLEANING_IMAGE_PROCESSING',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.cleaning.imageAfter': {\n      title: 'CLEANING_IMAGE_AFTER',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.planting.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.cleaning.[leader].user.fullName': {\n      title: 'CLEANING_LEADER',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.cleaning.[technical].user.fullName': {\n      title: 'CLEANING_TECHNICAL',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.cleaning.[worker].user.fullName': {\n      title: 'CLEANING_WORKER',\n      formatter: (input) => DisplayArray(input),\n    },\n  }\n}];\n\nexport const packingInfo: RenderInfoDetail = [{\n  header: 'PACKING_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.packing.address': {\n      keyField: 'productPlan.packing.packingImage', title: 'PACKING_LOCATION',\n      formatter: (e) => {\n        const master = e?.filter((item: any) => item.isMaster === true)\n        return <>{master && master[0]?.location && DisplayCoordinates(master[0]?.location?.coordinates)}</>\n      }\n    },\n    'productPlan.packing.packing.code': {\n      title: 'Quy cách đóng gói',\n    },\n    'productPlan.packing.exp': {\n      keyField: 'productPlan.packing', title: 'Hạn sử dụng',\n      formatter: (e) => (<DisplayDiffTime startTime={e?.estimatedExpireTimeStart} endTime={e?.estimatedExpireTimeEnd}/>)\n    },\n    'productPlan.packing.sampleImage': {\n      title: 'Hình ảnh sản phẩm',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.packing.packingImage': {\n      title: 'Hình ảnh sau khi đóng gói',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'scanAt': {\n      title: 'Ngày gán QR',\n      formatter: (input) => (<DisplayDateTime input={input}/>),\n    },\n    'scanBy.fullName': {\n      title: 'Người gán QR',\n    },\n    'activeBy.fullName': {\n      title: 'QR_ACTIVATE_BY',\n    },\n    'activeAt': {\n      title: 'QR_ACTIVATE_AT',\n      formatter: (input) => (<DisplayDateTime input={input}/>),\n    },\n    'productPlan.planting.manager.fullName': {\n      title: 'ADMIN_DIRECTOR_INFO',\n    },\n    'productPlan.packing.[leader].user.fullName': {\n      title: 'PACKING_LEADER',\n      formatter: (input) => DisplayArray(input),\n    },\n  }\n}];\n\nexport const preservationInfo: RenderInfoDetail = [{\n  header: 'PRESERVATION_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'productPlan.preservation.time': {\n      keyField: 'productPlan.preservation', title: 'PRESERVATION_TIME',\n      formatter: (e) => (\n        <DisplayDiffTime startTime={e?.startTime} endTime={e?.endTime}/>)\n    },\n    'productPlan.preservation.address': {\n      keyField: 'productPlan.preservation.storageImage', title: 'PRESERVATION_LOCATION',\n      formatter: (e) => {\n        const master = e?.filter((item: any) => item.isMaster === true)\n        return <>{master && master[0]?.location && DisplayCoordinates(master[0]?.location?.coordinates)}</>\n      }\n    },\n    'productPlan.preservation.temperature': {\n      title: 'Nhiệt độ bảo quản',\n      formatter: DisplayCelcius\n    },\n    'productPlan.preservation.storageImage': {\n      title: 'Hình ảnh bảo quản',\n      formatter: (image, entity) => {\n        const renderInfo = {\n          title: 'IMAGE_INFO',\n          component: Display3Info\n        }\n        return DisplayImage(image, renderInfo, ['isMaster', true])\n      }\n    },\n    'productPlan.preservation.[technical].user.fullName': {\n      title: 'Kĩ thuật',\n      formatter: (input) => DisplayArray(input),\n    },\n    'productPlan.preservation.[worker].user.fullName': {\n      title: 'Nhân viên',\n      formatter: (input) => DisplayArray(input),\n    },\n  }\n}];\n\n\nexport const sellStatus: RenderInfoDetail = [{\n  header: 'STATUS_INFO',\n  className: 'col-12',\n  titleClassName: 'col-3 mb-10',\n  dataClassName: 'col-9 mb-10 pl-5',\n  data: {\n    'retailInfo.isSold': { title: 'Trạng thái', formatter: input => <>{input ? 'Đã bán' : 'Chưa bán'}</> },\n      'retailInfo.soldDate': {\n        title: 'Ngày bán',\n        formatter: input => <DisplayDateTime input={input} />,\n      },\n      'retailInfo.soldAt': { title: 'Nơi bán', formatter: input => <>{input?.agency?.name}</> },\n      'retailInfo.soldBy': { title: 'Nhân viên nơi bán', formatter: input => <>{input?.user?.name}</> },\n      'retailInfo.buyer': { title: 'Số điện thoại người mua', formatter: input => <>{input?.customer?.username}</> },\n      '_id': { title: 'ID QR' },\n  }\n}];\n\n\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport { Card, CardBody, CardHeader } from '../../common-library/card';\nimport { MasterTable } from '../../common-library/common-components/master-table';\nimport { DefaultPagination } from '../../common-library/common-consts/const';\nimport { useIntl } from 'react-intl';\nimport AddIcon from '@material-ui/icons/Add';\nimport { iconStyle } from '../../common-library/common-consts/const';\nconst { TabPane } = Tabs;\n\nfunction UserBody({\n  tabData,\n  setCurrentTab,\n  currentTab,\n  setEntities,\n  setPaginationProps,\n  trigger,\n  setTrigger,\n  title,\n}: {\n  tabData: any[];\n  setCurrentTab: (tab: string | undefined) => void;\n  currentTab: string | undefined;\n  setEntities: (el: any) => void;\n  setPaginationProps: (el: any) => void;\n  trigger: boolean;\n  setTrigger: (entity: boolean) => void;\n  title?: string;\n}) {\n  const intl = useIntl();\n\n  function callback(key: string | undefined) {\n    if (key === currentTab) {\n      setTrigger(!trigger);\n    } else {\n      setCurrentTab(key);\n    }\n    setEntities([]);\n    setPaginationProps(DefaultPagination);\n  }\n  console.log(tabData);\n\n  return (\n    <Card>\n      {title && <CardHeader title={intl.formatMessage({ id: title }).toUpperCase()} />}\n      <CardBody>\n        <Tabs defaultActiveKey={currentTab} onChange={callback} tabBarStyle={{ color: '#27AE60' }}>\n          {tabData.map((item: any, key: number) => (\n            <TabPane tab={item.tabTitle} key={'' + key}>\n              {item.button?.length > 0 ? (\n                <div className=\"row no-gutters mb-10\">\n                  {item.button.map((btn: any, key: number) => (\n                    <button\n                      type=\"button\"\n                      key={key}\n                      className=\"btn btn-primary fixed-btn-width mr-8\"\n                      onClick={btn.onClick}>\n                      <AddIcon style={iconStyle} />\n                      {intl.formatMessage({ id: btn.label })}\n                    </button>\n                  ))}\n                </div>\n              ) : (\n                <></>\n              )}\n              <MasterTable\n                entities={item.entities}\n                columns={item.columns}\n                total={item.total}\n                loading={item.loading}\n                paginationParams={item.paginationParams}\n                setPaginationParams={item.setPaginationParams}\n              />\n            </TabPane>\n          ))}\n        </Tabs>\n        {/* <MasterTreeStructure /> */}\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default UserBody;\n","import React, {Fragment, useCallback, useEffect, useMemo, useState} from \"react\";\nimport {useIntl} from 'react-intl';\nimport {Link, Route, Switch} from 'react-router-dom';\nimport * as UserService from '../user/user.service';\nimport {InitMasterProps} from \"../../common-library/helpers/common-function\";\nimport {Count, Create, Delete, DeleteMany, Get, GetAll, GetType, QrTypeList, Update, QrTypeStatus} from './qr.service';\nimport {QrModel} from './qr.model';\nimport {MasterHeader} from \"../../common-library/common-components/master-header\";\nimport {MasterBody} from \"../../common-library/common-components/master-body\";\n\nimport {DefaultPagination, NormalColumn, SortColumn} from '../../common-library/common-consts/const';\nimport {\n  MasterBodyColumns,\n  ModifyForm,\n  RenderInfoDetail,\n  SearchModel\n} from \"../../common-library/common-types/common-type\";\nimport {MasterEntityDetailPage} from \"../../common-library/common-components/master-detail-page\";\nimport {\n  cleaningInfo,\n  commonInfo,\n  harvestingInfo,\n  packingInfo,\n  paddingInfo,\n  plantingInfo,\n  preliminaryTreatmentInfo,\n  preservationInfo,\n  producerInfo,\n  seedingInfo,\n  sellStatus,\n} from \"./qr.render-info\";\nimport ModifyEntityDialog from \"../../common-library/common-components/modify-entity-dialog\";\nimport {\n  Display3Info,\n  DisplayArray,\n  DisplayDate,\n  DisplayDateTime,\n  DisplayInnerLink,\n  DisplayPersonName,\n  DisplayTable\n} from \"../../common-library/helpers/detail-helpers\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport {AxiosResponse} from 'axios';\nimport {ActionsColumnFormatter} from \"../../common-library/common-components/actions-column-formatter\";\nimport {MasterEntityDetailDialog} from \"../../common-library/common-components/master-entity-detail-dialog\";\nimport * as Yup from \"yup\";\nimport {format} from \"date-fns\";\nimport {DetailImage} from \"../../common-library/common-components/detail/detail-image\";\nimport EntityCrudPage from \"../../common-library/common-components/entity-crud-page\";\nimport UserBody from \"../user/user-body\";\nimport '../user/style.scss'\n\nconst headerTitle = 'QR.MASTER.HEADER.TITLE';\nconst detailBodyTitle = 'QR.DETAIL.TITLE';\nconst detailHeaderTitle = 'QR.HEADER.DETAIL.TITLE';\nconst moduleName = 'QR.MODULE_NAME';\nconst createTitle = 'QR.CREATE.HEADER';\n\n// const createTitle = 'PURCHASE_ORDER.CREATE.TITLE';\n// const updateTitle = 'PURCHASE_ORDER.UPDATE.TITLE';\nconst bodyTitle = 'QR.MASTER.BODY.TITLE';\n\nconst QR_PRODUCT_TYPE = {\n  root: 1,\n  landlot: 2\n}\n\nconst TAB_QR = {\n  product: '0',\n  packaging: '1'\n}\n\n\nfunction QrPage() {\n  // const history = useHistory();\n  const intl = useIntl();\n  const {\n    entities,\n    setEntities,\n    showCreate,\n    setShowCreate,\n    paginationProps,\n    setPaginationProps,\n    filterProps,\n    setFilterProps,\n    total,\n    loading,\n    setShowDetail,\n    setDetailEntity,\n    setDeleteEntity,\n    setShowDelete,\n    add, get, getAll, refreshData,\n  } = InitMasterProps<QrModel>({\n    getServer: Get,\n    countServer: Count,\n    createServer: Create,\n    deleteServer: Delete,\n    deleteManyServer: DeleteMany,\n    getAllServer: GetAll,\n    updateServer: Update\n  });\n\n  const [showImage, setShowImage] = useState<boolean>(false);\n  const [logisticImageDetail, setLogisticImage] = useState<any>(null);\n  const [currentTab, setCurrentTab] = useState<string | undefined>(TAB_QR.product);\n  const [trigger, setTrigger] = useState<boolean>(false);\n  const [QrProductType, setQrProductType] = useState(QR_PRODUCT_TYPE.root)\n  const [searchForm, setSearchForm] = useState<SearchModel>()\n  \n  useEffect(() => {\n    getAll(filterProps);\n  }, [paginationProps, filterProps, trigger, currentTab]);\n  \n  \n  useEffect(() => {\n    setSearchForm(rootSearchModel)\n  }, [])\n  \n  const columns = useMemo(() => {\n    return {\n      order: {\n        dataField: 'order',\n        text: 'STT',\n        formatter: (cell: any, row: any, rowIndex: number) => (\n          <p>{rowIndex + 1 + ((paginationProps.page ?? 0) - 1) * (paginationProps.limit ?? 0)}</p>\n        ),\n        classes: 'mr-3',\n        style: { paddingTop: 20 },\n      },\n      landlot: {\n        dataField: 'landlot',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.LANDLOT'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      'createdBy': {\n        dataField: 'createdBy.fullName',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_BY'})}`,\n        ...SortColumn,\n        align: 'center',\n        formatter: (cell: any, row: any) => (row?.createdBy ?\n          <DisplayPersonName {...row.createdBy}/> : (<>{intl.formatMessage({id: 'NO_INFORMATION'})}</>)),\n      },\n      createdAt: {\n        dataField: 'createdAt',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_DATE'})}`,\n        ...SortColumn,\n        formatter: (input: any) => (<DisplayDate input={input}/>),\n        align: 'center',\n      },\n      status: {\n        dataField: 'status',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.STATUS'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      distributionTime: {\n        dataField: 'distributionTime',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.DISTRIBUTION_TIME'})}`,\n        ...SortColumn,\n        formatter: (input: any) => (<DisplayDateTime input={input}/>),\n        align: 'center',\n      },\n      expiry: {\n        dataField: 'expiry',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.EXPIRY'})}`,\n        ...SortColumn,\n        formatter: (input: any) => (<DisplayDateTime input={input}/>),\n        align: 'center',\n      },\n      distributionLocation: {\n        dataField: 'distributionLocation',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.DISTRIBUTION_LOCATION'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      action: {\n        dataField: 'action',\n        text: `${intl.formatMessage({id: 'SHIPPING_AGENCY.MASTER.TABLE.ACTION_COLUMN'})}`,\n        formatter: ActionsColumnFormatter,\n        formatExtraData: {\n          intl,\n          onShowDetail: (entity: QrModel) => {\n            get(entity);\n            setDetailEntity(entity);\n            setQrProductType(QR_PRODUCT_TYPE.landlot)\n            setPaginationProps(DefaultPagination)\n          },\n          onEdit: (entity: QrModel) => {\n          },\n        },\n        ...NormalColumn,\n        style: {minWidth: '130px'},\n      },\n    }\n  }, []);\n\n  const landLotColumn = useMemo(() => ({\n    \n      order: {\n        dataField: 'order',\n        text: 'STT',\n        formatter: (cell: any, row: any, rowIndex: number) => (\n          <p>{rowIndex + 1 + ((paginationProps.page ?? 0) - 1) * (paginationProps.limit ?? 0)}</p>\n        ),\n        classes: 'mr-3',\n        style: { paddingTop: 20 },\n      },\n      _id: {\n        dataField: '_id',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CODE'})}`,\n        ...SortColumn,\n        align: 'center',\n        formatter: (cell: string, row: any) => {\n          console.log(row.type === '1');\n          return <Link to={'qr/' + (row.codeType === '1' ? '' : '') + row._id}>{cell}</Link>\n        },\n      },\n      'createdBy': {\n        dataField: 'createdBy.fullName',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_BY'})}`,\n        ...SortColumn,\n        align: 'center',\n        formatter: (cell: any, row: any) => (row?.createdBy ?\n          <DisplayPersonName {...row.createdBy}/> : (<>{intl.formatMessage({id: 'NO_INFORMATION'})}</>)),\n      },\n      createdAt: {\n        dataField: 'createdAt',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_DATE'})}`,\n        ...SortColumn,\n        formatter: (input: any) => (<DisplayDate input={input}/>),\n        align: 'center',\n      },\n      'activeBy': {\n        dataField: 'activeBy.fullName',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.ACTIVE_BY'})}`,\n        ...SortColumn,\n        align: 'center',\n        formatter: (cell: any, row: any) => (row?.activeBy ?\n          <DisplayPersonName {...row.activeBy}/> : (<>{intl.formatMessage({id: 'NO_INFORMATION'})}</>)),\n      },\n      activeAt: {\n        dataField: 'activeAt',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.ACTIVE_AT'})}`,\n        ...SortColumn,\n        formatter: (input: any) => (<DisplayDateTime input={input}/>),\n        align: 'center',\n      },\n      type: {\n        dataField: 'type',\n        text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CODE_TYPE'})}`,\n        ...SortColumn,\n        formatter: (cell: any) =>\n          (<>{QrTypeList.find(t => t.code === cell)?.name}</>),\n        align: 'center',\n      },\n      action: {\n        dataField: 'action',\n        text: `${intl.formatMessage({id: 'SHIPPING_AGENCY.MASTER.TABLE.ACTION_COLUMN'})}`,\n        formatter: ActionsColumnFormatter,\n        formatExtraData: {\n          intl,\n          onShowDetail: (entity: QrModel) => {\n            get(entity);\n            setShowDetail(true);\n            setDetailEntity(entity);\n          },\n        },\n        ...NormalColumn,\n        style: {minWidth: '130px'},\n      },\n    \n  }), [])\n\n  const rootSearchModel: SearchModel = {\n    landlot: {\n      type: 'string',\n      label: 'QR.MASTER.TABLE.LANDLOT',\n    },\n    createdBy: {\n      type: 'search-select',\n      label: 'QR.MASTER.TABLE.CREATED_BY',\n      selectField: '_id',\n      keyField: 'fullName',\n      onSearch: UserService.GetAll,\n    },\n    __type: {\n      type: 'search-select',\n      label: 'QR.MASTER.TABLE.STATUS',\n      onSearch: ({queryProps, paginationProps}) => GetType(QrTypeStatus, {queryProps, paginationProps}),\n      keyField: 'name',\n      selectField: 'code',\n      onChange: (e, {setFieldValue}) => {\n        setFieldValue('type', e?.code);\n      }\n    },\n    createdAt: {\n      type: 'date-time',\n      label: 'QR.MASTER.TABLE.CREATED_DATE',\n    },\n    distributionTime: {\n      type: 'date-time',\n      label: 'QR.MASTER.TABLE.DISTRIBUTION_TIME',\n    },\n    distributionLocation: {\n      type: 'date-time',\n      label: 'QR.MASTER.TABLE.DISTRIBUTION_LOCATION',\n    },\n  }\n  \n  \n  const searchModel: SearchModel = {\n    '_id': {\n      type: 'string',\n      label: 'QR.MASTER.SEARCH.CODE',\n    },\n    createdBy: {\n      type: 'search-select',\n      label: 'QR.MASTER.SEARCH.CREATED_BY',\n      selectField: '_id',\n      keyField: 'fullName',\n      onSearch: UserService.GetAll,\n    },\n    createdAt: {\n      type: 'date-time',\n      label: 'QR.MASTER.SEARCH.CREATED_DATE',\n    },\n    activeBy: {\n      type: 'search-select',\n      label: 'QR.MASTER.SEARCH.ACTIVE_BY',\n      selectField: '_id',\n      keyField: 'fullName',\n      onSearch: UserService.GetAll,\n    },\n    activeAt: {\n      type: 'date-time',\n      label: 'QR.MASTER.SEARCH.ACTIVE_AT',\n    },\n    __type: {\n      type: 'search-select',\n      label: 'QR.MASTER.SEARCH.CODE_TYPE',\n      onSearch: ({queryProps, paginationProps}) => GetType(QrTypeList, {queryProps, paginationProps}),\n      keyField: 'name',\n      selectField: 'code',\n      onChange: (e, {setFieldValue}) => {\n        setFieldValue('type', e?.code);\n      }\n    },\n  };\n\n  const packagingSearchModel: SearchModel = {\n    '_id': {\n      type: 'string',\n      label: 'QR.MASTER.SEARCH.CODE',\n    },\n    createdBy: {\n      type: 'search-select',\n      label: 'QR.MASTER.SEARCH.CREATED_BY',\n      selectField: '_id',\n      keyField: 'fullName',\n      onSearch: UserService.GetAll,\n    },\n    createdAt: {\n      type: 'date-time',\n      label: 'QR.MASTER.SEARCH.CREATED_DATE',\n    },\n  }\n  \n  const shippingInfoColumns: MasterBodyColumns = [\n    {\n      dataField: 'exportTime',\n      text: 'Thời gian xuất hàng',\n      formatter: (input: any) => (<DisplayDateTime input={input}/>),\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      text: 'Địa điểm xuất hàng',\n      dataField: 'exportAddress',\n      formatter: (input) => {\n        return DisplayArray(input)\n      },\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      text: 'Nhân viên xuất hàng',\n      dataField: 'exportStaff.fullName',\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      text: 'Nhân viên vận chuyển',\n      dataField: 'shipper.fullName',\n      ...SortColumn,\n      align: 'center',\n    },\n  ];\n  \n  \n  const shippingInfo = useMemo((): RenderInfoDetail => ([{\n    header: 'THÔNG TIN VẬN CHUYỂN',\n    className: 'col-12',\n    titleClassName: 'col-3 mb-10',\n    dataClassName: 'col-12 mb-10',\n    data: {\n      'sellStatus': {\n        title: '',\n        formatter: () => {\n          return <DisplayTable entities={[]} columns={shippingInfoColumns}/>\n        }\n      }\n    },\n  }]), []);\n  \n  \n  const distributionInfoColumns: MasterBodyColumns = [\n    ...shippingInfoColumns,\n    {\n      dataField: 'receiveTime',\n      text: 'Thời gian nhận hàng',\n      formatter: (input: any) => (<DisplayDateTime input={input}/>),\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      text: 'Địa điểm nhận hàng',\n      dataField: 'receiveAddress',\n      formatter: (input) => {\n        return DisplayArray(input)\n      },\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      dataField: 'receiveStaff.fullName',\n      text: 'Nhân viên xuất hàng',\n      ...SortColumn,\n      align: 'center',\n    },\n    {\n      dataField: 'image.path',\n      text: 'Hình ảnh',\n      formatter: (cell: any, row: any, rowIndex: number) => {\n        return (\n          <>\n            {ActionsColumnFormatter(cell, row, rowIndex, {\n              onShowDetail: () => {\n                setShowImage(true);\n                setLogisticImage(row);\n              },\n              intl\n            })}\n          </>\n        )\n      },\n      ...SortColumn,\n      align: 'center',\n    },\n  ];\n  const logisticImageRenderDetail = useMemo((): RenderInfoDetail => ([\n    {\n      className: 'col-12',\n      titleClassName: 'col-12',\n      dataClassName: 'col-12 mb-10',\n      data: {\n        'imageBefore': {\n          title: 'Hình ảnh xuất kho',\n          formatter: (image) => {\n            const renderInfo = {\n              title: 'IMAGE_INFO',\n              component: Display3Info\n            }\n            return <DetailImage images={image} renderInfo={renderInfo} width={90} height={90} className={'mt-3 mr-3'}/>\n          }\n        },\n        'imageAfter': {\n          title: 'Hình ảnh nhập kho',\n          formatter: (image) => {\n            const renderInfo = {\n              title: 'IMAGE_INFO',\n              component: Display3Info\n            }\n            return <DetailImage images={image} renderInfo={renderInfo} width={90} height={90} className={'mt-3 mr-3'}/>\n          }\n        },\n      }\n    }\n  ]), []);\n  const validationSchema = useMemo(() => Yup.object().shape({\n    total: Yup.number()\n      .min(1, 'VALIDATE.ERROR.MIN_1'),\n  }), []);\n  \n  const distributionInfo = useMemo((): RenderInfoDetail => ([{\n    header: 'THÔNG TIN PHÂN PHỐI',\n    className: 'col-12',\n    titleClassName: 'col-3 mb-10',\n    dataClassName: 'col-12 mb-10',\n    data: {\n      'sellStatus': {\n        title: '',\n        formatter: () => {\n          return <DisplayTable entities={[]}\n                               columns={distributionInfoColumns}/>\n        }\n      }\n    },\n  }]), []);\n  const downloadQrFile = useCallback((e: QrModel) => {\n    return add(e).then((res: AxiosResponse<QrModel>) => {\n      const date_input = new Date();\n      const a = document.createElement(\"a\"); //Create <a>\n      a.href = \"data:application/octet-stream;base64,\" + res.data.buffers; //Image Base64 Goes here\n      a.download = `qr-code-${format(date_input, 'dd-MM-yyyy-H_mma')}.tiff`; //File name Here\n      a.click();\n    })\n  }, []);\n  \n  \n  const parentQrInfo: RenderInfoDetail = useMemo(() => ([\n    {\n      header: 'THÔNG TIN LOGISTIC',\n      className: 'col-12 mb-5',\n      titleClassName: 'col-3 mb-3',\n      dataClassName: 'col-9 mb-3 pl-5',\n      data: {\n        'scanAt': {\n          title: 'Ngày gán QR',\n          formatter: (input: any) => (<DisplayDateTime input={input}/>),\n        },\n        'scanBy.fullName': {\n          title: 'Người gán QR',\n        },\n      },\n    }\n  ]), []);\n  \n  const childQrColumns = useMemo(() => [{\n    dataField: '_',\n    text: `${intl.formatMessage({id: 'ORDINAL'})}`,\n    align: 'center',\n    formatter: (cell: string, row: any, rowIndex: number) => {\n      return (<>{rowIndex + 1}</>)\n    }\n  }, {\n    dataField: '_id',\n    text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CODE'})}`,\n    align: 'center',\n    ...NormalColumn,\n    formatter: (e: any) => <DisplayInnerLink link={`/qr/${e}`} title={e}/>\n  }, {\n    dataField: 'createdBy',\n    text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_BY'})}`,\n    ...SortColumn,\n    align: 'center',\n    formatter: (cell: any, row: any) => (row?.createdBy ?\n      <DisplayPersonName {...cell}/> : (<>{intl.formatMessage({id: 'NO_INFORMATION'})}</>)),\n  }, {\n    dataField: 'createdAt',\n    text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.CREATED_DATE'})}`,\n    ...SortColumn,\n    formatter: (input: any) => (<DisplayDate input={input}/>),\n    align: 'center',\n  }, {\n    dataField: 'activeBy',\n    text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.ACTIVE_BY'})}`,\n    ...SortColumn,\n    align: 'center',\n    formatter: (cell: any, row: any) => (row?.activeBy ?\n      <DisplayPersonName {...cell}/> : (<>{intl.formatMessage({id: 'NO_INFORMATION'})}</>)),\n  }, {\n    dataField: 'activeAt',\n    text: `${intl.formatMessage({id: 'QR.MASTER.TABLE.ACTIVE_AT'})}`,\n    ...SortColumn,\n    formatter: (input: any) => (<DisplayDateTime input={input}/>),\n    align: 'center',\n  },], []);\n  const childQrInfo: RenderInfoDetail = useMemo(() => ([\n    {\n      header: 'Thông tin QR con',\n      className: 'col-12',\n      titleClassName: 'mb-10',\n      dataClassName: 'col-12 mb-10',\n      data: {\n        'children': {\n          formatter: (entity: any[]) => {\n            return <DisplayTable entities={entity ?? []} columns={childQrColumns}/>\n          }\n        }\n      },\n    }\n  ]), []);\n  \n  const [dE, setDE] = useState<any>(null);\n  \n  // const headerInfo: RenderInfoDetail = useMemo(() => [\n  //   {\n  //     header: detailBodyTitle,\n  //     className: 'col-12',\n  //     titleClassName: 'mb-10',\n  //     dataClassName: 'col-3 mb-10',\n  //     data: {\n  //       '_id': {\n  //         formatter: (entity) => {\n  //           return (<Formik\n  //             enableReinitialize={true}\n  //             initialValues={{}} onSubmit={() => {\n  //           }}>\n  //             <ModifyEntityPage\n  //               mode={'vertical'}\n  //               inputGroups={panel}/>\n  //           </Formik>)\n  //         }\n  //       }\n  //     },\n  //   }\n  // ], [dE]);\n  const renderInfoProduct: RenderInfoDetail = useMemo(() => ([\n    ...producerInfo,\n    ...paddingInfo,\n    ...commonInfo,\n    ...paddingInfo,\n    ...seedingInfo,\n    ...paddingInfo,\n    ...plantingInfo,\n    ...paddingInfo,\n    ...harvestingInfo,\n    ...paddingInfo,\n    ...preliminaryTreatmentInfo,\n    ...paddingInfo,\n    ...cleaningInfo,\n    ...paddingInfo,\n    ...packingInfo,\n    ...paddingInfo,\n    ...preservationInfo,\n    ...paddingInfo,\n    ...shippingInfo,\n    ...paddingInfo,\n    ...distributionInfo,\n    ...paddingInfo,\n    ...sellStatus\n  ]), []);\n  const renderInfoPacking: RenderInfoDetail = useMemo(() => ([\n    ...parentQrInfo,\n    ...paddingInfo,\n    ...childQrInfo,\n    ...paddingInfo,\n    ...distributionInfo,\n    ...paddingInfo,\n    ...shippingInfo,\n  ]), []);\n  const [matchId, setMatchId] = useState<any>(null);\n  const [renderInfo, setRenderInfo] = useState(renderInfoProduct);\n  \n  const createForm = useMemo((): ModifyForm => ({\n    _header: createTitle,\n    _panel1: {\n      _title: 'EMPTY',\n      group1: {\n        _subTitle: 'EMPTY',\n        type: {\n          required: true,\n          _type: 'search-select',\n          onSearch: ({queryProps, paginationProps}: any) => GetType(QrTypeList, {queryProps, paginationProps}),\n          keyField: 'name',\n          selectField: 'code',\n          label: 'QR.EDIT.CODE_TYPE',\n        },\n        total: {\n          required: true,\n          _type: 'string-number',\n          onChange: (e, {setFieldValue}) => {\n            setFieldValue('total', e.target.value && e.target.value !== '' && Number(e.target.value));\n          },\n          label: 'QR.EDIT.QUANTITY',\n        },\n      }\n    }\n  }), []);\n  const detailForm = useMemo((): ModifyForm => ({\n    _header: detailHeaderTitle,\n    _panel1: {\n      _title: 'EMPTY',\n      group1: {\n        _subTitle: 'EMPTY',\n        _className: 'col-12 form-group row master-header-search-margin',\n        _inputClassName: 'col-xxl-2 col-md-3 master-header-search-input-margin',\n        _id: {\n          _type: 'string',\n          disabled: true,\n          label: 'Mã QR',\n        }, createdBy: {\n          _type: 'object',\n          fullName: {\n            _type: 'string',\n            disabled: true,\n            label: 'Người tạo mã',\n          },\n        }, createdAt: {\n          _type: 'date-time',\n          disabled: true,\n          label: 'Ngày tạo mã',\n        }, type: {\n          _type: 'string',\n          disabled: true,\n          formatter: (e) => (e ? QrTypeList.find((val) =>\n            val.code.toLowerCase().indexOf(e.toLowerCase()) > -1\n          )?.name : ''),\n          label: 'Loại mã',\n        },\n      }\n    }\n  }), []);\n  \n  useEffect(() => {\n    matchId && get({_id: matchId} as any).then(e => {\n      const qr = e.data;\n      setRenderInfo(qr.type === '1' ? renderInfoProduct : renderInfoPacking);\n      setDE(qr);\n    });\n  }, [matchId]);\n\n  const TabData = useMemo(() =>  ([\n    {\n      tabTitle: 'QR Sản phẩm',\n      entities: entities,\n      columns: QrProductType === QR_PRODUCT_TYPE.root ? columns : landLotColumn,\n      total: total,\n      loading: loading,\n      paginationParams: paginationProps,\n      setPaginationParams: setPaginationProps,\n      button: QrProductType === QR_PRODUCT_TYPE.root ? [\n        {\n          label: 'Thêm mới',\n          onClick: () => {\n            setShowCreate(true);\n          }\n        }\n      ] : []\n    },\n    {\n      tabTitle: 'QR Đóng gói',\n      entities: entities,\n      columns: columns,\n      total: total,\n      loading: loading,\n      paginationParams: paginationProps,\n      setPaginationParams: setPaginationProps,\n      button: [\n        {\n          label: 'Thêm mới',\n          onClick: () => {\n            setShowCreate(true);\n          }\n        }\n      ]\n    },\n  ]), [QrProductType, columns, entities, landLotColumn, loading, paginationProps, setPaginationProps, setShowCreate, total]);\n  \n  return (\n    <Fragment>\n      <Switch>\n      <Route exact path=\"/qr/:code\">\n          {({match}) => {\n            setMatchId(match?.params.code);\n            return (\n              <>\n                <EntityCrudPage\n                  onModify={(() => {\n                  }) as any}\n                  moduleName={moduleName}\n                  formModel={detailForm}\n                  mode={'vertical'}\n                  entity={dE}\n                />\n                <MasterEntityDetailPage\n                  entity={dE}\n                  header={detailBodyTitle}\n                  renderInfo={renderInfo}\n                />\n                <MasterEntityDetailDialog\n                  title='EMPTY'\n                  show={showImage}\n                  entity={logisticImageDetail}\n                  renderInfo={logisticImageRenderDetail}\n                  onHide={() => {\n                    setShowImage(false)\n                  }\n                  }\n                  size='sm'\n                />\n              </>\n            );\n          }}\n        </Route>\n        <Route path=\"/qr\" exact={true}>\n          <MasterHeader\n            title={headerTitle}\n            onSearch={(value) => {\n              setPaginationProps(DefaultPagination)\n              setFilterProps(value)\n            }}\n            onClickBack={currentTab === TAB_QR.product && QrProductType === QR_PRODUCT_TYPE.landlot ? () => setQrProductType(QR_PRODUCT_TYPE.root) : undefined}\n            searchModel={currentTab === TAB_QR.packaging ? packagingSearchModel : QrProductType === QR_PRODUCT_TYPE.root ? rootSearchModel : searchModel}\n          />\n          <div className=\"user-body\">\n            <UserBody\n              tabData={TabData}\n              currentTab={currentTab}\n              setCurrentTab={setCurrentTab}\n              setEntities={setEntities}\n              setPaginationProps={setPaginationProps}\n              setTrigger={setTrigger}\n              trigger={trigger}\n              title=\"Danh mục vai trò\"\n            />\n          </div>\n          {/* <MasterBody\n            title={bodyTitle}\n            onCreate={() => {\n              // history.push(`${window.location.pathname}/0000000`);\n              setShowCreate(true);\n            }}\n            // entities={bodyEntities}\n            entities={entities}\n            total={total}\n            columns={columns}\n            loading={loading}\n            paginationParams={paginationProps}\n            setPaginationParams={setPaginationProps}\n          /> */}\n          <ModifyEntityDialog\n            show={showCreate}\n            validation={validationSchema}\n            formModel={createForm}\n            loading={loading}\n            onHide={refreshData}\n            onModify={downloadQrFile}\n          />\n        </Route>\n        \n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default QrPage;\n"],"sourceRoot":""}