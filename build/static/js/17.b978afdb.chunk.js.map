{"version":3,"sources":["app/common-library/common-components/master-header.tsx","app/common-library/forms/input-custom.tsx","app/common-library/common-components/modify-entity-page.tsx","app/common-library/common-components/master-entity-detail-dialog.tsx","app/common-library/common-components/master-body.tsx","app/common-library/common-components/actions-column-formatter.tsx","app/common-library/common-components/delete-entity-dialog.tsx","app/common-library/common-components/delete-many-entities-dialog.tsx","app/common-library/common-components/modify-entity-dialog-form.tsx","app/common-library/common-components/modify-entity-dialog.tsx","app/pages/post/post-comments.tsx","app/common-library/common-components/entity-crud-page.tsx","app/pages/purchase-order/purchase-order.service.tsx","app/common-library/forms/gallery-image.tsx","app/pages/purchase-order/agency.service.tsx","app/pages/purchase-order/purchase-order.tsx"],"names":["MasterHeader","title","onSearch","searchModel","initValue","onClickBack","value","intl","useIntl","defaultClassName","className","onClick","formatMessage","id","toUpperCase","initialValues","onSubmit","values","onReset","data","handleSubmit","resetForm","handleBlur","handleChange","setFieldValue","Object","keys","map","key","type","name","undefined","t","style","iconStyle","handleResetForm","src","ToAbsoluteUrl","InputCustom","component","props","Component","formik","useFormikContext","ModifyEntityPage","inputGroups","mode","pl","_subTitle","inputGroup","index","_","isString","Error","JSON","stringify","_className","_inputClassName","inputs","prevKey","inputClassName","RenderForm","input","trimKey","trim","_type","innt","MasterEntityDetailDialog","moduleName","show","entity","onHide","renderInfo","size","aria-labelledby","dialogClassName","Header","closeButton","Title","MasterEntityDetail","Footer","Body","header","dataKey","titleClassName","dataClassName","displayInfo","fieldName","keyField","displayData","indexOf","getFieldV3","formatter","isNumber","MasterBody","entities","total","loading","paginationParams","setPaginationParams","onSelectMany","onCreate","selectedEntities","columns","onDeleteMany","isShowId","hideHeaderButton","additionalActionComponent","AdditionalActionComponent","idColumn","useMemo","dataField","text","cell","row","rowIndex","page","limit","headerClasses","align","masterColumn","isArray","_id","ActionsColumnFormatter","cellContent","onShowDetail","onDelete","onEdit","onLock","onClone","onChangeRole","onGoHistory","e","preventDefault","TickColumnFormatter","color","DeleteEntityDialog","isShow","bodyTitle","confirmMessage","deleteBtn","deletingMessage","cancelBtn","error","_innerError","parse","CapitalizeFirstLetter","additional","message","DeleteManyEntitiesDialog","noSelectedEntityMessage","length","ModifyEntityDialogForm","onModify","modifyPanel","validation","_title","initValues","InitValues","_header","panel1","useState","entityForEdit","setEntityForEdit","useEffect","enableReinitialize","validationSchema","setSubmitting","__v","then","catch","err","Modal","Fragment","Spinner","animation","variant","ModifyEntityDialog","formModel","panels","panel","PostComments","onComments","valueRef","React","useRef","comments","commentsArr","setCommentArr","fontSize","createdBy","fullName","content","TextareaAutosize","rowsMin","aria-label","ref","placeholder","current","comment","res","handleComment","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","EntityCrudPage","code","get","actions","setEditEntity","homePageUrl","allFormButton","showComment","history","useHistory","modifyPanels","console","log","validateForm","push","GetHomePage","window","location","pathname","val","goBack","keyss","role","icon","label","to","linkto","confirmationStatus","isMaster","API_URL","API_BASE_URL","Create","axios","post","GetAll","queryProps","sortList","paginationProps","params","Count","Get","Update","put","Delete","delete","DeleteMany","arrayEntities","photos","photo","caption","subcaption","thumbnail","GalleryImage","isOpen","setIsOpen","onClose","PurchaseOrderSchema","Yup","shape","phoneNumber","required","matches","agency","name2","taxId","taxName","taxNumber","PurchaseOrder","InitMasterProps","getServer","countServer","createServer","deleteServer","deleteManyServer","getAllServer","updateServer","deleteEntity","setEntities","setDeleteEntity","editEntity","createEntity","setCreateEntity","setSelectedEntities","detailEntity","showDelete","setDetailEntity","setShowDelete","showEdit","setShowEdit","showDetail","showCreate","setShowCreate","setShowDetail","showDeleteMany","setShowDeleteMany","setPaginationProps","filterProps","setFilterProps","setTotal","add","setLoading","setError","update","deleteMany","deleteFn","getAll","refreshData","SortColumn","agencyAddress","status","StatusValue","action","formatExtraData","NormalColumn","minWidth","purchaseOrderSearchModel","date","AgencyService","count","tree","tree2","modifyModel","image","staff","modifyModel_3","time","time2","quantity","imageDetail","formPart","form_1","form_3","allFormField","GenerateAllFormField","save","cancel","test","from","path","DefaultPagination"],"mappings":"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","file":"static/js/17.b978afdb.chunk.js","sourcesContent":["import React from 'react';\nimport {useIntl} from 'react-intl';\nimport {Formik} from 'formik';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {Card, CardBody, CardHeader} from '../card';\nimport SVG from 'react-inlinesvg';\nimport {ToAbsoluteUrl} from '../helpers/assets-helpers';\nimport {SearchModel} from '../common-types/common-type';\n// import InfiniteScroll from 'react-infinite-scroll-component';\nimport {iconStyle} from '../common-consts/const';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nimport './master-header.css';\nimport {\n  InputDateTime,\n  InputNumber,\n  InputSearchSelect,\n  InputString,\n  InputStringNumber,\n  InputTreeSelect\n} from \"./common-input\";\n\nexport function MasterHeader<T>({\n                                  title,\n                                  onSearch,\n                                  searchModel,\n                                  initValue = {},\n                                  value,\n                                  onClickBack\n                                }: {\n  searchModel: SearchModel;\n  title: string;\n  initValue?: any;\n  value?: any;\n  onSearch?: (data: any) => void;\n  onClickBack?: () => void;\n}) {\n  const intl = useIntl();\n  const defaultClassName = \"col-xxl-2 col-md-3 master-header-search-input-margin\";\n  const handleResetForm = (resetForm: any) => {\n    resetForm();\n  };\n  return (\n    <Card className={'master-header-card'}>\n      <CardHeader title={onClickBack ? <span\n                            onClick={onClickBack}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {intl.formatMessage({id: title}).toUpperCase()}\n                          </span> : intl.formatMessage({id: title}).toUpperCase()}/>\n      <CardBody>\n        <Formik\n          initialValues={initValue}\n          onSubmit={values => {\n            onSearch && onSearch({...values});\n          }}\n          onReset={data => {\n            onSearch && onSearch({});\n            // if (onReset) {\n            //   onReset(data);\n            // }\n          }}\n        >\n          {({values, handleSubmit, handleBlur, handleChange, setFieldValue, resetForm}) => (\n            <form onSubmit={handleSubmit} className=\"form form-label-right\">\n              <div className=\"form-group row master-header-search-margin\">\n                {searchModel ? (\n                  Object.keys(searchModel).map(key => {\n                    // console.log(values)\n                    switch (searchModel[key].type) {\n                      case 'string': {\n                        return (\n                          <InputString\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'string-number': {\n                        return (\n                          <InputStringNumber\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'number': {\n                        return (\n                          <InputNumber\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}/>\n                        );\n                      }\n                      case 'date-time': {\n                        return (\n                          <InputDateTime\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                      case 'search-select': {\n                        if (searchModel[key].onSearch === undefined || searchModel[key].onSearch === null) return;\n                        const t: any = (t: any) => null;\n                        return (\n                          <InputSearchSelect\n                            className={defaultClassName}\n                            name={key}\n                            value={values[key]}\n                            {...searchModel[key]}\n                            onSearch={searchModel[key].onSearch ?? t}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                      case 'tree-select': {\n                        if (searchModel[key].onSearch === undefined || searchModel[key].onSearch === null) return;\n                        const t: any = (t: any) => null;\n                        return (\n                          <InputTreeSelect\n                            className={defaultClassName}\n                            name={key}\n                            {...searchModel[key]}\n                            onSearch={searchModel[key].onSearch ?? t}\n                            key={`master_header${key}`}\n                          />\n                        );\n                      }\n                    }\n                    return <></>;\n                  })\n                ) : (\n                  <></>\n                )}\n              </div>\n  \n              {onSearch && (<div className=\"row no-gutters\">\n                <button className=\"btn btn-primary mr-8 fixed-btn-width\" type=\"submit\">\n                  <SearchIcon style={iconStyle}/>\n                  {intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_HEADER.SEARCH_BTN'})}\n                </button>\n                <button\n                  className=\"btn btn-outline-primary fixed-btn-width\"\n                  type=\"reset\"\n                  onClick={() => handleResetForm(resetForm)}>\n                  <SVG src={ToAbsoluteUrl('/media/svg/vncheck/reset-filter.svg')}\n                       style={iconStyle}/>\n                  {intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_HEADER.RESET_FILTER_BTN'})}\n                </button>\n              </div>)}\n            </form>\n          )}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n}\n","import React, {ReactElement} from 'react';\nimport {useFormikContext} from \"formik\";\n\nexport function InputCustom({\n                              className, component, ...props\n                            }: {\n  className: string,\n  component: (props: any) => ReactElement;\n  \n}) {\n  const Component = component;\n  const formik = useFormikContext<any>();\n  return (<div className={className}>\n    <Component  {...formik} {...props}/>\n  </div>)\n}\n\n","import React, {Fragment} from 'react';\nimport {InputGroups} from '../common-types/common-type';\nimport {useIntl} from 'react-intl';\nimport {\n  InputBoolean,\n  InputCheckBox,\n  InputDateTime,\n  InputImage,\n    InputFile,\n  InputNumber,\n  InputRadio,\n  InputSearchSelect,\n  InputSelect,\n  InputString,\n  InputStringNumber,\n  InputTag,\n  InputTreeSelect,\n} from './common-input';\nimport _ from 'lodash';\nimport {InputCustom} from \"../forms/input-custom\";\n\nexport function ModifyEntityPage<T>({\n                                      inputGroups,\n                                      mode = 'horizontal',\n                                    }:\n                                      {\n                                        inputGroups: InputGroups;\n                                        mode?: 'horizontal' | 'vertical';\n                                        errors?: any;\n                                      }) {\n  const intl = useIntl();\n  const {_subTitle, ...pl} = inputGroups;\n  return (\n    <>\n      <div className={'row'}>\n        {pl && Object.values(pl).map((inputGroup, index) => {\n          if (_.isString(inputGroup)) throw new Error('Sử dụng sai cách ' + inputGroup + '\\n' + JSON.stringify(pl));\n          const {_subTitle, _className, _inputClassName, ...inputs} = inputGroup;\n          return (\n            <div key={`modify-entity-page${index}`} className={_className ?? 'col-12'}>\n              {_subTitle && _subTitle !== '' && (<div\n                className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n              <RenderForm inputs={inputs} prevKey={''} inputClassName={_inputClassName} mode={mode}/>\n            </div>\n          )\n        })}\n      </div>\n    </>\n  );\n}\n\nexport const RenderForm = ({inputs, prevKey, mode, inputClassName}: any) => {\n  const intl = useIntl();\n  const defaultClassName = inputClassName ?? 'mb-5';\n  return (<>\n    {Object.keys(inputs).map(key => {\n      const input = inputs[key];\n      const trimKey = key.trim();\n      if (_.isString(input)) throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(inputs));\n      const name = prevKey ? ((trimKey === '' || prevKey === '') ? prevKey : `${prevKey}.${trimKey}`) : trimKey;\n      switch (input._type) {\n        case 'string':\n        case 'email':\n          return (\n            <InputString\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              mode={mode}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'string-number': {\n          return (\n            <InputStringNumber\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              mode={mode}\n              key={`modify-page-form-${name}`}/>\n          );\n        }\n        case 'number':\n          return (\n            <InputNumber\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'date-time':\n          return (\n            <InputDateTime\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          );\n        case 'radio':\n          return (\n            <InputRadio\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}/>\n          )\n        case 'boolean': {\n          return (\n            <InputBoolean\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        case 'image':\n          return (\n            <InputImage\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              // value={(values && values[key]) || []}\n              key={`modify-page-form-${name}`}\n            />\n          );\n      case 'file':\n          return (\n              <InputFile\n                  className={defaultClassName}\n                  name={name}\n                  mode={mode}\n                  type={input._type}\n                  {...input}\n                  // value={(values && values[key]) || []}\n                  key={`modify-page-form-${name}`}\n              />\n          );\n        case 'search-select': {\n          return (\n            <InputSearchSelect\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        case 'tree-select': {\n          return (\n            <InputTreeSelect\n              className={defaultClassName}\n              name={key}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`master_header${key}`}\n            />\n          );\n        }\n        case 'tag': {\n          return (\n            <InputTag\n              className={defaultClassName}\n              name={name}\n              mode={mode}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        }\n        \n        case 'checkbox':\n          return (\n            <InputCheckBox\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          );\n        \n        case 'select':\n          return (\n            <InputSelect\n              className={defaultClassName}\n              name={name}\n              type={input._type}\n              {...input}\n              key={`modify-page-form-${name}`}\n            />\n          )\n        \n        case 'custom': {\n          const {_type, ...props} = input;\n          return (<InputCustom {...props} key={`modify-page-form-${name}`}/>);\n        }\n        default: {\n          const {_type, _subTitle, _className, _inputClassName, ...innt} = input as any;\n          return _className ? (\n              <span key={`render_form_span${name}`} className={_className}>\n            {_subTitle && _subTitle !== '' && (<div\n              className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n                <RenderForm inputs={innt} inputClassName={_inputClassName ?? inputClassName}\n                            prevKey={name}\n                            mode={mode}/>\n            </span>) :\n            (<Fragment key={`render_form${name}`}>\n              {_subTitle && _subTitle !== '' && (<div\n                className=\"modify-subtitle text-primary\">{intl.formatMessage({id: _subTitle}).toUpperCase()}</div>)}\n              <RenderForm inputs={innt} inputClassName={_inputClassName ?? inputClassName}\n                          prevKey={name}\n                          mode={mode}/>\n            </Fragment>)\n        }\n      }\n    })}</>)\n};\n","import React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {useIntl} from 'react-intl';\nimport {iconStyle} from \"../common-consts/const\";\nimport {getField} from \"../helpers/common-function\";\nimport {RenderInfoDetail} from \"../common-types/common-type\";\nimport _ from \"lodash\";\nimport {getFieldV3} from \"./master-detail-page\";\n\nexport function MasterEntityDetailDialog({\n                                           title = 'COMMON_COMPONENT.DETAIL_DIALOG.HEADER_TITLE',\n                                           moduleName = 'COMMON_COMPONENT.DETAIL_DIALOG.MODULE_NAME',\n                                           show,\n                                           entity,\n                                           onHide,\n                                           renderInfo,\n                                           size = 'sm'\n                                         }: {\n  title?: string;\n  moduleName?: string;\n  show: boolean;\n  entity: any;\n  renderInfo: RenderInfoDetail;\n  onHide: () => void;\n  size?: 'sm' | 'lg' | 'xl';\n}) {\n  const intl = useIntl();\n  return (\n    <Modal\n      size={size}\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-detail\"\n    >\n      <Modal.Header closeButton className=\"border-bottom-0\">\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {intl\n            .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n            .toUpperCase()}\n        </Modal.Title>\n      </Modal.Header>\n      \n      <MasterEntityDetail entity={entity} renderInfo={renderInfo}/>\n      <Modal.Footer className=\"border-top-0\">\n        <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n          <CancelOutlinedIcon style={iconStyle}/>\n          {intl.formatMessage({id: 'COMMON_COMPONENT.DETAIL_DIALOG.CLOSE_BTN'})}\n        </button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport function MasterEntityDetail({\n                                     entity,\n                                     renderInfo,\n                                   }: {\n  renderInfo: RenderInfoDetail;\n  entity: any;\n}) {\n  const intl = useIntl();\n  return entity ? (\n    <Modal.Body>\n      <div className={`row`}>\n        {renderInfo.map((value, index) => (\n          <div key={index} className={`${value.className ?? 'col-12'}`}>\n            {value.header && value.header !== '' && <p className=\"text-primary detail-dialog-subtitle\">\n              {intl.formatMessage({id: value.header})}\n            </p>}\n            {Object.keys(value.data).map((dataKey) => (\n              <div className={`detail-dialog-row-info row`} key={dataKey}>\n                {value.data[dataKey].title && value.data[dataKey].title !== '' &&\n                <div className={`${value.titleClassName ?? 'col-4'}`}>\n                  {intl.formatMessage({id: value.data[dataKey].title})}:\n                </div>}\n                <div className={`${value.dataClassName ?? 'col-8'}`}>\n                  {(() => {\n                    const displayInfo = value.data[dataKey];\n                    const fieldName = displayInfo.keyField ?? dataKey;\n                    const displayData = fieldName.indexOf(\"[\") > -1 ?\n                      getFieldV3(entity, fieldName) :\n                      getFieldV3(entity, fieldName)[0]\n                    return displayInfo.formatter ? displayInfo.formatter(displayData, entity)\n                      : (<>{(_.isNumber(displayData) || _.isString(displayData)) ? displayData : JSON.stringify(displayData)}</>)\n                  })()\n                  }\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Modal.Body>\n  ) : (\n    <></>\n  );\n}\n","import React, {Fragment, ReactElement, useMemo} from 'react';\nimport { Card, CardBody, CardHeader } from '../card';\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useIntl } from 'react-intl';\nimport { iconStyle } from '../common-consts/const';\nimport { MasterTable } from './master-table';\nimport { MasterBodyColumns, PaginationProps } from '../common-types/common-type';\nimport _ from 'lodash';\n\nexport interface BasicUnitDataProps {\n  showModal: any;\n  hideModal: any;\n  show: any;\n  list: any[];\n  total: number;\n  loading: boolean;\n  queryParams: any;\n  setQueryParamsBase: any;\n  ids: any[];\n  setIds: any;\n  setQueryParams: any;\n}\n\nexport function MasterBody<T>({\n  entities,\n  total,\n  loading,\n  paginationParams,\n  setPaginationParams,\n  onSelectMany,\n  onCreate,\n  selectedEntities = [],\n  columns,\n  onDeleteMany,\n  isShowId,\n  title,\n  hideHeaderButton,\n    additionalActionComponent\n}: {\n  total: number;\n  loading: boolean;\n  onSelectMany?: (entities: T[]) => void;\n  onCreate?: () => void;\n  columns: MasterBodyColumns;\n  entities: T[];\n  selectedEntities?: T[];\n  paginationParams: PaginationProps;\n  setPaginationParams: (data: PaginationProps) => void;\n  additionalActionComponent?: (props: any) => ReactElement;\n  onDeleteMany?: () => void;\n  isShowId?: boolean;\n  title?: string;\n  hideHeaderButton?: boolean;\n}) {\n  const intl = useIntl();\n  const AdditionalActionComponent = additionalActionComponent;\n  const idColumn = useMemo(() => ({\n    dataField: '_id',\n    text: 'STT',\n    formatter: (cell: any, row: any, rowIndex: number) => (\n      <Fragment>\n        {rowIndex + 1 + ((paginationParams.page ?? 0) - 1) * (paginationParams.limit ?? 0)}\n      </Fragment>\n    ),\n    headerClasses: 'text-center',\n    align: 'center'\n  }), [paginationParams]);\n  const masterColumn = isShowId\n    ? _.isArray(columns)\n          ? [idColumn, ...columns]\n          : { _id: idColumn, ...columns }\n    : columns;\n\n  return (\n    <Card className={'master-body-card'}>\n      {title && <CardHeader title={intl.formatMessage({ id: title }).toUpperCase()} />}\n      <CardBody>\n        {hideHeaderButton !== true && (\n          <div className=\"row no-gutters mb-10\">\n            {onCreate && (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary fixed-btn-width mr-8\"\n              onClick={onCreate}>\n              <AddIcon style={iconStyle} />\n              {intl.formatMessage({ id: 'COMMON_COMPONENT.MASTER_BODY.HEADER.ADD_BTN' })}\n            </button>\n            )}\n            {onDeleteMany && (\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-primary fixed-btn-width\"\n                onClick={() => {\n                  onSelectMany && onSelectMany(selectedEntities);\n                  onDeleteMany();\n                }}>\n                <DeleteOutlineOutlinedIcon style={iconStyle} />\n                {intl.formatMessage({ id: 'COMMON_COMPONENT.MASTER_BODY.HEADER.DELETE_BTN' })}\n              </button>\n            )}\n            {AdditionalActionComponent && (<AdditionalActionComponent />)}\n          </div>\n        )}\n        <MasterTable\n          entities={entities}\n          columns={masterColumn}\n          total={total}\n          loading={loading}\n          paginationParams={paginationParams}\n          setPaginationParams={setPaginationParams}\n          onSelectMany={onSelectMany}\n          selectedEntities={selectedEntities}\n        />\n\n        {/* <MasterTreeStructure /> */}\n      </CardBody>\n    </Card>\n  );\n}\n","// please be familiar with react-bootstrap-table-next column formaters\n// https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Work%20on%20Columns&selectedStory=Column%20Formatter&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\n/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\nimport Visibility from '@material-ui/icons/Visibility';\nimport './master-table.scss';\nimport {ToAbsoluteUrl} from '../helpers/assets-helpers';\nimport {ActionColumnProps} from '../common-types/common-type';\nimport {IntlShape} from 'react-intl';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport QueueOutlinedIcon from '@material-ui/icons/QueueOutlined';\nimport HistoryIcon from '@material-ui/icons/History';\n\nexport function ActionsColumnFormatter<T>(\n  cellContent: any,\n  row: any,\n  rowIndex: number,\n  {onShowDetail, onDelete, onEdit,onLock, onChangeRole, onClone, onGoHistory, intl}: ActionColumnProps<T> & { intl: IntlShape },\n) {\n  return (\n    <div>\n      {onLock && (<a\n        // to={`/purchase-order/${row.code}`}\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-1\"\n        onClick={(e) => {\n          onLock(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <SVG\n            src={ToAbsoluteUrl('/media/svg/vncheck/lock.svg')}\n            title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.LOCK_BTN'})}\n          />\n        </span>\n      </a>)}\n      {onClone &&  (<a\n        title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.CLONE_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility mx-1\"\n        onClick={(e) => {\n          onClone(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <QueueOutlinedIcon className=\"text-primary eye\"/>\n          </span>\n        </span>\n      </a>)}\n      {onShowDetail && (<a\n        title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.SHOW_DETAIL_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility\"\n        onClick={(e) => {\n          onShowDetail(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <Visibility className=\"text-primary eye\"/>\n        </span>\n      </a>)}\n      {onEdit && (<a\n        // to={`/purchase-order/${row.code}`}\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-1\"\n        onClick={(e) => {\n          onEdit(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <SVG\n            src={ToAbsoluteUrl('/media/svg/icons/Communication/Write.svg')}\n            title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.EDIT_BTN'})}\n          />\n        </span>\n      </a>)}\n      {onDelete &&  (<a\n        // title={intl.formatMessage({id: 'COMMON_COMPONENT.MASTER_BODY.TABLE.DELETE_BTN'})}\n        className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility\"\n        onClick={(e) => {\n          onDelete(row);\n          e.preventDefault();\n        }}>\n        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <DeleteIcon className=\"text-primary eye\"/>\n          </span>\n        </span>\n      </a>)}\n      {\n        onGoHistory && (\n          <a\n          className=\"btn btn-icon btn-light btn-hover-primary btn-sm visibility mx-1\"\n          onClick={(e) => {\n            onGoHistory(row);\n            e.preventDefault();\n          }}>\n          <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n            <HistoryIcon className=\"text-primary eye\" />\n          </span>\n        </a>\n        )\n      }\n    </div>\n  );\n}\n\nexport function TickColumnFormatter<T>(\n  cellContent: string | boolean,\n  row: any) {\n  return (cellContent === \"1\" || cellContent === \"true\" || cellContent === true) ? (\n    <CheckCircleIcon style={{color: '#1DBE2D'}}/>) : (<CheckCircleIcon style={{color: '#C4C4C4'}}/>)\n}\n","import React, {useMemo} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {useIntl} from 'react-intl';\nimport {DeleteDialogProps} from '../common-types/common-type';\nimport {iconStyle} from '../common-consts/const';\nimport {CapitalizeFirstLetter} from '../helpers/common-function';\nimport _ from \"lodash\";\n\nexport function DeleteEntityDialog<T>({\n                                        isShow,\n                                        entity,\n                                        onHide,\n                                        onDelete,\n                                        title = 'COMMON_COMPONENT.DELETE_DIALOG.TITLE',\n                                        bodyTitle = 'COMMON_COMPONENT.DELETE_DIALOG.BODY_TITLE',\n                                        confirmMessage = 'COMMON_COMPONENT.DELETE_DIALOG.CONFIRM',\n                                        deleteBtn = 'COMMON_COMPONENT.DELETE_DIALOG.DELETE_BTN',\n                                        deletingMessage = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.DELETING',\n                                        cancelBtn = 'COMMON_COMPONENT.DELETE_DIALOG.CANCEL_BTN',\n                                        moduleName = 'COMMON_COMPONENT.DELETE_DIALOG.MODULE_NAME',\n                                        loading,\n                                        error = {error: ''},\n                                      }: DeleteDialogProps<T>) {\n  const intl = useIntl();\n  const _innerError = useMemo((): string | ({ message: string, additional: string }[]) => {\n    try {\n      return JSON.parse(error.error)\n    } catch (e) {\n      return error?.error\n    }\n  }, [error]);\n  return (<><Modal\n    show={isShow && (error.error === '')}\n    onHide={onHide}\n    aria-labelledby=\"example-modal-sizes-title-lg\"\n    dialogClassName=\"modal-delete\">\n    {/*{loading && <ModalProgressBar />}*/}\n    <Modal.Header className=\"border-bottom-0\" closeButton>\n      <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n        {intl\n          .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n          .toUpperCase()}\n      </Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      {!loading && (\n        <>\n          {CapitalizeFirstLetter(\n            intl.formatMessage(\n              {id: bodyTitle},\n              {moduleName: intl.formatMessage({id: moduleName})},\n            ),\n          )}\n          {' ' + intl.formatMessage(\n            {id: confirmMessage},\n            {moduleName: intl.formatMessage({id: moduleName})},\n          )}\n        </>\n      )}\n      {loading && <span className={'ml-1'}>{intl.formatMessage({id: deletingMessage})}</span>}\n    </Modal.Body>\n    \n    <Modal.Footer className=\"border-top-0\">\n      <button type=\"button\" className=\"btn btn-primary mr-lg-8 fixed-btn-width\"\n              onClick={e => onDelete(entity)}>\n        {/*<DeleteIcon style={iconStyle}/>*/}\n        {loading ? (<div className=\"spinner spinner-sm spinner-darker-white\">\n          <span className={'ml-6'}>{intl.formatMessage({id: deleteBtn})}</span>\n        </div>) : intl.formatMessage({id: deleteBtn})}\n      </button>\n      <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n        <CancelOutlinedIcon style={iconStyle}/>\n        {intl.formatMessage({id: cancelBtn})}\n      </button>\n    </Modal.Footer>\n  </Modal>\n    <Modal\n      show={isShow && (error.error !== '')}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-delete\">\n      <Modal.Header className=\"border-bottom-0\" closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {intl\n            .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n            .toUpperCase()}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {!loading && error.error !== '' && (\n          <>\n            {_.isString(_innerError) ?\n              (<p className='text-danger'>{intl.formatMessage({id: _innerError}, {additional: ''})}</p>)\n              : _innerError.map((e, index) => (\n                (<p key={`abc${index}`} className='text-danger'>{intl.formatMessage({id: e.message}, e)}</p>)\n              ))\n            }\n          </>\n        )}\n      </Modal.Body>\n      <Modal.Footer className=\"border-top-0\">\n        <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n          <CancelOutlinedIcon style={iconStyle}/>\n          {intl.formatMessage({id: cancelBtn})}\n        </button>\n      </Modal.Footer>\n    </Modal></>)\n}\n","import React, {useMemo} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {useIntl} from 'react-intl';\nimport {DeleteManyDialogProps} from '../common-types/common-type';\nimport {CapitalizeFirstLetter} from '../helpers/common-function';\nimport {iconStyle} from \"../common-consts/const\";\nimport CancelOutlinedIcon from \"@material-ui/icons/CancelOutlined\";\nimport _ from \"lodash\";\n\nfunction DeleteManyEntitiesDialog<T>({\n                                       selectedEntities,\n                                       isShow,\n                                       onHide,\n                                       onDelete,\n                                       title = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.TITLE',\n                                       bodyTitle = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.BODY_TITLE',\n                                       confirmMessage = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.CONFIRM',\n                                       noSelectedEntityMessage = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.NO_SELECTED_ENTITY',\n                                       deletingMessage = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.DELETING',\n                                       deleteBtn = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.DELETE_BTN',\n                                       cancelBtn = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.CANCEL_BTN',\n                                       moduleName = 'COMMON_COMPONENT.DELETE_MANY_DIALOG.MODULE_NAME',\n                                       loading,\n                                       error = {error: ''},\n                                     }: DeleteManyDialogProps<T>) {\n  const intl = useIntl();\n  const _innerError = useMemo((): string | ({ message: string, additional: string }[]) => {\n    try {\n      return JSON.parse(error.error)\n    } catch (e) {\n      return error?.error\n    }\n  }, [error]);\n  return (<>\n    <Modal\n      show={isShow && (error.error === '')}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-delete-many\">\n      {/*begin::Loading*/}\n      {/*end::Loading*/}\n      <Modal.Header className=\"border-bottom-0\" closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {intl\n            .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n            .toUpperCase()}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {selectedEntities && selectedEntities.length > 0 ? (\n          !loading && (\n            <>\n              {CapitalizeFirstLetter(\n                intl.formatMessage(\n                  {id: bodyTitle},\n                  {moduleName: intl.formatMessage({id: moduleName})},\n                ),\n              )}\n              {' ' + intl.formatMessage(\n                {id: confirmMessage},\n                {moduleName: intl.formatMessage({id: moduleName})},\n              )}\n            </>\n          )\n        ) : (\n          <>\n            {intl.formatMessage(\n              {id: noSelectedEntityMessage},\n              {moduleName: intl.formatMessage({id: moduleName})},\n            )}\n          </>\n        )}\n        {loading && <span className={'ml-1'}>{intl.formatMessage({id: deletingMessage})}</span>}\n      </Modal.Body>\n      <Modal.Footer className=\"border-top-0\">\n        {selectedEntities && selectedEntities.length > 0 &&\n        <button type=\"button\" className=\"btn btn-primary mr-lg-8 fixed-btn-width\"\n                onClick={e => onDelete(selectedEntities)}>\n          {/*<DeleteIcon style={iconStyle}/>*/}\n          {loading ? (<div className=\"spinner spinner-sm spinner-darker-white\">\n            <span className={'ml-6'}>{intl.formatMessage({id: deleteBtn})}</span>\n          </div>) : intl.formatMessage({id: deleteBtn})}\n        </button>}\n        \n        <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n          <CancelOutlinedIcon style={iconStyle}/>\n          {intl.formatMessage({id: cancelBtn})}\n        </button>\n      </Modal.Footer>\n    </Modal>\n    <Modal\n      show={isShow && (error.error !== '')}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-delete-many\">\n      {/*begin::Loading*/}\n      {/*end::Loading*/}\n      <Modal.Header className=\"border-bottom-0\" closeButton>\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {intl\n            .formatMessage({id: title}, {moduleName: intl.formatMessage({id: moduleName})})\n            .toUpperCase()}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {!loading && error.error !== '' && (\n          <>\n            {_.isString(_innerError) ?\n              (<p className='text-danger'>{intl.formatMessage({id: _innerError})}</p>)\n              : _innerError.map((e, index) => (\n                (<p key={`abc${index}`} className='text-danger'>{intl.formatMessage({id: e.message}, e)}</p>)\n              ))\n            }\n          </>\n        )}\n      </Modal.Body>\n      <Modal.Footer className=\"border-top-0\">\n        <button type=\"button\" onClick={onHide} className=\"btn btn-outline-primary fixed-btn-width\">\n          <CancelOutlinedIcon style={iconStyle}/>\n          {intl.formatMessage({id: cancelBtn})}\n        </button>\n      </Modal.Footer>\n    </Modal>\n  </>);\n}\n\nexport default DeleteManyEntitiesDialog;\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {Modal, Spinner} from 'react-bootstrap';\nimport {Form, Formik} from 'formik';\nimport {useIntl} from 'react-intl';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {ModifyPanel} from '../common-types/common-type';\nimport {iconStyle} from '../common-consts/const';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {InitValues} from \"../helpers/common-function\";\n\nfunction ModifyEntityDialogForm<T>({\n                                     entity,\n                                     onModify,\n                                     moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                                     onHide,\n                                     modifyPanel,\n                                     validation,\n                                     loading\n                                   }: {\n  moduleName?: string;\n  entity?: any;\n  onHide: () => void;\n  onModify: (values: any) => Promise<any>;\n  modifyPanel: ModifyPanel;\n  validation: any;\n  loading?: boolean\n}) {\n  const intl = useIntl();\n  const {_title, ...inputGroups} = modifyPanel;\n  const initValues = useMemo(() => InitValues({_header: '', panel1: modifyPanel}), [modifyPanel]);\n  const [entityForEdit, setEntityForEdit] = useState(initValues);\n  \n  useEffect(() => {\n     setEntityForEdit(entity ?? initValues);\n  }, [entity,initValues]);\n  \n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={entityForEdit}\n      validationSchema={validation}\n      onSubmit={(values, {setSubmitting}) => {\n        // console.log(values);\n        onModify({...entity, ...values, __v: undefined}).then(() => {\n          onHide()\n        }).catch((err) => {\n          setSubmitting(false)\n        });\n      }}>\n      {({handleSubmit}) => (\n        <>\n          <Modal.Body className=\"overlay overlay-block cursor-default\">\n            <Form className=\"form form-label-right\">\n              {Object.keys(inputGroups).map(key => (\n                <React.Fragment key={key}>\n                  <ModifyEntityPage inputGroups={inputGroups}/>\n                </React.Fragment>\n              ))}\n            </Form>\n          </Modal.Body>\n          <Modal.Footer className=\"border-top-0 pt-10\">\n            <button\n              type=\"submit\"\n              onClick={() => handleSubmit()}\n              className=\"btn btn-primary fixed-btn-width\">\n              {\n                loading === true ? <Spinner animation=\"border\" variant=\"light\" size=\"sm\"/> :\n                  <SaveOutlinedIcon style={iconStyle}/>\n              }\n              {'\\u00A0'}\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.SAVE_BTN'})}\n            </button>\n            <button\n              type=\"button\"\n              onClick={onHide}\n              className=\"btn btn-outline-primary fixed-btn-width\">\n              <CancelOutlinedIcon style={iconStyle}/>\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.CLOSE_BTN'})}\n            </button>\n          </Modal.Footer>\n        </>\n      )}\n    </Formik>\n  );\n}\n\nexport default ModifyEntityDialogForm;\n","import React, {useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ModifyEntityDialogForm from './modify-entity-dialog-form';\nimport {useIntl} from 'react-intl';\nimport {ModifyForm} from \"../common-types/common-type\";\nimport _ from \"lodash\";\nfunction ModifyEntityDialog<T>({\n                                 show,\n                                 onHide,\n                                 entity,\n                                 onModify,\n                                 size = 'sm',\n                                 moduleName = 'COMMON_COMPONENT.DETAIL_DIALOG.MODULE_NAME',\n                                 formModel,\n                                 validation,\n                                 loading\n                               }: {\n  show: boolean;\n  onHide: () => void;\n  entity?: T;\n  moduleName?: string;\n  onModify: (values: any) => Promise<any>;\n  formModel: ModifyForm;\n  size?: 'sm' | 'lg';\n  actions?: any;\n  validation?: any;\n  homePage?: string;\n  error?: { error: string };\n  loading?: boolean;\n}) {\n  const intl = useIntl();\n  const {_header, ...panels} = formModel;\n  return (\n    <Modal\n      size={size}\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-modify\"\n      // style={{width}}\n    >\n      <Modal.Header closeButton className=\"border-bottom-0\">\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {_.isString(_header) ? intl\n            .formatMessage(\n              {id: _header},\n              {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n            )\n            .toUpperCase() : _header(entity)}\n        </Modal.Title>\n      </Modal.Header>\n      {Object.values(panels).map((panel, index) => {\n        if(_.isString(panel)) throw new Error('Sử dụng sai cách ' + panel);\n        return (<ModifyEntityDialogForm\n          modifyPanel={panel}\n          validation={validation}\n          entity={entity}\n          onHide={onHide}\n          onModify={onModify}\n          key={`tttttttt${index}`}\n          loading={loading}\n        />)\n      })}\n      {/*<MasterEntityDetail data={entity} renderInfo={renderInfo}/>*/}\n     \n    </Modal>\n  );\n}\n\nexport default ModifyEntityDialog;\n","import React from 'react';\nimport { Card, CardBody } from '../../common-library/card';\nimport { TextareaAutosize } from '@material-ui/core';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AxiosResponse } from 'axios';\nimport _ from 'lodash';\n\nconst notifyError = (error: string) => {\n  toast.error(error, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nconst PostComments = ({\n                                  entity,\n                                  onComments,\n                                }: {\n  entity?: any;\n  onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n}) => {\n  const valueRef = React.useRef<any>({ value: '' });\n  const [commentsArr, setCommentArr] = React.useState(entity?.comments || []);\n\n  React.useEffect(() => {\n    if (entity) {\n      setCommentArr(entity.comments)\n    }\n  }, [entity])\n\n  const handleComment = (entity: any, comment: any) => {\n    if (onComments && entity) {\n      onComments(entity, comment)\n          .then(res => {\n            setCommentArr(res.data);\n            // setComment({ content: '' });\n            valueRef.current.value = '';\n          })\n          .catch(err => {\n            throw err;\n          });\n    }\n  };\n\n  return (\n      <Card>\n        <CardBody>\n          <div className=\"pl-xl-15 pl-md-10 pl-5 mb-5\">\n            <span className=\"modify-subtitle text-primary mt-8\">COMMENTS</span>\n            <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n              {//entityForEdit.comments\n                // [\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                // ]\n                commentsArr?.map(\n                    (\n                        value: { createdBy: { _id: string; fullName: string }; content: string },\n                        key: number,\n                    ) => (\n                        <div key={key} className=\"row mb-3\">\n                          <div className=\"col-1 text-center\">\n                            <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                          </div>\n                          <div className=\"col-10 bg-light rounded p-3\">\n                            <p className=\"font-bold\">\n                              {_.isString(value.createdBy)\n                                  ? value.createdBy\n                                  : value.createdBy.fullName\n                                      ? value.createdBy.fullName\n                                      : 'Anonymous'}\n                            </p>\n                            <p>{value.content}</p>\n                          </div>\n                        </div>\n                    ),\n                )}\n              <div className=\"row\">\n                <div className=\"col-1\"></div>\n                <div className=\"col-10\">\n                  <div className=\"row\">\n                    <div className=\"col-11\">\n                      <TextareaAutosize\n                          className=\"form-control\"\n                          rowsMin={1}\n                          aria-label=\"empty textarea\"\n                          ref={valueRef}\n                          placeholder=\"Write comment...\"\n                      />\n                    </div>\n                    <div className=\"col-1\">\n                      <button\n                          className=\"btn btn-primary pl-11 pr-11\"\n                          onClick={() => {\n                            if (valueRef.current.value !== '') {\n                              handleComment(entity, { content: valueRef.current.value });\n                            } else {\n                              notifyError('Comment is empty!');\n                            }\n                          }}>\n                        Sent\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n  );\n};\n\nexport default PostComments;\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {Form, Formik} from 'formik';\nimport {Link, useHistory} from 'react-router-dom';\nimport {Card, CardBody, CardHeader} from '../card';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport {ModifyForm} from '../common-types/common-type';\nimport _ from 'lodash';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {GetHomePage, InitValues} from \"../helpers/common-function\";\nimport {Spinner} from \"react-bootstrap\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PostComments from \"../../pages/post/post-comments\";\nimport {AxiosResponse} from \"axios\";\n\nfunction EntityCrudPage({\n                          entity,\n                          onModify,\n                          moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                          code,\n                          get,\n                          formModel,\n                          actions,\n                          validation,\n                          loading,\n                          mode,\n                          setEditEntity,\n                          homePageUrl,\n                            allFormButton,\n                            onComments,\n                            showComment = true\n                        }: {\n  // modifyModel: ModifyModel;\n  moduleName?: string;\n  entity?: any;\n  onModify: (values: any) => Promise<any>;\n  code?: string;\n  get?: (code: string) => any;\n  formModel: ModifyForm;\n  mode?: 'horizontal' | 'vertical';\n  actions?: any;\n  validation?: any;\n  autoFill?: any;\n  loading?: boolean;\n  setEditEntity?: (entity: any) => void;\n  homePageUrl?: string\n    allFormButton?: any;\n    onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n    showComment?: boolean;\n}) {\n  const intl = useIntl();\n  const history = useHistory();\n  const initValues = useMemo(() => InitValues(formModel), [formModel]);\n\n  const [entityForEdit, setEntityForEdit] = useState(entity);\n  useEffect(()=>{\n    entity && setEntityForEdit(entity);\n  }, [entity])\n\n  useEffect(() => {\n    if (!code && !entity) setEntityForEdit(initValues);\n  }, [initValues, code]);\n  const {_header, ...modifyPanels} = formModel;\n  \n  useEffect(() => {\n    if (code) {\n      get &&\n      get(code).then((res: { data: any }) => {\n        setEntityForEdit({...res.data});\n        if (setEditEntity) { setEditEntity(res.data) }\n      });\n    }\n  }, [code]);\n\n  console.log(entityForEdit)\n  \n  return (\n    <>\n      <Formik\n        enableReinitialize={true}\n        initialValues={entityForEdit}\n        validationSchema={validation}\n        onSubmit={(values, {setSubmitting, validateForm}) => {\n          console.log(values)\n          onModify(values).then(() => {\n            history.push(homePageUrl ?? GetHomePage(window.location.pathname))\n          }).catch((err) => {\n            // setSubmitting(false);\n          });\n        }}>\n        {({handleSubmit, setFieldValue}) => (\n          <>\n            <Form className=\"form form-label-right\">\n              {Object.keys(modifyPanels).map((key, index, keys) => {\n                const val = modifyPanels[key];\n                if (_.isString(val))\n                  throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(modifyPanels));\n                const {_title, ...panel} = val;\n                return (\n                  <Card key={`entity-crud-card` + key} className={'modify-page'}>\n                    <CardHeader\n                      className={'border-bottom-0'}\n                      title={\n                        index == 0 ? (\n                          <a\n                            onClick={() => history.goBack()}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {_.isString(_header) ? intl\n                              .formatMessage(\n                                {id: _header},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase() : _header(entityForEdit)}\n                          </a>\n                        ) : (\n                          <>\n                            {intl\n                              .formatMessage(\n                                {id: _title},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase()}\n                          </>\n                        )\n                      }\n                    />\n                    <CardBody>\n                      <ModifyEntityPage\n                        mode={mode}\n                        // className={formPart[key].className}\n                        // images={images}\n                        inputGroups={panel}\n                      />\n                    {allFormButton && allFormButton.type === 'outside' && (\n                        <div className=\"text-right mt-10\">\n                            {Object.keys(allFormButton.data).map(keyss => {\n                                switch (allFormButton['data'][keyss].role) {\n                                    case 'submit':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick();\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n\n                                    case 'special':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'button':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}\n                                                onClick={() => {\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'link-button':\n                                        return (\n                                            <Link to={allFormButton['data'][keyss].linkto} key={keyss}>\n                                                <button\n                                                    type={allFormButton['data'][keyss].type}\n                                                    className={allFormButton['data'][keyss].className}>\n                                                    {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                                </button>\n                                            </Link>\n                                        );\n                                }\n                            })}\n                        </div>\n                    )}\n                      {(actions && index === Object.keys(modifyPanels).length - 1) && (\n                        <div className=\"text-right mt-10\" key={key}>\n                          {Object.keys(actions.data).map(keyss => {\n                            switch (actions.data[keyss].role) {\n                              case 'submit':\n                                return (\n                                  <button\n                                    className={actions.data[keyss].className}\n                                    key={keyss}\n                                    type={'submit'}\n                                  >\n                                    {loading === true ? actions.data[keyss].loading ?? (\n                                      <Spinner animation=\"border\" variant=\"light\"\n                                               size=\"sm\"/>) : actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              \n                              case 'button':\n                                return (\n                                  <button\n                                    type={actions.data[keyss].type}\n                                    className={actions.data[keyss].className}\n                                    key={keyss}>\n                                    {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              case 'link-button':\n                                return (\n                                  <Link to={actions.data[keyss].linkto} key={keyss}>\n                                    <button\n                                      type={actions.data[keyss].type}\n                                      className={actions.data[keyss].className}>\n                                      {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                    </button>\n                                  </Link>\n                                );\n                            }\n                          })}\n                        </div>)\n                      }\n                    </CardBody>\n                  </Card>\n                );\n              })}\n\n            </Form>\n              {showComment !== true || !onComments ? <></> : (entityForEdit?.confirmationStatus === '3'\n                  || (entityForEdit?.isMaster === true && entityForEdit?.confirmationStatus === '2')) ? (\n                  <Card>\n                      <CardBody className={'p-0'}>\n                          <div className=\"mb-5 mt-5\">\n                              <span className=\"text-primary detail-dialog-subtitle mt-8\">BÌNH LUẬN</span>\n                              <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n                                  {entityForEdit && entityForEdit.comments.length > 0 ? (\n                                      entityForEdit.comments.map(\n                                          (\n                                              value: { createdBy: { _id: string; fullName: string }; content: string },\n                                              key: number,\n                                          ) => (\n                                              <div key={key} className=\"row mb-3\">\n                                                  <div className=\"col-1 text-center\">\n                                                      <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                                                  </div>\n                                                  <div className=\"col-10 bg-light rounded p-3\">\n                                                      <p className=\"font-bold\">{value.createdBy.fullName}</p>\n                                                      <p>{value.content}</p>\n                                                  </div>\n                                              </div>\n                                          ),\n                                      )\n                                  ) : (\n                                      <span>Chưa có bình luận</span>\n                                  )}\n                              </div>\n                          </div>\n                      </CardBody>\n                  </Card>\n              ) : (\n                  <PostComments entity={entityForEdit} onComments={onComments} />\n              )}\n          </>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default EntityCrudPage;\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {PurchaseOrderModel} from './purchase-order.model';\n\nexport const API_URL = API_BASE_URL + '/purchase-order';\n\nexport const API_FILE_URL = API_BASE_URL + '/file';\n\nexport const Create: CreateProps<PurchaseOrderModel> = (data: PurchaseOrderModel) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<PurchaseOrderModel> = ({\n                                                                queryProps,\n                                                                sortList,\n                                                                paginationProps,\n                                                              }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n    // paramsSerializer: ParamsSerializer\n  });\n};\n\nexport const Count: CountProps<PurchaseOrderModel> = ({\n                                                        queryProps,\n                                                        sortList,\n                                                        paginationProps,\n                                                      }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Get: GetProps<PurchaseOrderModel> = entity => {\n  return axios.get(`${API_URL}/${entity.code}`);\n};\n\nexport const GetById = (code: string) => {\n  return axios.get(`${API_URL}/${code}`);\n};\nexport const Update: UpdateProps<PurchaseOrderModel> = (entity: PurchaseOrderModel) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<PurchaseOrderModel> = (entity: PurchaseOrderModel) => {\n  return axios.delete(`${API_URL}/${entity.code}`);\n};\n\nexport const DeleteMany: DeleteManyProps<PurchaseOrderModel> = (entities: PurchaseOrderModel[]) => {\n  return axios.delete(API_URL, {\n    data: {arrayEntities: entities},\n  });\n};\n\nexport const uploadImage = (image: any) => {\n  console.log('run updload');\n  console.log(image);\n  return axios.post(API_URL, image);\n  \n};\n","import React, { useState } from 'react';\nimport ReactBnbGallery from 'react-bnb-gallery';\nimport 'react-bnb-gallery/dist/style.css'\nimport './gallery-image.scss'\nconst photos = [{\n    photo: \"https://source.unsplash.com/aZjw7xI3QAA/1144x763\",\n    caption: \"Nguyễn Minh Hiếu - 26/09/2020 9:00\",\n    subcaption: `Địa điểm chụp: 21°01'10.1\"N 105°47'28.6\"E`,\n    thumbnail: \"https://source.unsplash.com/aZjw7xI3QAA/100x67\",\n  }, {\n    photo: \"https://source.unsplash.com/c77MgFOt7e0/1144x763\",\n    caption: \"Nguyễn Minh Hiếu - 26/09/2020 9:00\",\n    subcaption: `Địa điểm chụp: 21°01'10.1\"N 105°47'28.6\"E`,\n    thumbnail: \"https://source.unsplash.com/c77MgFOt7e0/100x67\",\n  }, {\n    photo: \"https://source.unsplash.com/QdBHnkBdu4g/1144x763\",\n    caption: \"Nguyễn Minh Hiếu - 26/09/2020 9:00\",\n    subcaption: `Địa điểm chụp: 21°01'10.1\"N 105°47'28.6\"E`,\n    thumbnail: \"https://source.unsplash.com/QdBHnkBdu4g/100x67\",\n  }];\n\nfunction GalleryImage() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button className=\"btn btn-primary\" onClick={() => setIsOpen(true)}>\n        Open gallery\n      </button>\n      <div className=\"ccc\">\n      <ReactBnbGallery\n        show={isOpen}\n        photos={photos}\n        onClose={() => setIsOpen(false)}\n      />\n      </div>\n    </>\n  );\n};\n\nexport default GalleryImage;","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {AgencyModel} from './agency.model';\nimport {PurchaseOrderModel} from './purchase-order.model';\n\nexport const API_URL = API_BASE_URL + '/agency';\n\nexport const Create: CreateProps<PurchaseOrderModel> = (data: PurchaseOrderModel) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<AgencyModel> = ({queryProps, sortList, paginationProps}) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n    // paramsSerializer: ParamsSerializer\n  });\n};\n\nexport const Count: CountProps<AgencyModel> = ({queryProps, sortList, paginationProps}) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Get: GetProps<PurchaseOrderModel> = entity => {\n  return axios.get(`${API_URL}/${entity.code}`);\n};\n\nexport const Update: UpdateProps<PurchaseOrderModel> = (entity: PurchaseOrderModel) => {\n  return axios.put(`${API_URL}/${entity.code}`, entity);\n};\n\nexport const Delete: DeleteProps<PurchaseOrderModel> = (entity: PurchaseOrderModel) => {\n  return axios.delete(`${API_URL}/${entity.code}`);\n};\n\nexport const DeleteMany: DeleteManyProps<PurchaseOrderModel> = (entities: PurchaseOrderModel[]) => {\n  return axios.delete(API_URL, {\n    data: {arrayEntities: entities},\n  });\n};\n","import React, {Fragment, useEffect} from 'react';\nimport {useIntl} from 'react-intl';\nimport {Count, Create, Delete, DeleteMany, Get, GetAll, Update} from './purchase-order.service';\nimport {PurchaseOrderModel} from './purchase-order.model';\nimport {DefaultPagination, NormalColumn, SortColumn, StatusValue,} from '../../common-library/common-consts/const';\nimport {MasterHeader} from '../../common-library/common-components/master-header';\nimport {MasterEntityDetailDialog} from '../../common-library/common-components/master-entity-detail-dialog';\nimport {MasterBody} from '../../common-library/common-components/master-body';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\nimport {ActionsColumnFormatter} from '../../common-library/common-components/actions-column-formatter';\nimport {DeleteEntityDialog} from '../../common-library/common-components/delete-entity-dialog';\nimport DeleteManyEntitiesDialog from '../../common-library/common-components/delete-many-entities-dialog';\nimport ModifyEntityDialog from '../../common-library/common-components/modify-entity-dialog';\nimport {SearchModel} from '../../common-library/common-types/common-type';\nimport {GenerateAllFormField, InitMasterProps,} from '../../common-library/helpers/common-function';\nimport {Redirect, Route, Switch, useHistory} from 'react-router-dom';\nimport EntityCrudPage from '../../common-library/common-components/entity-crud-page';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport * as Yup from 'yup';\nimport GalleryImage from '../../common-library/forms/gallery-image';\nimport * as AgencyService from './agency.service';\n\nconst DataExample: any = [\n  {\n    _id: 'dlc1',\n    code: 'zz_1',\n    title: 'Đại lý cấp 1',\n    child: [\n      {\n        _id: 'xxx-xxx',\n        code: 'cccc',\n        title: 'Đại lý cấp 2',\n        parentId: 'dlc1',\n      },\n    ],\n  },\n  {\n    _id: 'sieuthi',\n    code: 'abcxyz',\n    title: 'Siêu thị',\n    child: [],\n  },\n  {\n    _id: 'bigC',\n    code: 'dcvf',\n    title: 'Big C',\n    child: [\n      {\n        _id: 'xxx-xxx4',\n        code: 'cvfv',\n        title: 'Đại lý cấp 4',\n        parentId: 'bigC',\n      },\n      {\n        _id: 'xxx-xxx5',\n        code: 'dfs',\n        title: 'Đại lý cấp 5',\n        parentId: 'bigC',\n      },\n    ],\n  },\n];\n\n// const validateSchema = {\n//   code: {\n//     required: true,\n//   },\n//   phone: {\n//     required: true,\n\n//   }\n// }\n\n// const ValidationByNguyenMinhHieu = (data: any, validateSchema: any) => {\n\n//   const _validationResult = {}\n\n//   Object.keys(validateSchema).map(key => {\n//     switch(validateSchema[key])\n//   })\n// }\n\nconst PurchaseOrderSchema = Yup.object().shape({\n  // code: Yup.string()\n  //   .min(3, 'Minimum 3 symbols')\n  //   .max(50, 'Maximum 50 symbols')\n  //   .required('Code không được để trống'),\n  // // dateofbirth: Yup.mixed()\n  // //   .nullable(false)\n  // //   .required('Date of Birth is required'),\n  // agencyAddress: Yup.string().required('Vui lòng nhập Agency Address'),\n  phoneNumber: Yup.string()\n    .required('Last name không được để trống')\n    .matches(/[0-9]$/u, {\n      message: 'Vui lòng nhập tên đúng định dạng',\n    }),\n  // time: Yup.date().required('Vui lòng nhập date'),\n  // time2: Yup.date().required('Vui lòng nhập date'),\n  // quantity: Yup.number().required('Vui lòng nhập số lượng'),\n  agency: Yup.object().shape({\n    name: Yup.string().required('Name ko đc để trống'),\n    name2: Yup.string().required('Name2 ko đc để trống'),\n    taxId: Yup.object().shape({\n      taxName: Yup.string().required('Tax name ko đc để trống'),\n      taxNumber: Yup.string().required('Tax number ko đc để trống'),\n    })\n  }),\n  // staff: Yup.array().min(1, 'Nhân viên ko đc để trống'),\n});\n\nfunction PurchaseOrder() {\n  const intl = useIntl();\n  const {\n    entities,\n    setEntities,\n    deleteEntity,\n    setDeleteEntity,\n    editEntity,\n    setEditEntity,\n    createEntity,\n    setCreateEntity,\n    selectedEntities,\n    setSelectedEntities,\n    detailEntity,\n    setDetailEntity,\n    showDelete,\n    setShowDelete,\n    showEdit,\n    setShowEdit,\n    showCreate,\n    setShowCreate,\n    showDetail,\n    setShowDetail,\n    showDeleteMany,\n    setShowDeleteMany,\n    paginationProps,\n    setPaginationProps,\n    filterProps,\n    setFilterProps,\n    total,\n    setTotal,\n    loading,\n    setLoading,\n    error,\n    setError,\n    add,\n    update,\n    get,\n    deleteMany,\n    deleteFn,\n    getAll,\n    refreshData,\n  } = InitMasterProps<PurchaseOrderModel>({\n    getServer: Get,\n    countServer: Count,\n    createServer: Create,\n    deleteServer: Delete,\n    deleteManyServer: DeleteMany,\n    getAllServer: GetAll,\n    updateServer: Update,\n  });\n  \n  const moduleName = 'PURCHASE_ORDER.CUSTOM.MODULE_NAME';\n  const headerTitle = 'PURCHASE_ORDER.MASTER.HEADER.TITLE';\n  const createTitle = 'PURCHASE_ORDER.CREATE.TITLE';\n  const updateTitle = 'PURCHASE_ORDER.UPDATE.TITLE';\n  const history = useHistory();\n  \n  useEffect(() => {\n    getAll(filterProps);\n  }, [paginationProps, filterProps]);\n  \n  const columns = {\n    code: {\n      dataField: 'code',\n      text: `${intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.CODE_COLUMN'})}`,\n      ...SortColumn,\n    },\n    agencyAddress: {\n      dataField: 'agencyAddress',\n      text: `${intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN'})}`,\n      ...SortColumn,\n    },\n    \n    phoneNumber: {\n      dataField: 'phoneNumber',\n      text: `${intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN'})}`,\n      ...SortColumn,\n    },\n    status: {\n      dataField: 'status',\n      text: `${intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.STATUS_COLUMN'})}`,\n      ...SortColumn,\n      formatter: (cell: any, row: any) =>\n        row.status === StatusValue ? (\n          <CheckCircleIcon style={{color: '#1DBE2D'}}/>\n        ) : (\n          <IndeterminateCheckBoxIcon/>\n        ),\n    },\n    action: {\n      dataField: 'action',\n      text: `${intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.ACTION_COLUMN'})}`,\n      formatter: ActionsColumnFormatter,\n      formatExtraData: {\n        intl,\n        onShowDetail: (entity: PurchaseOrderModel) => {\n          get(entity);\n          setShowDetail(true);\n        },\n        onDelete: (entity: PurchaseOrderModel) => {\n          setDeleteEntity(entity);\n          setShowDelete(true);\n        },\n        onEdit: (entity: PurchaseOrderModel) => {\n          get(entity);\n          setShowEdit(true);\n          setEditEntity(entity);\n          // history.push(`${window.location.pathname}/${entity.code}`);\n        },\n      },\n      ...NormalColumn,\n      style: {minWidth: '130px'},\n    },\n  };\n  \n  const masterEntityDetailDialog = [\n    {\n      header: 'THÔNG TIN 1',\n      data: {\n        code: {title: 'PURCHASE_ORDER.MASTER.TABLE.CODE_COLUMN'},\n        agencyAddress: {title: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN'},\n        phoneNumber: {title: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN'},\n      },\n    },\n    {\n      header: 'THÔNG TIN 2',\n      data: {\n        code: {title: 'PURCHASE_ORDER.MASTER.TABLE.CODE_COLUMN'},\n        agencyAddress: {title: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN'},\n        phoneNumber: {title: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN'},\n      },\n    },\n    {\n      header: 'THÔNG TIN 3',\n      data: {\n        code: {title: 'PURCHASE_ORDER.MASTER.TABLE.CODE_COLUMN'},\n        agencyAddress: {title: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN'},\n        phoneNumber: {title: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN'},\n      },\n    },\n  ];\n  \n  const purchaseOrderSearchModel: SearchModel = {\n    code: {\n      type: 'search-select',\n      placeholder: 'PURCHASE_ORDER.MASTER.HEADER.CODE.PLACEHOLDER',\n      label: 'PURCHASE_ORDER.MASTER.HEADER.CODE.LABEL',\n      onSearch: GetAll,\n      keyField: 'code',\n    },\n    agencyAddress: {\n      type: 'search-select',\n      placeholder: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      label: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      onSearch: GetAll,\n      keyField: 'agencyAddress',\n    },\n    date: {\n      type: 'date-time',\n      placeholder: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      label: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      onSearch: GetAll,\n      keyField: 'agencyAddress',\n    },\n    agency: {\n      type: 'search-select',\n      placeholder: 'PURCHASE_ORDER.MASTER.HEADER.NAME.PLACEHOLDER',\n      label: 'PURCHASE_ORDER.MASTER.HEADER.NAME.LABEL',\n      onSearch: AgencyService.GetAll,\n      keyField: 'name',\n    },\n    count: {\n      type: 'number',\n      placeholder: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      label: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      onSearch: GetAll,\n      keyField: 'count',\n    },\n    tree: {\n      type: 'tree-select',\n      placeholder: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      label: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      keyField: 'code',\n      // data: ConvertToTreeNode(DataExample),\n    },\n    tree2: {\n      type: 'tree-select',\n      placeholder: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      label: 'PURCHASE_ORDER.MASTER.TABLE.AGENCY_ADDRESS_COLUMN',\n      keyField: 'code',\n      // data: ConvertToTreeNode(DataExample),\n    },\n  };\n  \n  const modifyModel = [\n    {\n      title: 'Test',\n      data: {\n        // code: {\n        //   type: 'string',\n        //   placeholder: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.PLACEHOLDER' }),\n        //   label: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.LABEL' }),\n        //   required: true,\n        //   disabled: !!editEntity,\n        // },\n        // agencyAddress: {\n        //   type: 'string',\n        //   placeholder: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.NAME.PLACEHOLDER' }),\n        //   required: true,\n        //   label: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.NAME.LABEL' }),\n        // },\n        phoneNumber: {\n          type: 'string',\n          placeholder: intl.formatMessage({\n            id: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN',\n          }),\n          required: true,\n          label: intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN'}),\n        },\n        image: {\n          type: 'image',\n          placeholder: intl.formatMessage({id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.LABEL'}),\n          label: 'Album 1',\n        },\n        // image2: {\n        //   type: 'image',\n        //   placeholder: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.LABEL' }),\n        //   label: 'Album 2',\n        // },\n        agency: {\n          type: 'object',\n          data: {\n            name: {\n              type: 'string',\n              label: 'Name',\n              placeholder: 'Name',\n            },\n            name2: {\n              type: 'string',\n              label: 'Name2',\n              placeholder: 'Name2',\n            },\n            taxId: {\n              type: 'object',\n              data: {\n                taxName: {\n                  type: 'string',\n                  label: 'Taxcc',\n                  placeholder: 'Taxcc',\n                },\n                taxNumber: {\n                  type: 'string',\n                  label: 'Taxfds',\n                  placeholder: 'Tafdsx',\n                },\n              },\n            },\n          },\n        },\n        staff: {\n          type: 'tag',\n          label: 'Nhân viên',\n          placeholder: 'Nhân viên',\n        },\n      },\n    },\n    // {\n    //   title: 'Test222',\n    //   data: {\n    //     test1: {\n    //       type: 'string',\n    //       placeholder: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.PLACEHOLDER' }),\n    //       label: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.CODE.LABEL' }),\n    //       disabled: !!editEntity,\n    //     },\n    //     test2: {\n    //       type: 'string',\n    //       placeholder: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.NAME.PLACEHOLDER' }),\n    //       label: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.HEADER.NAME.LABEL' }),\n    //     },\n    //     test3: {\n    //       type: 'string',\n    //       placeholder: intl.formatMessage({\n    //         id: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN',\n    //       }),\n    //       label: intl.formatMessage({ id: 'PURCHASE_ORDER.MASTER.TABLE.PHONE_NUMBER_COLUMN' }),\n    //     },\n    //   },\n    // },\n  ];\n  \n  const modifyModel_3 = [\n    {\n      title: '',\n      data: {\n        time: {\n          type: 'date-time',\n          placeholder: 'Thời gian thu hoạch',\n          label: 'Thời gian thu hoạch',\n          required: true,\n        },\n        time2: {\n          type: 'date-time',\n          placeholder: 'Thời gian thu hoạch2',\n          label: 'Thời gian thu hoạch2',\n        },\n        quantity: {\n          type: 'number',\n          label: 'Sản lượng thu hoạch (kg)',\n          placeholder: 'Sản lượng',\n          required: true,\n        },\n        imageDetail: {\n          type: 'gallery',\n          label: 'Image Gallery',\n        },\n      },\n    },\n  ];\n  \n  const modifyModel_2 = [\n    {\n      director: {\n        type: 'string',\n        label: 'Thông tin giám đốc',\n        placeholder: 'Thông tin giám đốc',\n      },\n      leader: {\n        type: 'string',\n        label: 'Tổ trưởng gieo trồng',\n        placeholder: 'Tổ trưởng gieo trồng',\n      },\n    },\n  ];\n  \n  const modifyModel_4 = [\n    {\n      test4: {\n        type: 'string',\n        label: 'Test 4',\n        placeholder: 'Test 4',\n      },\n      test5: {\n        type: 'string',\n        label: 'Test 5',\n        placeholder: 'Test 5',\n      },\n    },\n    {\n      test6: {\n        type: 'string',\n        label: 'Test 6',\n        placeholder: 'Test 6',\n      },\n      test7: {\n        type: 'string',\n        label: 'Test 7',\n        placeholder: 'Test 7',\n      },\n      test8: {\n        type: 'string',\n        label: 'Test 8',\n        placeholder: 'Test 8',\n      },\n    },\n  ];\n  \n  const formPart: any = {\n    form_1: {\n      title: '',\n      modifyModel: modifyModel,\n      header: 'ĐƠN HÀNG',\n    },\n    // form_2: {\n    //   title: 'Thông tin quản trị',\n    //   modifyModel: modifyModel_2,\n    // },\n    form_3: {\n      title: 'Thông tin thu hoạch',\n      modifyModel: modifyModel_3,\n    },\n    // form_4: {\n    //   title: 'Thông tin test',\n    //   modifyModel: modifyModel_4,\n    // },\n    // form_5: {\n    //   title: \"xxx\",\n    //   modifyModel: modifyModel_2\n    // }\n  };\n  \n  const allFormField: any = {\n    ...GenerateAllFormField(\n      modifyModel,\n      modifyModel_3,\n      // , modifyModel_2, modifyModel_3, modifyModel_4\n    ),\n  };\n  \n  console.log(allFormField);\n  \n  const allFormButton: any = {\n    save: {\n      role: 'submit',\n      type: 'submit',\n      linkto: undefined,\n      className: 'btn btn-primary mr-2',\n      label: 'SAVE_BTN_LABEL',\n      icon: <SaveOutlinedIcon/>,\n    },\n    cancel: {\n      role: 'link-button',\n      type: 'button',\n      linkto: '/purchase-order',\n      className: 'btn btn-outline-primary mr-2',\n      label: 'CANCEL_BTN_LABEL',\n      icon: <CancelOutlinedIcon/>,\n    },\n    test: {\n      role: 'button',\n      type: 'button',\n      linkto: undefined,\n      className: 'btn btn-outline-primary',\n      label: 'Test',\n      icon: <CancelOutlinedIcon/>,\n    },\n  };\n  \n  const location = {\n    latitude: 21.027763,\n    longitude: 105.83416,\n  };\n  \n  return (\n    <Fragment>\n      <MasterEntityDetailDialog\n        show={showDetail}\n        entity={detailEntity}\n        renderInfo={masterEntityDetailDialog}\n        onHide={() => {\n          setShowDetail(false);\n        }}\n      />\n      <DeleteEntityDialog\n        moduleName={moduleName}\n        entity={deleteEntity}\n        loading={loading}\n        onDelete={deleteFn}\n        isShow={showDelete}\n        onHide={() => {\n          setShowDelete(false);\n        }}\n      />\n      <DeleteManyEntitiesDialog\n        moduleName={moduleName}\n        selectedEntities={selectedEntities}\n        loading={loading}\n        isShow={showDeleteMany}\n        onDelete={deleteMany}\n        onHide={() => {\n          setShowDeleteMany(false);\n        }}\n      />\n      {/* <ModifyEntityDialog\n        isShow={showCreate}\n        entity={createEntity}\n        onModify={add}\n        title={createTitle}\n        modifyModel={modifyModel}\n        onHide={() => {\n          setShowCreate(false);\n        }}\n      />*/}\n      <ModifyEntityDialog\n        show={showEdit}\n        entity={editEntity}\n        onModify={update}\n        formModel={formPart}\n        actions={allFormButton}\n        validation={PurchaseOrderSchema}\n        onHide={() => {\n          setShowEdit(false);\n        }}\n      />\n      <Switch>\n        <Redirect from=\"/purchase-order/edit\" to=\"/purchase-order\"/>\n        \n        <Route path=\"/purchase-order/new\">\n          {/* <ModifyEntityPage\n            entity={createEntity}\n            onModify={add}\n            title={createTitle}\n            modifyModel={modifyModel}\n            reduxModel=\"purchaseOrder\"\n            code={null}\n            get={() => null}\n          /> */}\n          <EntityCrudPage\n            entity={createEntity}\n            onModify={add}\n            //  modifyModel={modifyModel}\n            get={() => null}\n            formModel={formPart}\n            // allFormField={allFormField}\n            actions={allFormButton}\n            validation={PurchaseOrderSchema}\n          />\n        </Route>\n        {/* <Route path={`/purchase-order/:code`}>\n          {({ history, match }) => (\n            // <ModifyEntityPage\n            //   entity={editEntity}\n            //   onModify={update}\n            //   title={updateTitle}\n            //   modifyModel={modifyModel}\n            //   reduxModel=\"purchaseOrder\"\n            //   code={match?.params.code}\n            //   get={PurchaseOrderService.GetById}\n            // />\n            <EntityCrudPage\n              entity={editEntity}\n              onModify={update}\n              title={updateTitle}\n              //  modifyModel={modifyModel}\n              reduxModel=\"purchaseOrder\"\n              code={match?.params.code}\n              get={PurchaseOrderService.GetById}\n              formPart={formPart}\n              allFormField={allFormField}\n              allFormButton={allFormButton}\n              validation={PurchaseOrderSchema}\n            />\n          )}\n        </Route> */}\n        <Route path=\"/purchase-order\">\n          <MasterHeader\n            title={headerTitle}\n            onSearch={value => {\n              setPaginationProps({...DefaultPagination, page: 1});\n              console.log(paginationProps);\n              setFilterProps(value);\n            }}\n            searchModel={purchaseOrderSearchModel}\n            initValue={{\n              code: {label: 'ccc', value: 'cccc'},\n              agencyAddress: null,\n              agency: null,\n              date: '',\n              count: 15,\n              tree: undefined,\n              tree2: undefined,\n            }}\n          />\n          <MasterBody\n            onCreate={() => {\n              setCreateEntity(null);\n              setEditEntity(null);\n              // setShowCreate(true);\n              history.push(`${window.location.pathname}/new`);\n            }}\n            onDeleteMany={() => setShowDeleteMany(true)}\n            selectedEntities={selectedEntities}\n            onSelectMany={setSelectedEntities}\n            entities={entities}\n            total={total}\n            columns={columns as any}\n            loading={loading}\n            paginationParams={paginationProps}\n            setPaginationParams={setPaginationProps}\n            isShowId={true}\n          />\n          \n          {/* <MasterGoogleMap location={location} /> */}\n          \n          {/* <MasterMap /> */}\n          <GalleryImage/>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default PurchaseOrder;\n"],"sourceRoot":""}