{"version":3,"sources":["../node_modules/@material-ui/icons/AccountCircleOutlined.js","app/pages/post/post-comments.tsx","app/common-library/common-components/entity-crud-page.tsx","app/pages/user/user.service.tsx","app/pages/post/post.service.tsx","app/pages/post/post.tsx"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","PostComments","entity","onComments","valueRef","useRef","useState","comments","commentsArr","setCommentArr","useEffect","className","map","key","style","fontSize","_","isString","createdBy","fullName","content","TextareaAutosize","rowsMin","aria-label","ref","placeholder","onClick","error","current","comment","then","res","data","catch","err","handleComment","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","EntityCrudPage","onModify","moduleName","code","get","formModel","actions","validation","loading","mode","setEditEntity","homePageUrl","allFormButton","showComment","intl","useIntl","history","useHistory","initValues","useMemo","InitValues","entityForEdit","setEntityForEdit","_header","modifyPanels","console","log","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","validateForm","push","GetHomePage","window","location","pathname","handleSubmit","setFieldValue","keys","index","val","Error","JSON","stringify","_title","panel","title","goBack","formatMessage","id","toUpperCase","inputGroups","type","keyss","role","icon","label","to","linkto","length","Spinner","animation","variant","size","confirmationStatus","isMaster","API_URL","API_BASE_URL","BULK_API_URL","Create","axios","post","GetAll","queryProps","sortList","paginationProps","params","Count","GetById","_id","Get","Update","put","Delete","delete","DeleteMany","entities","Approve","Comments","PostTypeStatus","name","GetType","Promise","resolve","reject","totalData","filter","arr","some","query","toLowerCase","indexOf","sort","GetCompareFunction","sortBy","orderType","sortType","slice","page","limit","paging","total","success","Post","InitMasterProps","getServer","countServer","createServer","deleteServer","deleteManyServer","getAllServer","updateServer","deleteEntity","setDeleteEntity","editEntity","createEntity","selectedEntities","setSelectedEntities","detailEntity","showDelete","setShowDelete","showDetail","showEdit","setShowEdit","showCreate","setShowCreate","setDetailEntity","setShowDetail","showDeleteMany","setShowDeleteMany","setPaginationProps","filterProps","setFilterProps","add","setError","update","deleteMany","deleteFn","getAll","notifySuccess","userInfo","useSelector","auth","Yup","shape","canModifyPost","includes","adminAllFormButton","approve","status","PostService","HomePageURL","DefaultPagination","refuse","save","iconStyle","cancel","columns","faculty","dataField","text","SortColumn","category","date_upload","formatter","input","_format","action","ActionsColumnFormatter","formatExtraData","onShowDetail","onDelete","onEdit","NormalColumn","minWidth","masterEntityDetailDialog","dataClassName","file","path","split","nameFile","join","DisplayDownloadLink","description","image","images","width","height","initSearchModel","user","onSearch","UserService","keyField","CategoryService","selectField","searchModel","_subTitle","_type","disabled","required","maxNumber","isArray","condition","group1","modifyModel","commonInfo","_className","_inputClassName","trueFalse","true","false","createForm","panel1","updateForm","createPostFunction","onDeleteManyFunction","from","match","cvValue","parse","onCreate","onDeleteMany","onSelectMany","paginationParams","setPaginationParams","isShowId","show","renderInfo","onHide","isShow"],"mappings":"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","file":"static/js/26.84cf5973.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM7.07 18.28c.43-.9 3.05-1.78 4.93-1.78s4.51.88 4.93 1.78C15.57 19.36 13.86 20 12 20s-3.57-.64-4.93-1.72zm11.29-1.45c-1.43-1.74-4.9-2.33-6.36-2.33s-4.93.59-6.36 2.33C4.62 15.49 4 13.82 4 12c0-4.41 3.59-8 8-8s8 3.59 8 8c0 1.82-.62 3.49-1.64 4.83zM12 6c-1.94 0-3.5 1.56-3.5 3.5S10.06 13 12 13s3.5-1.56 3.5-3.5S13.94 6 12 6zm0 5c-.83 0-1.5-.67-1.5-1.5S11.17 8 12 8s1.5.67 1.5 1.5S12.83 11 12 11z\"\n}), 'AccountCircleOutlined');\n\nexports.default = _default;","import React from 'react';\nimport { Card, CardBody } from '../../common-library/card';\nimport { TextareaAutosize } from '@material-ui/core';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AxiosResponse } from 'axios';\nimport _ from 'lodash';\n\nconst notifyError = (error: string) => {\n  toast.error(error, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nconst PostComments = ({\n                                  entity,\n                                  onComments,\n                                }: {\n  entity?: any;\n  onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n}) => {\n  const valueRef = React.useRef<any>({ value: '' });\n  const [commentsArr, setCommentArr] = React.useState(entity?.comments || []);\n\n  React.useEffect(() => {\n    if (entity) {\n      setCommentArr(entity.comments)\n    }\n  }, [entity])\n\n  const handleComment = (entity: any, comment: any) => {\n    if (onComments && entity) {\n      onComments(entity, comment)\n          .then(res => {\n            setCommentArr(res.data);\n            // setComment({ content: '' });\n            valueRef.current.value = '';\n          })\n          .catch(err => {\n            throw err;\n          });\n    }\n  };\n\n  return (\n      <Card>\n        <CardBody>\n          <div className=\"pl-xl-15 pl-md-10 pl-5 mb-5\">\n            <span className=\"modify-subtitle text-primary mt-8\">COMMENTS</span>\n            <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n              {//entityForEdit.comments\n                // [\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                // ]\n                commentsArr?.map(\n                    (\n                        value: { createdBy: { _id: string; fullName: string }; content: string },\n                        key: number,\n                    ) => (\n                        <div key={key} className=\"row mb-3\">\n                          <div className=\"col-1 text-center\">\n                            <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                          </div>\n                          <div className=\"col-10 bg-light rounded p-3\">\n                            <p className=\"font-bold\">\n                              {_.isString(value.createdBy)\n                                  ? value.createdBy\n                                  : value.createdBy.fullName\n                                      ? value.createdBy.fullName\n                                      : 'Anonymous'}\n                            </p>\n                            <p>{value.content}</p>\n                          </div>\n                        </div>\n                    ),\n                )}\n              <div className=\"row\">\n                <div className=\"col-1\"></div>\n                <div className=\"col-10\">\n                  <div className=\"row\">\n                    <div className=\"col-11\">\n                      <TextareaAutosize\n                          className=\"form-control\"\n                          rowsMin={1}\n                          aria-label=\"empty textarea\"\n                          ref={valueRef}\n                          placeholder=\"Write comment...\"\n                      />\n                    </div>\n                    <div className=\"col-1\">\n                      <button\n                          className=\"btn btn-primary pl-11 pr-11\"\n                          onClick={() => {\n                            if (valueRef.current.value !== '') {\n                              handleComment(entity, { content: valueRef.current.value });\n                            } else {\n                              notifyError('Comment is empty!');\n                            }\n                          }}>\n                        Sent\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n  );\n};\n\nexport default PostComments;\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {Form, Formik} from 'formik';\nimport {Link, useHistory} from 'react-router-dom';\nimport {Card, CardBody, CardHeader} from '../card';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport {ModifyForm} from '../common-types/common-type';\nimport _ from 'lodash';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {GetHomePage, InitValues} from \"../helpers/common-function\";\nimport {Spinner} from \"react-bootstrap\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PostComments from \"../../pages/post/post-comments\";\nimport {AxiosResponse} from \"axios\";\n\nfunction EntityCrudPage({\n                          entity,\n                          onModify,\n                          moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                          code,\n                          get,\n                          formModel,\n                          actions,\n                          validation,\n                          loading,\n                          mode,\n                          setEditEntity,\n                          homePageUrl,\n                            allFormButton,\n                            onComments,\n                            showComment = true\n                        }: {\n  // modifyModel: ModifyModel;\n  moduleName?: string;\n  entity?: any;\n  onModify: (values: any) => Promise<any>;\n  code?: string;\n  get?: (code: string) => any;\n  formModel: ModifyForm;\n  mode?: 'horizontal' | 'vertical';\n  actions?: any;\n  validation?: any;\n  autoFill?: any;\n  loading?: boolean;\n  setEditEntity?: (entity: any) => void;\n  homePageUrl?: string\n    allFormButton?: any;\n    onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n    showComment?: boolean;\n}) {\n  const intl = useIntl();\n  const history = useHistory();\n  const initValues = useMemo(() => InitValues(formModel), [formModel]);\n\n  const [entityForEdit, setEntityForEdit] = useState(entity);\n  useEffect(()=>{\n    entity && setEntityForEdit(entity);\n  }, [entity])\n\n  useEffect(() => {\n    if (!code && !entity) setEntityForEdit(initValues);\n  }, [initValues, code]);\n  const {_header, ...modifyPanels} = formModel;\n  \n  useEffect(() => {\n    if (code) {\n      get &&\n      get(code).then((res: { data: any }) => {\n        setEntityForEdit({...res.data});\n        if (setEditEntity) { setEditEntity(res.data) }\n      });\n    }\n  }, [code]);\n\n  console.log(entityForEdit)\n  \n  return (\n    <>\n      <Formik\n        enableReinitialize={true}\n        initialValues={entityForEdit}\n        validationSchema={validation}\n        onSubmit={(values, {setSubmitting, validateForm}) => {\n          console.log(values)\n          onModify(values).then(() => {\n            history.push(homePageUrl ?? GetHomePage(window.location.pathname))\n          }).catch((err) => {\n            // setSubmitting(false);\n          });\n        }}>\n        {({handleSubmit, setFieldValue}) => (\n          <>\n            <Form className=\"form form-label-right\">\n              {Object.keys(modifyPanels).map((key, index, keys) => {\n                const val = modifyPanels[key];\n                if (_.isString(val))\n                  throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(modifyPanels));\n                const {_title, ...panel} = val;\n                return (\n                  <Card key={`entity-crud-card` + key} className={'modify-page'}>\n                    <CardHeader\n                      className={'border-bottom-0'}\n                      title={\n                        index == 0 ? (\n                          <a\n                            onClick={() => history.goBack()}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {_.isString(_header) ? intl\n                              .formatMessage(\n                                {id: _header},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase() : _header(entityForEdit)}\n                          </a>\n                        ) : (\n                          <>\n                            {intl\n                              .formatMessage(\n                                {id: _title},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase()}\n                          </>\n                        )\n                      }\n                    />\n                    <CardBody>\n                      <ModifyEntityPage\n                        mode={mode}\n                        // className={formPart[key].className}\n                        // images={images}\n                        inputGroups={panel}\n                      />\n                    {allFormButton && allFormButton.type === 'outside' && (\n                        <div className=\"text-right mt-10\">\n                            {Object.keys(allFormButton.data).map(keyss => {\n                                switch (allFormButton['data'][keyss].role) {\n                                    case 'submit':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick();\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n\n                                    case 'special':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'button':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}\n                                                onClick={() => {\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'link-button':\n                                        return (\n                                            <Link to={allFormButton['data'][keyss].linkto} key={keyss}>\n                                                <button\n                                                    type={allFormButton['data'][keyss].type}\n                                                    className={allFormButton['data'][keyss].className}>\n                                                    {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                                </button>\n                                            </Link>\n                                        );\n                                }\n                            })}\n                        </div>\n                    )}\n                      {(actions && index === Object.keys(modifyPanels).length - 1) && (\n                        <div className=\"text-right mt-10\" key={key}>\n                          {Object.keys(actions.data).map(keyss => {\n                            switch (actions.data[keyss].role) {\n                              case 'submit':\n                                return (\n                                  <button\n                                    className={actions.data[keyss].className}\n                                    key={keyss}\n                                    type={'submit'}\n                                  >\n                                    {loading === true ? actions.data[keyss].loading ?? (\n                                      <Spinner animation=\"border\" variant=\"light\"\n                                               size=\"sm\"/>) : actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              \n                              case 'button':\n                                return (\n                                  <button\n                                    type={actions.data[keyss].type}\n                                    className={actions.data[keyss].className}\n                                    key={keyss}>\n                                    {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              case 'link-button':\n                                return (\n                                  <Link to={actions.data[keyss].linkto} key={keyss}>\n                                    <button\n                                      type={actions.data[keyss].type}\n                                      className={actions.data[keyss].className}>\n                                      {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                    </button>\n                                  </Link>\n                                );\n                            }\n                          })}\n                        </div>)\n                      }\n                    </CardBody>\n                  </Card>\n                );\n              })}\n\n            </Form>\n              {showComment !== true || !onComments ? <></> : (entityForEdit?.confirmationStatus === '3'\n                  || (entityForEdit?.isMaster === true && entityForEdit?.confirmationStatus === '2')) ? (\n                  <Card>\n                      <CardBody className={'p-0'}>\n                          <div className=\"mb-5 mt-5\">\n                              <span className=\"text-primary detail-dialog-subtitle mt-8\">BÌNH LUẬN</span>\n                              <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n                                  {entityForEdit && entityForEdit.comments.length > 0 ? (\n                                      entityForEdit.comments.map(\n                                          (\n                                              value: { createdBy: { _id: string; fullName: string }; content: string },\n                                              key: number,\n                                          ) => (\n                                              <div key={key} className=\"row mb-3\">\n                                                  <div className=\"col-1 text-center\">\n                                                      <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                                                  </div>\n                                                  <div className=\"col-10 bg-light rounded p-3\">\n                                                      <p className=\"font-bold\">{value.createdBy.fullName}</p>\n                                                      <p>{value.content}</p>\n                                                  </div>\n                                              </div>\n                                          ),\n                                      )\n                                  ) : (\n                                      <span>Chưa có bình luận</span>\n                                  )}\n                              </div>\n                          </div>\n                      </CardBody>\n                  </Card>\n              ) : (\n                  <PostComments entity={entityForEdit} onComments={onComments} />\n              )}\n          </>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default EntityCrudPage;\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {UserModel} from \"./user.model\";\nimport {RoleArrayToObject, RoleObjectToArray} from \"../../common-library/helpers/common-function\";\nimport _ from \"lodash\";\n\n\nexport const API_URL = API_BASE_URL + '/user';\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\n// export const Create: CreateProps<any> = (data: any) => {\n//   const sendData = _.cloneDeep(data);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   console.log(sendData)\n//   return axios.post(API_URL, sendData);\n// };\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Count: CountProps<UserModel> = (queryProps) => {\n  return axios.get(`${API_URL}/get/count`, {\n    params: {...queryProps},\n  });\n};\n\n// export const GetById = (id: string) => {\n//   return axios.get(`${API_URL}/${id}`).then(res => {\n//     if (_.isArray(res.data.scopes)) {\n//       let scopeArray = res.data.scopes;\n//       scopeArray = _.isEqual(scopeArray, res.data.addedScope.enable) ? [...scopeArray] : [...scopeArray, ...res.data.addedScope.enable];\n//       scopeArray = scopeArray.filter((s: string) => {\n//         return !res.data.addedScope.disable.some((d: string) => (s === d));\n//       });\n//       res.data.scopes = RoleArrayToObject(scopeArray);\n//     }\n//     console.log(res)\n//     return res;\n//   });\n// };\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\n\nexport const Get: GetProps<UserModel> = (entity) => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\n// export const Update: UpdateProps<any> = (entity) => {\n//   const sendData = _.cloneDeep(entity);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   return axios.put(`${API_URL}/${entity._id}`, sendData);\n// };\n\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {data:entities},\n  });\n};\n\n// export const Delete: DeleteProps<UserModel> = (entity) => {\n//   //Lười sửa nên viết như này cho nhanh\n//   return axios.put(`${API_URL}/${entity._id}`, {...entity, status: '0'});\n// };\n//\n// export const DeleteMany: DeleteManyProps<UserModel> = (entities) => {\n//   return axios.delete(API_URL, {\n//     data: {arrayEntities: entities}\n//   });\n// };\n\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n    ApproveProps,\n    CountProps,\n    CreateProps,\n    DeleteManyProps,\n    DeleteProps,\n    GetAllPropsServer,\n    GetProps,\n    UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {GetCompareFunction} from \"../../common-library/helpers/common-function\";\n\nexport const API_URL = API_BASE_URL + '/post';\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\nexport const API_FILE_URL = API_BASE_URL + '/file';\n\nexport const Approve: ApproveProps<any> = (entity: any, data: any) => {\n    return axios.put(`${API_URL}/${entity._id}`, data);\n};\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                          queryProps,\n                                                          sortList,\n                                                          paginationProps,\n                                                        }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n    // paramsSerializer: ParamsSerializer\n  });\n};\n\nexport const Count: CountProps<any> = ({\n                                                  queryProps,\n                                                  sortList,\n                                                  paginationProps,\n                                                }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\n\nexport const Get: GetProps<any> = entity => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {data:entities},\n  });\n};\n\nexport const Comments = (entity: any, data: any) => {\n    return axios.put(`${API_URL}/${entity._id}/comments`, data);\n};\n\nexport const SentMail = (data: any, status: any) => {\n    return axios.post(`${API_BASE_URL}/mail`, data, status);\n}\n\nexport const PostTypeStatus = [{code: \"1\", name: \"pending\"}, {code: \"2\", name: \"accept\"}, {code: \"3\", name: \"reject\"}];\n\nexport const GetType = ({queryProps, paginationProps}: any): Promise<any> => {\n  console.log(queryProps);\n  return new Promise((resolve, reject) => {\n    const totalData = PostTypeStatus.filter((val, index, arr) => {\n      return Object.values(queryProps).some((query: any) => val.name.toLowerCase().indexOf(query.toLowerCase()) > -1);\n    });\n    const data = totalData.sort(GetCompareFunction({\n      key: paginationProps.sortBy,\n      orderType: paginationProps.sortType === 'asc' ? 1 : -1\n    })).slice((paginationProps.page - 1) * paginationProps.limit, paginationProps.page * paginationProps.limit);\n    // console.log(data);\n    resolve({\n      code: 200,\n      data: {\n        data: data,\n        paging: {page: paginationProps.page, limit: paginationProps.limit, total: totalData.length}\n      },\n      success: true\n    })\n  })\n}","import React, {Fragment, useEffect, useMemo, useState} from 'react';\nimport {Count, Create, Delete, DeleteMany, Get, GetAll,  Update} from './post.service';\nimport {\n  DefaultPagination,\n  HomePageURL,\n  iconStyle,\n  NormalColumn,\n  SortColumn\n} from '../../common-library/common-consts/const';\nimport {ActionsColumnFormatter} from '../../common-library/common-components/actions-column-formatter';\nimport {InitMasterProps,} from '../../common-library/helpers/common-function';\nimport {Redirect, Route, Switch, useHistory} from 'react-router-dom';\nimport {\n  MasterBodyColumns,\n  ModifyForm,\n  ModifyInputGroup, ModifyPanel,\n  RenderInfoDetail,\n  SearchModel\n} from \"../../common-library/common-types/common-type\";\nimport {MasterEntityDetailDialog} from \"../../common-library/common-components/master-entity-detail-dialog\";\nimport {MasterHeader} from \"../../common-library/common-components/master-header\";\nimport {MasterBody} from \"../../common-library/common-components/master-body\";\nimport {DeleteEntityDialog} from \"../../common-library/common-components/delete-entity-dialog\";\nimport DeleteManyEntitiesDialog from \"../../common-library/common-components/delete-many-entities-dialog\";\nimport {DisplayDateTime, DisplayDownloadLink} from \"../../common-library/helpers/detail-helpers\";\nimport {DetailImage} from \"../../common-library/common-components/detail/detail-image\";\nimport EntityCrudPage from \"../../common-library/common-components/entity-crud-page\";\nimport {Spinner} from \"react-bootstrap\";\nimport SaveOutlinedIcon from \"@material-ui/icons/SaveOutlined\";\nimport CancelOutlinedIcon from \"@material-ui/icons/CancelOutlined\";\nimport * as Yup from \"yup\";\nimport {GetById, GetType, PostTypeStatus} from \"./post.service\";\nimport Category from \"../category/category\";\nimport * as CategoryService from \"../category/category.service\";\nimport * as UserService from \"../user/user.service\"\nimport * as PostService from \"../post/post.service\";\nimport {RootStateOrAny, useSelector} from \"react-redux\";\nimport _ from \"lodash\";\n\nfunction Post() {\n  const {\n    entities,\n    intl,\n    deleteEntity,\n    setDeleteEntity,\n    editEntity,\n    setEditEntity,\n    createEntity,\n    selectedEntities,\n    setSelectedEntities,\n    detailEntity,\n    showDelete,\n    setShowDelete,\n    showEdit,\n    setShowEdit,\n    showCreate,\n    setShowCreate,\n    setDetailEntity,\n    showDetail,\n    setShowDetail,\n    showDeleteMany,\n    setShowDeleteMany,\n    paginationProps,\n    setPaginationProps,\n    filterProps,\n    setFilterProps,\n    total,\n    loading,\n    error,\n    setError,\n    add,\n    update,\n    get,\n    deleteMany,\n    deleteFn,\n    getAll,\n    notifySuccess\n  } = InitMasterProps<any>({\n    getServer: Get,\n    countServer: Count,\n    createServer: Create,\n    deleteServer: Delete,\n    deleteManyServer: DeleteMany,\n    getAllServer: GetAll,\n    updateServer: Update,\n  });\n\n  const moduleName = 'POST.MODULE_NAME';\n  const headerTitle = 'POST.MASTER.HEADER.TITLE';\n  const bodyTitle = 'POST.MASTER.BODY.TITLE';\n  const createTitle = 'POST.CREATE.TITLE';\n  const updateTitle = 'POST.EDIT.TITLE';\n  const viewTitle = 'POST.VIEW.TITLE';\n  const userInfo = useSelector(({auth}: { auth: RootStateOrAny }) => auth);\n  const validationSchema = useMemo(() => Yup.object().shape({\n  }), []);\n  const history = useHistory();\n\n  const canModifyPost = ['student','admin'].includes(userInfo.role.role)\n\n  const approve = (entity: any) => {\n    const data = {...entity, status: 'accept'};\n    return PostService.Approve(entity, data);\n  };\n\n  const refuse = (entity: any) => {\n    const data = {...entity, status: 'reject'};\n    return PostService.Approve(entity, data);\n  };\n\n  const adminAllFormButton: any = {\n    type: 'outside',\n    data: {\n      approve: {\n        role: 'special',\n        type: 'button',\n        linkto: undefined,\n        className: 'btn btn-primary mr-8 fixed-btn-width',\n        label: 'Accept',\n        onClick: (entity: any) => {\n          if (entity) {\n            approve(entity)\n                .then(() => {\n                  notifySuccess('Accept successfully');\n                  history.push(HomePageURL.post);\n                  setPaginationProps(DefaultPagination);\n                  setFilterProps({});\n                })\n                .catch(() => {\n                });\n\n          } else {\n            notifySuccess(`Can't access to the server. Please try again`);\n          }\n        },\n      },\n      refuse: {\n        role: 'button',\n        type: 'button',\n        linkto: undefined,\n        className: 'btn btn-outline-primary fixed-btn-width btn-danger',\n        label: 'Reject',\n        onClick: (entity: any) => {\n          if (entity) {\n            refuse(entity)\n                .then(() => {\n                  notifySuccess('Post is rejected');\n                  history.push(HomePageURL.post);\n                  setPaginationProps(DefaultPagination);\n                  setFilterProps({});\n                })\n                .catch(error => {\n                  console.log(error);\n                });\n          } else {\n            notifySuccess(`Can't access to the server. Please try again`);\n          }\n        },\n      },\n    },\n  };\n\n  const actions: any = useMemo(() => ({\n    type: 'inside',\n    data: {\n      save: {\n        role: 'submit',\n        type: 'submit',\n        linkto: undefined,\n        className: 'btn btn-primary mr-8 fixed-btn-width',\n        label: 'SAVE_BTN_LABEL',\n        icon: loading ? (<Spinner style={iconStyle} animation=\"border\" variant=\"light\" size=\"sm\"/>) :\n            (<SaveOutlinedIcon style={iconStyle}/>)\n      },\n      cancel: {\n        role: 'link-button',\n        type: 'button',\n        linkto: '/post',\n        className: 'btn btn-outline-primary fixed-btn-width',\n        label: 'CANCEL_BTN_LABEL',\n        icon: <CancelOutlinedIcon/>,\n      }\n    }\n  }), [loading]);\n\n\n  useEffect(() => {\n    getAll(filterProps);\n    \n  }, [paginationProps, filterProps]);\n  const columns = useMemo((): MasterBodyColumns => ({\n    faculty: {\n      dataField: 'user.faculty.faculty',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.FACULTY'})}`,\n      ...SortColumn,\n    },\n    title: {\n      dataField: 'title',\n      text: `${intl.formatMessage({id: 'POST.MASTER.TABLE.TITLE'})}`,\n      ...SortColumn,\n    },\n    name: {\n      dataField: 'user.fullName',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.STUDENT_NAME'})}`,\n      ...SortColumn,\n    },\n    code: {\n      dataField: 'user.code',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.STUDENT_CODE'})}`,\n      ...SortColumn,\n    },\n    category: {\n      dataField: 'category.category',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.CATEGORY'})}`,\n      ...SortColumn,\n    },\n    date_upload: {\n      dataField: 'date_upload',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.DATE_UPLOAD'})}`,\n      formatter: input => <DisplayDateTime input={input} _format={'dd/MM/yyyy'} />,\n      ...SortColumn,\n    },\n    status: {\n      dataField: 'status',\n      text: `${intl.formatMessage({id: 'POST.MASTER.HEADER.STATUS'})}`,\n      ...SortColumn,\n    },\n    action: {\n      dataField: 'action',\n      text: `${intl.formatMessage({id: 'POST.MASTER.TABLE.ACTION_COLUMN'})}`,\n      formatter: ActionsColumnFormatter,\n      formatExtraData: {\n        intl,\n        onShowDetail: (entity: any) => {\n          get(entity);\n          setShowDetail(true);\n        },\n        onDelete: (entity: any) => {\n          setDeleteEntity(entity);\n          setShowDelete(true);\n        },\n        onEdit: (entity: any) => {\n          history.push(`${window.location.pathname}/${entity._id}`);\n          // get(entity).then(result => {\n          //   setEditEntity(result.data);\n          //   setShowEdit(true);\n          // });\n        },\n      },\n      ...NormalColumn,\n      style: {minWidth: '130px'},\n    },\n  }), []);\n\n  const masterEntityDetailDialog: RenderInfoDetail = useMemo((): RenderInfoDetail => [\n    {\n      className: 'col-md-12 col-12',\n      dataClassName: 'col-md-6 col-12',\n      data: {\n        title: {title: 'POST.MASTER.TABLE.TITLE'},\n        file: {\n          title: 'POST',\n          formatter: (input) => {\n            if (!input) return <></>\n            const [_, ...nameArr] = input.path.split('-');\n            const nameFile = nameArr.join('');\n            return DisplayDownloadLink('/'+input.path, undefined, nameFile)\n          }\n        },\n        'user.faculty.faculty': {\n          title: 'POST.MASTER.HEADER.FACULTY',\n        },\n        'user.fullName': {title: 'POST.MASTER.HEADER.STUDENT_NAME'},\n        'user.code': {title: 'POST.MASTER.HEADER.STUDENT_CODE'},\n        // code: {title: 'POST.MASTER.HEADER.CODE'},\n        'category.category': {title: 'POST.MASTER.HEADER.CATEGORIES'},\n        'academicYear.name': {title: 'POST.MASTER.HEADER.ACADEMIC_YEAR'},\n        date_upload: {\n          title: 'POST.MASTER.HEADER.DATE_UPLOAD',\n          formatter: input => <DisplayDateTime input={input} _format={'dd/MM/yyyy'} />,\n        },\n        status: {title: 'POST.MASTER.HEADER.STATUS'},\n        description: {title: 'POST.MASTER.HEADER.DESCRIPTION'},\n        image: {\n          formatter: (input) => <DetailImage images={input} width={200} height={200}/>\n        },\n      },\n    },\n  ], []);\n\n  const initSearchModel = useMemo<SearchModel>(() => (\n      {\n        title: {\n          type: 'string',\n          label: 'Title',\n        },\n        user: {\n          type: 'search-select',\n          label: 'User',\n          onSearch: UserService.GetAll,\n          keyField: 'code',\n        },\n        date_upload: {\n          type: 'date-time',\n          label: 'Date',\n        },\n        category: {\n          type: 'search-select',\n          label: 'Category',\n          onSearch: CategoryService.GetAll,\n          keyField: 'category',\n        },\n        status: {\n          type: 'search-select',\n          label: 'Status',\n          // onSearch: ({queryProps, paginationProps}) => GetType(PostTypeStatus, {queryProps, paginationProps}),\n          onSearch: GetType,\n          keyField: 'name',\n          selectField: 'code'\n          // onChange: (e, {setFieldValue}) => {\n          //   console.log('onChange')\n          //   setFieldValue('status', e?.status);\n          //   console.log(e?.status)\n          // }\n        },\n      }), []);\n  const [searchModel, setSearchModel] = useState(initSearchModel);\n\n  const [group1, setGroup1] = useState<ModifyInputGroup>({\n    _subTitle: '',\n    user: {\n      _type: 'string',\n      label: 'POST.MASTER.HEADER.USER',\n      disabled: true,\n    },\n    code: {\n      _type: 'string',\n      label: 'POST.MASTER.TABLE.CODE',\n      disabled: true,\n    },\n    title: {\n      _type: 'string',\n      label: 'POST.MASTER.TABLE.TITLE',\n    },\n    category: {\n      _type: 'search-select',\n      label: 'POST.MASTER.HEADER.CATEGORY',\n      onSearch: CategoryService.GetAll,\n      required: true,\n      keyField: 'category',\n    },\n    file: {\n      _type: 'file',\n      label: 'POST',\n      maxNumber: 1,\n      isArray: false,\n    },\n    description: {\n      _type: 'string',\n      label: 'POST.MASTER.TABLE.DESCRIPTION',\n    },\n    image: {\n      _type: 'image',\n      maxNumber: 3,\n      label: 'USER.MODIFY.IMAGE',\n      isArray: true,\n    },\n    condition: {\n      _type: 'checkbox',\n      label: 'POST.MASTER.TABLE.CONDITION',\n    }\n  });\n\n  const modifyModel: ModifyPanel = {\n    _title: '',\n    commonInfo: {\n      _subTitle: 'INFORMATION',\n      _className: 'col-6 pl-xl-15 pl-md-10 pl-5 text-primary',\n      user : {\n        _type: 'object',\n        _inputClassName: 'col-6',\n        _className: 'row mb-5',\n        fullName: {\n          _type: 'string',\n          label: 'POST.MASTER.HEADER.USER',\n          disabled: true,\n        },\n        code: {\n          _type: 'string',\n          label: 'POST.MASTER.HEADER.USER_CODE',\n          // onSearch: UserService.GetAll,\n          disabled: true,\n        },\n      },\n      title: {\n        _type: 'string',\n        label: 'POST.MASTER.TABLE.TITLE',\n      },\n      category: {\n        _type: 'search-select',\n        label: 'POST.MASTER.HEADER.CATEGORY',\n        onSearch: CategoryService.GetAll,\n        required: true,\n        keyField: 'category',\n      },\n      file: {\n        _type: 'file',\n        label: 'FILE',\n        maxNumber: 1,\n        isArray: false,\n      },\n      description: {\n        _type: 'string',\n        label: 'POST.MASTER.TABLE.DESCRIPTION',\n      },\n      image: {\n        _type: 'image',\n        maxNumber: 3,\n        label: 'USER.MODIFY.IMAGE',\n        isArray: true,\n      },\n      condition: {\n        _type: 'boolean',\n        label: 'POST.MASTER.TABLE.CONDITION',\n        trueFalse: {\n          true: '1',\n          false: '0',\n        },\n      }\n    },\n  };\n\n  const createForm = useMemo((): ModifyForm => ({\n    _header: createTitle,\n    panel1: modifyModel,\n  }), [group1]);\n  \n  const updateForm = useMemo((): ModifyForm => ({...createForm, _header: updateTitle}), [createForm]);\n\n  const createPost = () => {\n    // setCreateEntity(initCreateValues);\n    history.push(`${window.location.pathname}/0000000`);\n  }\n  const createPostFunction = canModifyPost ? createPost : undefined\n\n  const onDeleteMany = () => setShowDeleteMany(true)\n  const onDeleteManyFunction = canModifyPost ? onDeleteMany : undefined\n  \n  return (\n    <Fragment>\n      <Switch>\n        <Redirect from={`${HomePageURL.post}/edit`} to={`${HomePageURL.post}`}/>\n        <Route path={`${HomePageURL.post}/0000000`}>\n          <EntityCrudPage\n              mode={\"vertical\"}\n              moduleName={moduleName}\n              onModify={add}\n              formModel={createForm}\n              entity={createEntity}\n              actions={actions}\n              validation={validationSchema}\n              homePageUrl={HomePageURL.post}\n          />\n        </Route>\n        <Route path={`${HomePageURL.post}/:code`}>\n          {({match}) => (\n              <EntityCrudPage\n                  mode={\"vertical\"}\n                  onModify={update}\n                  setEditEntity={setEditEntity}\n                  moduleName={moduleName}\n                  code={match?.params.code}\n                  get={GetById}\n                  formModel={updateForm}\n                  actions={canModifyPost && actions}\n                  validation={validationSchema}\n                  onComments={PostService.Comments}\n                  homePageUrl={HomePageURL.post}\n                  allFormButton={userInfo.role.role === 'coordinator' && adminAllFormButton}\n              />\n          )}\n        </Route>\n        <Route path={`${HomePageURL.post}`}>`\n          <MasterHeader\n            title={headerTitle}\n            onSearch={(value) => {\n              setPaginationProps(DefaultPagination);\n              const cvValue = JSON.parse(JSON.stringify(value));\n              if (value && value.status && !_.isString(value.status)) {\n                cvValue.status = value.status.name;\n              }\n              setFilterProps(cvValue);\n            }}\n            searchModel={searchModel}\n          />\n          <MasterBody\n            title={bodyTitle}\n            onCreate={createPostFunction}\n            onDeleteMany={onDeleteManyFunction}\n            selectedEntities={selectedEntities}\n            onSelectMany={setSelectedEntities}\n            entities={entities}\n            total={total}\n            columns={columns}\n            loading={loading}\n            paginationParams={paginationProps}\n            setPaginationParams={setPaginationProps}\n            isShowId={true}\n          />\n\n          {/* <MasterGoogleMap location={location} /> */}\n          \n          {/* <MasterMap /> */}\n        </Route>\n      </Switch>\n      <MasterEntityDetailDialog\n          title={viewTitle}\n          moduleName={moduleName}\n          show={showDetail}\n          entity={detailEntity}\n          renderInfo={masterEntityDetailDialog}\n          onHide={() => {\n            setShowDetail(false);\n          }}\n      />\n      <DeleteEntityDialog\n          moduleName={moduleName}\n          entity={deleteEntity}\n          onDelete={deleteFn}\n          isShow={showDelete}\n          onHide={() => {\n            setShowDelete(false);\n            setFilterProps({...filterProps});\n          }}\n          loading={loading}\n          error={error}\n      />\n      <DeleteManyEntitiesDialog\n          moduleName={moduleName}\n          selectedEntities={selectedEntities}\n          loading={loading}\n          error={error}\n          isShow={showDeleteMany}\n          onDelete={deleteMany}\n          onHide={() => {\n            setShowDeleteMany(false);\n            setFilterProps({...filterProps});\n          }}\n      />\n    </Fragment>\n  );\n}\n\n\nexport default Post;\n"],"sourceRoot":""}