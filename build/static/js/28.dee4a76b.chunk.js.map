{"version":3,"sources":["app/common-library/common-components/modify-entity-dialog-form.tsx","app/common-library/common-components/modify-entity-dialog.tsx","app/pages/multilevel-sale/multilevel-sale.service.tsx","app/pages/agency/agency.service.tsx","app/pages/agency/agency-shipping-address.tsx","app/pages/agency/agency.tsx"],"names":["ModifyEntityDialogForm","entity","onModify","onHide","moduleName","modifyPanel","validation","loading","intl","useIntl","inputGroups","_title","initValues","useMemo","InitValues","_header","panel1","useState","entityForEdit","setEntityForEdit","useEffect","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","__v","undefined","then","catch","err","handleSubmit","Modal","Body","className","Object","keys","map","key","Fragment","Footer","type","onClick","Spinner","animation","variant","size","style","iconStyle","formatMessage","id","ModifyEntityDialog","show","formModel","panels","aria-labelledby","dialogClassName","Header","closeButton","Title","_","isString","toUpperCase","panel","index","Error","API_URL","API_BASE_URL","API_AGENCY_URL","API_URL_TREE_FORMAT","BULK_API_URL","Create","data","axios","post","GetAll","queryProps","sortList","paginationProps","get","params","GetAgency","agencyParams","Count","Get","_id","Update","put","Delete","delete","DeleteMany","entities","listSpecies","DeleteAgency","storeLevel","GetById","listAgencies","AgencyShippingAddress","onCreate","onEdit","onDelete","showCreate","showEdit","showDelete","editEntity","deleteEntity","state","setState","city","setCity","getCity","useCallback","GetCity","getDistrict","GetDistrict","group1","_subTitle","_type","onSearch","GetState","onChange","value","setFieldValue","setFieldTouched","required","label","disabled","district","address","createForm","updateForm","_create","setShowCreate","_update","setShowUpdate","_delete","setShowDelete","isDefault","title","isShow","AgencyPage","history","useHistory","InitMasterProps","getServer","countServer","createServer","deleteServer","deleteManyServer","getAllServer","updateServer","setEntities","setDeleteEntity","selectedEntities","setEditEntity","createEntity","setCreateEntity","setSelectedEntities","detailEntity","setDetailEntity","showDetail","setShowEdit","setShowDetail","showDeleteMany","setShowDeleteMany","setPaginationProps","filterProps","setFilterProps","total","setTotal","error","setLoading","add","setError","update","deleteMany","deleteFn","getAll","refreshData","columns","code","dataField","text","SortColumn","align","name","formatter","DisplayAddress","NormalColumn","status","TickColumnFormatter","action","ActionsColumnFormatter","formatExtraData","onShowDetail","e","push","window","location","pathname","minWidth","masterEntityDetailDialog","header","row","addressString","phone","fullName","keyField","email","dataClassName","shippingAddress","addresses","find","color","initOwner","setInitOwner","ownerState","setOwnerState","ownerCity","setOwnerCity","managementUnit","setManagementUnit","owner","ManagementUnitService","limit","res","findIndex","RoleService","ress","roleIndex","role","getOwnerCity","console","log","getOwnerDistrict","searchModel","MultilevelSaleService","_className","trueFalse","true","false","taxId","images","labelWidth","optionsClassName","t","v","JSON","stringify","addr","target","options","field","handleChange","handleBlur","display","position","right","top","setDeleteShippingAddress","setDeleteShippingAddressFn","filter","setShowDeleteShippingAddress","setUpdateShippingAddress","setUpdateShippingAddressFn","setShowUpdateShippingAddress","_addShippingAgencyBtn","component","setCreateShippingAddressFn","setShowCreateShippingAddress","showCreateShippingAddress","showUpdateShippingAddress","showDeleteShippingAddress","deleteShippingAddress","updateShippingAddress","createShippingAddressFn","updateShippingAddressFn","deleteShippingAddressFn","group2","username","gender","birthDay","image","isArray","maxNumber","actions","save","linkto","icon","cancel","Yup","shape","max","min","Date","initCreateValues","_init","path","exact","DefaultPagination","onDeleteMany","onSelectMany","paginationParams","setPaginationParams","homePageUrl","HomePageURL","agency","match","AgencyService","renderInfo"],"mappings":"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","file":"static/js/28.dee4a76b.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\nimport {Modal, Spinner} from 'react-bootstrap';\nimport {Form, Formik} from 'formik';\nimport {useIntl} from 'react-intl';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {ModifyPanel} from '../common-types/common-type';\nimport {iconStyle} from '../common-consts/const';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {InitValues} from \"../helpers/common-function\";\n\nfunction ModifyEntityDialogForm<T>({\n                                     entity,\n                                     onModify,\n                                     moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                                     onHide,\n                                     modifyPanel,\n                                     validation,\n                                     loading\n                                   }: {\n  moduleName?: string;\n  entity?: any;\n  onHide: () => void;\n  onModify: (values: any) => Promise<any>;\n  modifyPanel: ModifyPanel;\n  validation: any;\n  loading?: boolean\n}) {\n  const intl = useIntl();\n  const {_title, ...inputGroups} = modifyPanel;\n  const initValues = useMemo(() => InitValues({_header: '', panel1: modifyPanel}), [modifyPanel]);\n  const [entityForEdit, setEntityForEdit] = useState(initValues);\n  \n  useEffect(() => {\n     setEntityForEdit(entity ?? initValues);\n  }, [entity,initValues]);\n  \n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={entityForEdit}\n      validationSchema={validation}\n      onSubmit={(values, {setSubmitting}) => {\n        // console.log(values);\n        onModify({...entity, ...values, __v: undefined}).then(() => {\n          onHide()\n        }).catch((err) => {\n          setSubmitting(false)\n        });\n      }}>\n      {({handleSubmit}) => (\n        <>\n          <Modal.Body className=\"overlay overlay-block cursor-default\">\n            <Form className=\"form form-label-right\">\n              {Object.keys(inputGroups).map(key => (\n                <React.Fragment key={key}>\n                  <ModifyEntityPage inputGroups={inputGroups}/>\n                </React.Fragment>\n              ))}\n            </Form>\n          </Modal.Body>\n          <Modal.Footer className=\"border-top-0 pt-10\">\n            <button\n              type=\"submit\"\n              onClick={() => handleSubmit()}\n              className=\"btn btn-primary fixed-btn-width\">\n              {\n                loading === true ? <Spinner animation=\"border\" variant=\"light\" size=\"sm\"/> :\n                  <SaveOutlinedIcon style={iconStyle}/>\n              }\n              {'\\u00A0'}\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.SAVE_BTN'})}\n            </button>\n            <button\n              type=\"button\"\n              onClick={onHide}\n              className=\"btn btn-outline-primary fixed-btn-width\">\n              <CancelOutlinedIcon style={iconStyle}/>\n              {intl.formatMessage({id: 'COMMON_COMPONENT.MODIFY_DIALOG.CLOSE_BTN'})}\n            </button>\n          </Modal.Footer>\n        </>\n      )}\n    </Formik>\n  );\n}\n\nexport default ModifyEntityDialogForm;\n","import React, {useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ModifyEntityDialogForm from './modify-entity-dialog-form';\nimport {useIntl} from 'react-intl';\nimport {ModifyForm} from \"../common-types/common-type\";\nimport _ from \"lodash\";\nfunction ModifyEntityDialog<T>({\n                                 show,\n                                 onHide,\n                                 entity,\n                                 onModify,\n                                 size = 'sm',\n                                 moduleName = 'COMMON_COMPONENT.DETAIL_DIALOG.MODULE_NAME',\n                                 formModel,\n                                 validation,\n                                 loading\n                               }: {\n  show: boolean;\n  onHide: () => void;\n  entity?: T;\n  moduleName?: string;\n  onModify: (values: any) => Promise<any>;\n  formModel: ModifyForm;\n  size?: 'sm' | 'lg';\n  actions?: any;\n  validation?: any;\n  homePage?: string;\n  error?: { error: string };\n  loading?: boolean;\n}) {\n  const intl = useIntl();\n  const {_header, ...panels} = formModel;\n  return (\n    <Modal\n      size={size}\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"example-modal-sizes-title-lg\"\n      dialogClassName=\"modal-modify\"\n      // style={{width}}\n    >\n      <Modal.Header closeButton className=\"border-bottom-0\">\n        <Modal.Title id=\"example-modal-sizes-title-lg\" className=\"text-primary\">\n          {_.isString(_header) ? intl\n            .formatMessage(\n              {id: _header},\n              {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n            )\n            .toUpperCase() : _header(entity)}\n        </Modal.Title>\n      </Modal.Header>\n      {Object.values(panels).map((panel, index) => {\n        if(_.isString(panel)) throw new Error('Sử dụng sai cách ' + panel);\n        return (<ModifyEntityDialogForm\n          modifyPanel={panel}\n          validation={validation}\n          entity={entity}\n          onHide={onHide}\n          onModify={onModify}\n          key={`tttttttt${index}`}\n          loading={loading}\n        />)\n      })}\n      {/*<MasterEntityDetail data={entity} renderInfo={renderInfo}/>*/}\n     \n    </Modal>\n  );\n}\n\nexport default ModifyEntityDialog;\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\n\nexport const API_URL = API_BASE_URL + '/store-level';\n\nexport const API_AGENCY_URL = API_BASE_URL + '/agency';\n\nexport const API_URL_TREE_FORMAT = API_URL + '/tree'\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\nexport const API_FILE_URL = API_BASE_URL + '/file';\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL_TREE_FORMAT}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n    // paramsSerializer: ParamsSerializer\n  });\n};\n\nexport const GetAgency = ({agencyParams, paginationProps}: any) => {\n  return axios.get(`${API_AGENCY_URL}`, {\n    params: {...agencyParams, ...paginationProps}\n  })\n}\n\nexport const Count: CountProps<any> = ({\n                                         queryProps,\n                                         sortList,\n                                         paginationProps,\n                                       }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Get: GetProps<any> = entity => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {listSpecies: entities},\n  });\n};\n\nexport const DeleteAgency = (entity: any) => {\n  return axios.delete(`${API_AGENCY_URL}/${entity._id}`);\n}","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {AgencyModel} from './agency.model';\n\nexport const API_URL = API_BASE_URL + '/agency';\n\nexport const Create: CreateProps<AgencyModel> = (data: AgencyModel) => {\n  return axios.post(API_URL, { ...data, type: '0' });\n};\n\n// const convertAddress = (address: any) => {\n//   let convertURL: string = `${API_URL}?`\n//\n//   Object.keys(address).forEach((key: string, index: number) => {\n//     convertURL = convertURL + `address.${key}=${address[key]}`\n//\n//     if (index !== Object.keys(address).length - 1) {\n//       convertURL = convertURL + '&'\n//     }\n//   })\n//\n//   return convertURL\n// }\n//\nexport const GetAll: GetAllPropsServer<AgencyModel> = ({queryProps, sortList, paginationProps}) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList, storeLevel: {_id: queryProps?.storeLevel?._id}},\n  });\n};\n\nexport const Count: CountProps<any> = ({\n                                         queryProps,\n                                         sortList,\n                                         paginationProps,\n                                       }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Get: GetProps<AgencyModel> = entity => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\nexport const GetById = (id: string) => {\n  return axios.get(`${API_URL}/${id}`);\n};\n\nexport const Update: UpdateProps<AgencyModel> = (entity: AgencyModel) => {\n  return axios.put(`${API_URL}/${entity._id}`, { ...entity, type: '0' });\n};\n\nexport const Delete: DeleteProps<AgencyModel> = (entity: AgencyModel) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<AgencyModel> = (entities: AgencyModel[]) => {\n  return axios.delete(`${API_URL}/bulk`, {\n    data: {listAgencies: entities},\n  });\n};\n","import React, {Fragment, useCallback, useEffect, useMemo, useState} from \"react\";\nimport {useIntl} from 'react-intl';\n\n\nimport {DeleteEntityDialog} from \"../../common-library/common-components/delete-entity-dialog\";\nimport {ModifyForm, ModifyInputGroup} from \"../../common-library/common-types/common-type\";\nimport {GetCity, GetDistrict, GetState} from \"../address/address.service\";\nimport ModifyEntityDialog from \"../../common-library/common-components/modify-entity-dialog\";\nimport {InitValues} from \"../../common-library/helpers/common-function\";\n\nconst headerTitle = 'AGENCY.MASTER.HEADER.TITLE';\nconst tableTitle = 'SHIPPING_AGENCY.MASTER.TABLE.TITLE';\nconst detailDialogTitle = 'SHIPPING_AGENCY.DETAIL_DIALOG.TITLE';\nconst moduleName = 'AGENCY.MODIFY.SHIPPING_ADDRESS.MODULE_NAME';\nconst deleteDialogBodyTitle = 'SHIPPING_AGENCY.DELETE_DIALOG.BODY_TITLE';\nconst createTitle = 'AGENCY.MODIFY.SHIPPING_ADDRESS.CREATE_TITLE';\nconst updateTitle = 'AGENCY.MODIFY.SHIPPING_ADDRESS.UPDATE_TITLE';\nconst deleteDialogTitle = 'AGENCY.MODIFY.SHIPPING_ADDRESS.DELETE_TITLE';\n\n// const createTitle = 'PURCHASE_ORDER.CREATE.TITLE';\n// const updateTitle = 'PURCHASE_ORDER.UPDATE.TITLE';\nconst bodyTitle = 'AGENCY.MASTER.BODY.TITLE';\n\n\nexport function AgencyShippingAddress({\n                                        onCreate,\n                                        onEdit,\n                                        onDelete,\n                                        showCreate,\n                                        showEdit,\n                                        showDelete,\n                                        editEntity,\n                                        deleteEntity\n                                      }:\n                                        { onCreate: (...props: any) => any, onEdit: (...props: any) => any, onDelete: (...props: any) => any, showCreate: { show: boolean }, showEdit: { show: boolean }, showDelete: { show: boolean }, editEntity: any, deleteEntity: any }) {\n  const intl = useIntl();\n  const [state, setState] = useState<string | null | undefined>(null);\n  const [city, setCity] = useState<string | null | undefined>(null);\n  useEffect(() => {\n    setState(editEntity?.state);\n    setCity(editEntity?.city);\n  }, [editEntity]);\n  const getCity = useCallback(({queryProps, paginationProps}: any): Promise<any> => {\n    return GetCity({queryProps: {...queryProps, state}, paginationProps})\n  }, [state]);\n  const getDistrict = useCallback(({queryProps, paginationProps}: any): Promise<any> => {\n    return GetDistrict({queryProps: {...queryProps, city}, paginationProps})\n  }, [city]);\n  const group1 = useMemo((): ModifyInputGroup => ({\n    _subTitle: '',\n    state: {\n      _type: 'search-select',\n      onSearch: GetState,\n      onChange: (value: any, {setFieldValue, setFieldTouched}: any) => {\n        if (state != value) {\n          setCity(null);\n          setFieldValue('city', '');\n          setFieldTouched('city', false);\n          setFieldValue('district', '');\n          setFieldTouched('district', false);\n        }\n        setState(value);\n      },\n      required: true,\n      label: 'AGENCY.MODIFY.SHIPPING_ADDRESS.STATE',\n    },\n    city: {\n      _type: 'search-select',\n      onSearch: getCity,\n      // selectField: 'code',\n      required: true,\n      onChange: (value: any, {setFieldValue, setFieldTouched}: any) => {\n        if (city != value) {\n          setFieldValue('district', '');\n          setFieldTouched('district', false);\n        }\n        setCity(value);\n      },\n      disabled: (values: any) => {\n        return (values?.state === '');\n      },\n      label: 'AGENCY.MODIFY.SHIPPING_ADDRESS.CITY',\n    },\n    district: {\n      _type: 'search-select',\n      onSearch: getDistrict,\n      // selectField: 'code',\n      required: true,\n      disabled: (values: any) => {\n        return (values?.city === '');\n      },\n      label: 'AGENCY.MODIFY.SHIPPING_ADDRESS.DISTRICT',\n    },\n    address: {\n      _type: 'string',\n      required: true,\n      label: 'AGENCY.MODIFY.SHIPPING_ADDRESS.ADDRESS',\n    },\n  }), [getCity, getDistrict]);\n  const createForm = useMemo((): ModifyForm => ({\n    _header: createTitle,\n    panel1: {\n      _title: '',\n      group1: group1,\n    },\n  }), [group1]);\n  const updateForm = useMemo((): ModifyForm => {\n    return ({...createForm, _header: updateTitle});\n  }, [createForm]);\n  const [_create, setShowCreate] = useState(showCreate?.show);\n  useEffect(() => {\n    setShowCreate(showCreate?.show);\n  }, [showCreate]);\n  \n  const [_update, setShowUpdate] = useState(showEdit?.show);\n  useEffect(() => {\n    // console.log(showEdit);\n    setShowUpdate(showEdit?.show);\n  }, [showEdit]);\n  \n  const [_delete, setShowDelete] = useState(showDelete?.show);\n  useEffect(() => {\n    // console.log(showDelete);\n    setShowDelete(showDelete?.show);\n  }, [showDelete]);\n  const initValues = useMemo(() => ({\n    ...InitValues(createForm),isDefault:false\n  }), []);\n  return (<Fragment>\n    <ModifyEntityDialog\n      entity={initValues}\n      moduleName={moduleName}\n      formModel={createForm}\n      show={_create}\n      onModify={onCreate}\n      onHide={() => {\n        setShowCreate(false);\n      }}\n    />\n    <ModifyEntityDialog\n      moduleName={moduleName}\n      formModel={updateForm}\n      show={_update}\n      entity={editEntity}\n      onModify={onEdit}\n      onHide={() => {\n        setShowUpdate(false);\n      }}\n    />\n    <DeleteEntityDialog\n      moduleName={moduleName}\n      title={deleteDialogTitle}\n      entity={deleteEntity}\n      onDelete={onDelete}\n      isShow={_delete}\n      onHide={() => {\n        setShowDelete(false);\n      }}\n    />\n  </Fragment>)\n}\n","import React, { Fragment, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { InitMasterProps, InitValues } from '../../common-library/helpers/common-function';\n\nimport * as AgencyService from './agency.service';\nimport { Count, Create, Delete, DeleteMany, Get, GetAll, Update } from './agency.service';\nimport { AgencyModel } from './agency.model';\nimport { MasterHeader } from '../../common-library/common-components/master-header';\nimport { MasterBody } from '../../common-library/common-components/master-body';\nimport {\n  ActionsColumnFormatter,\n  TickColumnFormatter,\n} from '../../common-library/common-components/actions-column-formatter';\n\nimport {\n  DefaultPagination,\n  HomePageURL,\n  iconStyle,\n  NormalColumn,\n  SortColumn,\n} from '../../common-library/common-consts/const';\n\nimport { DeleteEntityDialog } from '../../common-library/common-components/delete-entity-dialog';\nimport DeleteManyEntitiesDialog from '../../common-library/common-components/delete-many-entities-dialog';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport * as MultilevelSaleService from '../multilevel-sale/multilevel-sale.service';\nimport * as RoleService from '../role/role.service';\nimport * as ManagementUnitService from '../management-organization/management-organization.service';\nimport {\n  ModifyForm,\n  ModifyInputGroup,\n  RenderInfoDetail,\n  SearchModel,\n} from '../../common-library/common-types/common-type';\nimport { MasterEntityDetailDialog } from '../../common-library/common-components/master-entity-detail-dialog';\nimport { GetCity, GetDistrict, GetState } from '../address/address.service';\nimport EntityCrudPage from '../../common-library/common-components/entity-crud-page';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport { AgencyShippingAddress } from './agency-shipping-address';\nimport * as Yup from 'yup';\nimport AddIcon from '@material-ui/icons/Add';\nimport _ from 'lodash';\nimport { DisplayAddress } from '../../common-library/helpers/detail-helpers';\nimport { Spinner } from 'react-bootstrap';\n\nconst headerTitle = 'AGENCY.MASTER.HEADER.TITLE';\nconst tableTitle = 'SHIPPING_AGENCY.MASTER.TABLE.TITLE';\nconst detailDialogTitle = 'SHIPPING_AGENCY.DETAIL_DIALOG.TITLE';\nconst moduleName = 'AGENCY.MODULE_NAME';\nconst deleteDialogTitle = 'SHIPPING_AGENCY.DELETE_DIALOG.TITLE';\nconst deleteDialogBodyTitle = 'SHIPPING_AGENCY.DELETE_DIALOG.BODY_TITLE';\nconst createTitle = 'SHIPPING_AGENCY.CREATE.HEADER';\nconst updateTitle = 'SHIPPING_AGENCY.UPDATE.HEADER';\n\n// const createTitle = 'PURCHASE_ORDER.CREATE.TITLE';\n// const updateTitle = 'PURCHASE_ORDER.UPDATE.TITLE';\nconst bodyTitle = 'AGENCY.MASTER.BODY.TITLE';\n\nfunction AgencyPage() {\n  const history = useHistory();\n  const intl = useIntl();\n  const {\n    entities,\n    setEntities,\n    deleteEntity,\n    setDeleteEntity,\n    editEntity,\n    setEditEntity,\n    createEntity,\n    setCreateEntity,\n    selectedEntities,\n    setSelectedEntities,\n    detailEntity,\n    setDetailEntity,\n    showDelete,\n    setShowDelete,\n    showEdit,\n    setShowEdit,\n    showCreate,\n    setShowCreate,\n    showDetail,\n    setShowDetail,\n    showDeleteMany,\n    setShowDeleteMany,\n    paginationProps,\n    setPaginationProps,\n    filterProps,\n    setFilterProps,\n    total,\n    setTotal,\n    loading,\n    setLoading,\n    error,\n    setError,\n    add,\n    update,\n    get,\n    deleteMany,\n    deleteFn,\n    getAll,\n    refreshData,\n  } = InitMasterProps<AgencyModel>({\n    getServer: Get,\n    countServer: Count,\n    createServer: Create,\n    deleteServer: Delete,\n    deleteManyServer: DeleteMany,\n    getAllServer: GetAll,\n    updateServer: Update,\n  });\n\n  useEffect(() => {\n    getAll({ ...filterProps, type: '0' });\n  }, [paginationProps, filterProps]);\n\n  const columns = useMemo(() => {\n    return {\n      code: {\n        dataField: 'code',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.CODE_COLUMN' })}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      name: {\n        dataField: 'name',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.NAME_COLUMN' })}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      storeLevel: {\n        dataField: 'storeLevel.name',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.STORE_LEVEL_COLUMN' })}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      address: {\n        dataField: 'address',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.AGENCY_ADDRESS_COLUMN' })}`,\n        formatter: DisplayAddress,\n        ...NormalColumn,\n        align: 'center',\n      },\n      status: {\n        dataField: 'status',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.STATUS_COLUMN' })}`,\n        formatter: TickColumnFormatter,\n        ...SortColumn,\n        align: 'center',\n      },\n      action: {\n        dataField: 'action',\n        text: `${intl.formatMessage({ id: 'AGENCY.MASTER.TABLE.ACTION_COLUMN' })}`,\n        formatter: ActionsColumnFormatter,\n        formatExtraData: {\n          intl,\n          onShowDetail: (entity: AgencyModel) => {\n            get(entity).then(e => {\n              setShowDetail(true);\n            });\n          },\n          onDelete: (entity: AgencyModel) => {\n            setDeleteEntity(entity);\n            setShowDelete(true);\n          },\n          onEdit: (entity: AgencyModel) => {\n            history.push(`${window.location.pathname}/${entity._id}`);\n          },\n        },\n        ...NormalColumn,\n        style: { minWidth: '130px' },\n      },\n    };\n  }, []);\n\n  const masterEntityDetailDialog: RenderInfoDetail = useMemo(\n    (): RenderInfoDetail => [\n      {\n        header: 'AGENCY.DETAIL_DIALOG.SHIPPING.SUBTITLE',\n        className: 'col-7',\n        data: {\n          code: { title: 'AGENCY.DETAIL_DIALOG.SHIPPING.CODE' },\n          name: { title: 'AGENCY.DETAIL_DIALOG.SHIPPING.NAME' },\n          address: {\n            title: 'AGENCY.DETAIL_DIALOG.SHIPPING.ADDRESS',\n            formatter: (address: any, row: any) => {\n              const addressString = `${address.address}, ${address.district}, ${address.city}, ${address.state}`;\n              return <>{addressString}</>;\n            },\n          },\n        },\n      },\n      {\n        header: 'EMPTY',\n        className: 'col-5 pl-xl-15 pl-md-10 pl-5',\n        data: {\n          phone: { title: 'AGENCY.DETAIL_DIALOG.SHIPPING.PHONE_NUMBER' },\n          status: {\n            title: 'AGENCY.DETAIL_DIALOG.SHIPPING.STATUS',\n            formatter: TickColumnFormatter,\n          },\n        },\n      },\n      {\n        header: 'AGENCY.DETAIL_DIALOG.OWNER.SUBTITLE',\n        className: 'col-7',\n        data: {\n          fullName: {\n            title: 'AGENCY.DETAIL_DIALOG.OWNER.FULL_NAME',\n            keyField: 'owner.fullName',\n          },\n          email: {\n            title: 'AGENCY.DETAIL_DIALOG.OWNER.EMAIL',\n            keyField: 'owner.email',\n          },\n          phone: {\n            title: 'AGENCY.DETAIL_DIALOG.OWNER.PHONE_NUMBER',\n            keyField: 'owner.phone',\n          },\n        },\n      },\n      {\n        header: 'AGENCY.DETAIL_DIALOG.SHIPPING_ADDRESS',\n        className: 'col-12',\n        dataClassName: 'col-12',\n        data: {\n          shippingAddress: {\n            keyField: 'shippingAddress',\n            formatter: (addresses: any[], row: any) => {\n              let address = addresses.find(address => address.isDefault);\n              address = address ?? addresses[0];\n\n              if (!address) return <></>\n\n              const addressString = `${address.address}, ${address.district}, ${address.city}, ${address.state}`;\n              return (\n                <>\n                  {addressString}\n                  <span style={{ color: '#B5B5C3' }} className={'ml-5'}>\n                    [{intl.formatMessage({ id: 'AGENCY.VIEW.LABEL.DEFAULT_SHIPPING_ADDRESS' })}]\n                  </span>\n                </>\n              );\n            },\n          },\n        },\n      },\n    ],\n    [],\n  );\n\n  const [initOwner, setInitOwner] = useState({})\n  const [state, setState] = useState<string | null | undefined>(null);\n  const [city, setCity] = useState<string | null | undefined>(null);\n  const [ownerState, setOwnerState] = useState<string | null | undefined>(null);\n  const [ownerCity, setOwnerCity] = useState<string | null | undefined>(null);\n  const [managementUnit, setManagementUnit] = useState<any>(null);\n  const [role, setRole] = useState<any>(null);\n\n  useEffect(() => {\n    setState(editEntity?.address?.state);\n    setCity(editEntity?.address?.city);\n    setOwnerState(editEntity?.owner?.address?.state);\n    setOwnerCity(editEntity?.owner?.address?.city);\n  }, [editEntity]);\n\n  useEffect(() => {\n    const owner: any = {}\n    ManagementUnitService.getAll({ queryProps: { ...filterProps }, paginationProps: {...paginationProps, limit: 100} }).then(res => {\n      const index = res.data.data.findIndex(value => (value.name === 'Phòng Bán hàng' || value.code === '00005'))\n      if (index !== -1) {\n        owner.managementUnit = res.data.data[index]\n        RoleService.GetAll({\n          queryProps: { ...filterProps, managementUnit: { ...owner.managementUnit } },\n          paginationProps: {...paginationProps, limit: 100},\n        }).then(ress => {\n          const roleIndex = ress.data.data.findIndex(value => value.name === 'Chủ đơn vị bán hàng')\n          if (roleIndex !== -1) {\n            owner.role = ress.data.data[roleIndex]\n            setInitOwner(owner)\n          }\n        });\n      }\n    })\n  }, [])\n\n  const getCity = useCallback(\n    ({ queryProps, paginationProps }: any): Promise<any> => {\n      return GetCity({ queryProps: { ...queryProps, state }, paginationProps });\n    },\n    [state],\n  );\n  const getDistrict = useCallback(\n    ({ queryProps, paginationProps }: any): Promise<any> => {\n      return GetDistrict({ queryProps: { ...queryProps, city }, paginationProps });\n    },\n    [city],\n  );\n  const getOwnerCity = useCallback(\n    ({ queryProps, paginationProps }: any): Promise<any> => {\n      console.log(ownerState);\n      return GetCity({ queryProps: { ...queryProps, state: ownerState }, paginationProps });\n    },\n    [ownerState],\n  );\n  const getOwnerDistrict = useCallback(\n    ({ queryProps, paginationProps }: any): Promise<any> => {\n      return GetDistrict({ queryProps: { ...queryProps, city: ownerCity }, paginationProps });\n    },\n    [ownerCity],\n  );\n\n  const searchModel: SearchModel = {\n    code: {\n      type: 'string',\n      label: 'AGENCY.MASTER.SEARCH.CODE',\n    },\n    name: {\n      type: 'string',\n      label: 'AGENCY.MASTER.SEARCH.NAME',\n    },\n    storeLevel: {\n      type: 'tree-select',\n      label: 'AGENCY.MASTER.SEARCH.STORE_LEVEL',\n      onSearch: ({ queryProps, sortList, paginationProps }) => {\n        return MultilevelSaleService.GetAll({ queryProps }).then(e => {\n          return e.data;\n        });\n      },\n    },\n    state: {\n      type: 'search-select',\n      label: 'AGENCY.MASTER.SEARCH.STATE',\n      name: 'address.state',\n      onSearch: GetState,\n      onChange: (value: any, { setFieldValue }: any) => {\n        console.log(value);\n        if (state != value) {\n          setCity(null);\n          setFieldValue('address.city', null);\n          setFieldValue('address.district', null);\n        }\n        setState(value);\n      },\n    },\n    city: {\n      type: 'search-select',\n      label: 'AGENCY.MASTER.SEARCH.CITY',\n      name: 'address.city',\n      onSearch: getCity,\n      // selectField: 'code',\n      onChange: (value: any, { setFieldValue }: any) => {\n        if (city != value) {\n          setFieldValue('address.district', null);\n        }\n        setCity(value);\n      },\n      disabled: (values: any) => {\n        return !values.address?.state;\n      },\n    },\n    district: {\n      type: 'search-select',\n      label: 'AGENCY.MASTER.SEARCH.DISTRICT',\n      name: 'address.district',\n      onSearch: getDistrict,\n      // selectField: 'code',\n      disabled: (values: any) => {\n        return !values.address?.city;\n      },\n    },\n  };\n\n  const group1 = useMemo(\n    (): ModifyInputGroup => ({\n      _subTitle: 'AGENCY.MODIFY.GENERAL_INFO',\n      _className: 'col-6 pr-xl-15 pr-md-10 pr-5',\n      code: {\n        _type: 'string',\n        label: 'AGENCY.MODIFY.CODE',\n        disabled: true,\n      },\n      name: {\n        _type: 'string',\n        required: true,\n        label: 'AGENCY.MODIFY.NAME',\n      },\n      storeLevel: {\n        _type: 'tree-select',\n        required: true,\n        label: 'AGENCY.MODIFY.STORE_LEVEL',\n        onSearch: ({ queryProps, sortList, paginationProps }: any) => {\n          return MultilevelSaleService.GetAll({ queryProps }).then(e => {\n            return e.data;\n          });\n        },\n      },\n      address: {\n        _type: 'object',\n        state: {\n          _type: 'search-select',\n          onSearch: GetState,\n          disabled: (values: any) => {\n            console.log(values);\n          },\n          onChange: (value: any, { setFieldValue, setFieldTouched }: any) => {\n            if (state != value) {\n              setCity(null);\n              setFieldValue('address.city', '');\n              setFieldTouched('address.city', false);\n              setFieldValue('address.district', '');\n              setFieldTouched('address.district', false);\n            }\n            setState(value);\n          },\n          required: true,\n          label: 'AGENCY.MODIFY.STATE',\n        },\n        city: {\n          _type: 'search-select',\n          onSearch: getCity,\n          // selectField: 'code',\n          required: true,\n          onChange: (value: any, { setFieldValue, setFieldTouched }: any) => {\n            if (city != value) {\n              setFieldValue('address.district', '');\n              setFieldTouched('address.district', false);\n            }\n            setCity(value);\n          },\n          disabled: (values: any) => {\n            return values?.address?.state === '';\n          },\n          label: 'AGENCY.MODIFY.CITY',\n        },\n        district: {\n          _type: 'search-select',\n          onSearch: getDistrict,\n          // selectField: 'code',\n          required: true,\n          disabled: (values: any) => {\n            return values?.address?.city === '';\n          },\n          label: 'AGENCY.MODIFY.DISTRICT',\n        },\n        address: {\n          _type: 'string',\n          required: true,\n          label: 'AGENCY.MODIFY.ADDRESS',\n        },\n      },\n      status: {\n        _type: 'boolean',\n        label: 'AGENCY.MODIFY.STATUS',\n        trueFalse: {\n          true: '1',\n          false: '0',\n        },\n      },\n      phone: {\n        _type: 'string-number',\n        required: true,\n        label: 'AGENCY.MODIFY.PHONE_NUMBER',\n      },\n      taxId: {\n        _type: 'string-number',\n        required: true,\n        label: 'AGENCY.MODIFY.TAX_NUMBER',\n      },\n      images: {\n        _type: 'image',\n        label: 'AGENCY.MODIFY.IMAGE',\n      },\n      '': {\n        _type: 'object',\n        '': {\n          _type: 'object',\n          _subTitle: 'AGENCY.MODIFY.SHIPPING_ADDRESS',\n          shippingAddress: {\n            _type: 'radio',\n            required: true,\n            label: 'AGENCY.MODIFY.SHIPPING_ADDRESS',\n            labelWidth: 0,\n            optionsClassName: 'col-12 mr-0',\n            value: (value: any) => {\n              const t = _.isString(value) ? null : value?.find((v: any) => v.isDefault);\n              console.log(t);\n              return t ? JSON.stringify(t) : t;\n            },\n            onChange: (e: any, { setFieldValue, values }: any) => {\n              const addresses = values['shippingAddress'];\n              setFieldValue('shippingAddress', [\n                ...addresses.map((addr: any) => ({\n                  ...addr,\n                  isDefault: JSON.stringify(addr) === e.target.value,\n                })),\n              ]);\n            },\n            options: ({ field, values, setFieldValue, setFieldTouched }: any) => {\n              return field.value\n                ? field.value.map((address: any, index: number) => {\n                    return {\n                      label: ({ setFieldValue, handleChange, values, handleBlur }: any) => {\n                        return (\n                          <div>\n                            <div className={'pr-23'} style={{ display: 'inline-block' }}>\n                              {`${address.address}, ${address.district}, ${address.city}, ${address.state}`}\n                            </div>\n                            <span\n                              style={{ position: 'absolute', right: 0, top: 'calc(50% - 15px)' }}>\n                              {ActionsColumnFormatter(\n                                address,\n                                { field, values, setFieldValue, setFieldTouched },\n                                1,\n                                {\n                                  onDelete: () => {\n                                    setDeleteShippingAddress(address);\n                                    setDeleteShippingAddressFn(() => () => {\n                                      const addresses = field.value;\n                                      setFieldValue(\n                                        'shippingAddress',\n                                        addresses.filter(\n                                          (addr: any) =>\n                                            JSON.stringify(addr) !== JSON.stringify(address),\n                                        ),\n                                      );\n                                      setShowDeleteShippingAddress({ show: false });\n                                    });\n                                    setShowDeleteShippingAddress({ show: true });\n                                  },\n                                  onEdit: () => {\n                                    setUpdateShippingAddress(address);\n                                    setUpdateShippingAddressFn(() => (e: any) => {\n                                      field.value[index] = e;\n                                      setFieldValue('shippingAddress', [...field.value]);\n                                      setShowUpdateShippingAddress({ show: false });\n                                    });\n                                    setShowUpdateShippingAddress({ show: true });\n                                  },\n                                  intl,\n                                },\n                              )}\n                            </span>\n                          </div>\n                        );\n                      },\n                      value: JSON.stringify(address),\n                    };\n                  })\n                : [];\n            },\n          },\n        },\n        _addShippingAgencyBtn: {\n          _type: 'custom',\n          component: ({ values, setFieldValue }: any) => {\n            return (\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  setCreateShippingAddressFn(() => (e: any) => {\n                    const addresses = values['shippingAddress'];\n                    setFieldValue('shippingAddress', [e, ...addresses]);\n                    setShowCreateShippingAddress({ show: false });\n                  });\n                  setShowCreateShippingAddress({ show: true });\n                }}>\n                <AddIcon style={iconStyle} />\n                {intl.formatMessage({ id: 'AGENCY.MODIFY.ADD_SHIPPING_ADDRESS' })}\n              </button>\n            );\n          },\n        },\n      },\n    }),\n    [getCity, getDistrict],\n  );\n\n  const [showCreateShippingAddress, setShowCreateShippingAddress] = useState({ show: false });\n  const [showUpdateShippingAddress, setShowUpdateShippingAddress] = useState({ show: false });\n  const [showDeleteShippingAddress, setShowDeleteShippingAddress] = useState({ show: false });\n  const [deleteShippingAddress, setDeleteShippingAddress] = useState({});\n  const [updateShippingAddress, setUpdateShippingAddress] = useState({});\n  const [createShippingAddressFn, setCreateShippingAddressFn] = useState(() => console.log);\n  const [updateShippingAddressFn, setUpdateShippingAddressFn] = useState(() => console.log);\n  const [deleteShippingAddressFn, setDeleteShippingAddressFn] = useState(() => console.log);\n  const group2 = useMemo(\n    (): ModifyInputGroup => ({\n      _subTitle: 'AGENCY.MODIFY.OWNER_INFO',\n      _className: 'col-6 pl-xl-15 pl-md-10 pl-5',\n      // '': {\n      //   _type: 'object',\n        owner: {\n          _type: 'object',\n          code: {\n            _type: 'string',\n            label: 'AGENCY.MODIFY.USER_CODE',\n            disabled: true\n          },\n          username: {\n            _type: 'string',\n            label: 'AGENCY.MODIFY.USER_NAME',\n            required: true,\n          },\n          fullName: {\n            _type: 'string',\n            required: true,\n            label: 'AGENCY.MODIFY.DISPLAY_NAME',\n          },\n          phone: {\n            _type: 'string-number',\n            required: true,\n            label: 'AGENCY.MODIFY.PHONE_NUMBER',\n          },\n          email: {\n            _type: 'email',\n            required: true,\n            label: 'AGENCY.MODIFY.EMAIL',\n          },\n          gender: {\n            _type: 'radio',\n            required: true,\n            options: [\n              { label: 'AGENCY.MODIFY.GENDER_OPTION.MALE', value: '1' },\n              { label: 'AGENCY.MODIFY.GENDER_OPTION.FEMALE', value: '0' },\n            ],\n            label: 'AGENCY.MODIFY.GENDER',\n          },\n          birthDay: {\n            _type: 'date-time',\n            required: true,\n            label: 'AGENCY.MODIFY.DATE_OF_BIRTH',\n          },\n          address: {\n            _type: 'object',\n            state: {\n              _type: 'search-select',\n              onSearch: GetState,\n              disabled: (values: any) => {\n                console.log(values);\n              },\n              onChange: (value: any, { setFieldValue, setFieldTouched }: any) => {\n                if (ownerState != value) {\n                  setOwnerCity(null);\n                  setFieldValue('owner.address.city', '');\n                  setFieldTouched('owner.address.city', false);\n                  setFieldValue('owner.address.district', '');\n                  setFieldTouched('owner.address.district', false);\n                }\n                setOwnerState(value);\n              },\n              required: true,\n              label: 'AGENCY.MODIFY.STATE',\n            },\n            city: {\n              _type: 'search-select',\n              onSearch: getOwnerCity,\n              // selectField: 'code',\n              required: true,\n              onChange: (value: any, { setFieldValue, setFieldTouched }: any) => {\n                if (ownerCity != value) {\n                  setFieldValue('owner.address.district', '');\n                  setFieldTouched('owner.address.district', false);\n                }\n                setOwnerCity(value);\n              },\n              disabled: (values: any) => {\n                return values?.owner?.address?.state === '';\n              },\n              label: 'AGENCY.MODIFY.CITY',\n            },\n            district: {\n              _type: 'search-select',\n              onSearch: getOwnerDistrict,\n              // selectField: 'code',\n              required: true,\n              disabled: (values: any) => {\n                return values?.owner?.address?.city === '';\n              },\n              label: 'AGENCY.MODIFY.DISTRICT',\n            },\n            address: {\n              _type: 'string',\n              required: true,\n              label: 'AGENCY.MODIFY.ADDRESS',\n            },\n          },\n          managementUnit: {\n            _type: 'search-select',\n            label: 'USER.MODIFY.MANAGEMENT_UNIT',\n            keyField: 'name',\n            required: true,\n            onSearch: ManagementUnitService.getAll,\n            onChange: (value: any, { setFieldValue }: any) => {\n              if (managementUnit != value) {\n                setFieldValue('role', null);\n              }\n              setManagementUnit(value);\n            },\n            disabled: true\n          },\n          role: {\n            _type: 'search-select',\n            label: 'USER.MODIFY.ROLE',\n            keyField: 'name',\n            onSearch: ({ queryProps, paginationProps }: any, values: any): Promise<any> => {\n              return RoleService.GetAll({\n                queryProps: { ...queryProps, managementUnit: { ...values?.managementUnit } },\n                paginationProps,\n              });\n            },\n            disabled: true,\n          },\n          image: {\n            _type: 'image',\n            isArray: false,\n            maxNumber: 1,\n            label: 'AGENCY.MODIFY.REPRESENT_IMAGE',\n          },\n        },\n      // },\n    }),\n    [getOwnerCity, getOwnerDistrict, ownerState, ownerCity, managementUnit],\n  );\n\n  const actions: any = useMemo(\n    () => ({\n      type: 'inside',\n      data: {\n        save: {\n          role: 'submit',\n          type: 'submit',\n          linkto: undefined,\n          className: 'btn btn-primary mr-8 fixed-btn-width',\n          label: 'SAVE_BTN_LABEL',\n          icon: loading ? (\n            <Spinner style={iconStyle} animation=\"border\" variant=\"light\" size=\"sm\" />\n          ) : (\n            <SaveOutlinedIcon style={iconStyle} />\n          ),\n        },\n        cancel: {\n          role: 'link-button',\n          type: 'button',\n          linkto: '/agency',\n          className: 'btn btn-outline-primary fixed-btn-width',\n          label: 'CANCEL_BTN_LABEL',\n          icon: <CancelOutlinedIcon />,\n        },\n      },\n    }),\n    [loading],\n  );\n  const createForm = useMemo(\n    (): ModifyForm => ({\n      _header: createTitle,\n      panel1: {\n        _title: '',\n        group1: group1,\n        group2: group2,\n      },\n    }),\n    [group1, group2],\n  );\n  \n  const updateForm = useMemo((): ModifyForm => {\n    return { ...createForm, _header: updateTitle };\n  }, [createForm]);\n\n  const validationSchema = useMemo(\n    () =>\n      Yup.object().shape({\n        phone: Yup.string()\n          .max(11, 'VALIDATE.ERROR.INVALID_INPUT')\n          .min(8, 'VALIDATE.ERROR.INVALID_INPUT'),\n        taxId: Yup.string()\n          .min(10, 'VALIDATE.ERROR.INVALID_INPUT')\n          .max(13, 'VALIDATE.ERROR.INVALID_INPUT'),\n        owner: Yup.object().shape({\n          phone: Yup.string()\n            .max(11, 'VALIDATE.ERROR.INVALID_INPUT')\n            .min(8, 'VALIDATE.ERROR.INVALID_INPUT'),\n          birthDay: Yup.date().max(new Date(), 'VALIDATE.ERROR.MUST_LESS_THAN_TODAY'),\n        }),\n      }),\n    [],\n  );\n  const initCreateValues = useMemo((): any => ({ ...InitValues(createForm), status: '0',}), [\n    createForm,\n  \n  ]);\n\n  const _init = useMemo(() => ({ ...initCreateValues, owner: { ...initCreateValues.owner, ...initOwner } }), [initCreateValues, initOwner])\n\n  return (\n    <Fragment>\n      <AgencyShippingAddress\n        showCreate={showCreateShippingAddress}\n        showEdit={showUpdateShippingAddress}\n        showDelete={showDeleteShippingAddress}\n        onCreate={createShippingAddressFn}\n        onEdit={updateShippingAddressFn}\n        onDelete={deleteShippingAddressFn}\n        editEntity={updateShippingAddress}\n        deleteEntity={deleteShippingAddress}\n      />\n      <DeleteEntityDialog\n        moduleName={moduleName}\n        entity={deleteEntity}\n        onDelete={deleteFn}\n        isShow={showDelete}\n        onHide={() => {\n          setShowDelete(false);\n        }}\n        loading={loading}\n        error={error}\n      />\n      <DeleteManyEntitiesDialog\n        moduleName={moduleName}\n        selectedEntities={selectedEntities}\n        loading={loading}\n        isShow={showDeleteMany}\n        onDelete={deleteMany}\n        onHide={() => {\n          setShowDeleteMany(false);\n        }}\n        error={error}\n      />\n\n      <Switch>\n        {/* <Redirect from=\"/agency/:code\" to=\"/agency\" /> */}\n        <Route path=\"/agency\" exact={true}>\n          {/* <MasterHeader title={headerTitle} onSearch={setFilterProps} searchModel={purchaseOrderSearchModel} */}\n          {/* initValue={filterProps}/> */}\n          <MasterHeader\n            title={headerTitle}\n            onSearch={value => {\n              setPaginationProps(DefaultPagination);\n              setFilterProps(value);\n            }}\n            searchModel={searchModel}\n          />\n          <MasterBody\n            title={bodyTitle}\n            onCreate={() => {\n              history.push(`${window.location.pathname}/new`);\n            }}\n            onDeleteMany={() => setShowDeleteMany(true)}\n            selectedEntities={selectedEntities}\n            onSelectMany={setSelectedEntities}\n            entities={entities}\n            total={total}\n            columns={columns}\n            loading={loading}\n            paginationParams={paginationProps}\n            setPaginationParams={setPaginationProps}\n          />\n        </Route>\n        <Route path=\"/agency/new\">\n          <EntityCrudPage\n            moduleName={moduleName}\n            onModify={add}\n            formModel={createForm}\n            actions={actions}\n            entity={_init}\n            validation={validationSchema}\n            homePageUrl={HomePageURL.agency}\n          />\n        </Route>\n        <Route path=\"/agency/:code\">\n          {({ history, match }) => (\n            <EntityCrudPage\n              onModify={update}\n              moduleName={moduleName}\n              code={match?.params.code}\n              get={AgencyService.GetById}\n              formModel={updateForm}\n              actions={actions}\n              validation={validationSchema}\n              homePageUrl={HomePageURL.agency}\n            />\n          )}\n        </Route>\n      </Switch>\n      <MasterEntityDetailDialog\n        title={detailDialogTitle}\n        moduleName={moduleName}\n        entity={detailEntity}\n        onHide={() => {\n          setShowDetail(false);\n        }}\n        show={showDetail}\n        size={'lg'}\n        renderInfo={masterEntityDetailDialog}\n      />\n    </Fragment>\n  );\n}\n\nexport default AgencyPage;\n"],"sourceRoot":""}