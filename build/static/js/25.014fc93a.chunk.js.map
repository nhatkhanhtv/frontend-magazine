{"version":3,"sources":["../node_modules/@material-ui/icons/AccountCircleOutlined.js","app/pages/post/post-comments.tsx","app/common-library/common-components/entity-crud-page.tsx","app/pages/role/role.service.tsx","app/pages/user/user.service.tsx","app/pages/user/user.tsx"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","PostComments","entity","onComments","valueRef","useRef","useState","comments","commentsArr","setCommentArr","useEffect","className","map","key","style","fontSize","_","isString","createdBy","fullName","content","TextareaAutosize","rowsMin","aria-label","ref","placeholder","onClick","error","current","comment","then","res","data","catch","err","handleComment","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","EntityCrudPage","onModify","moduleName","code","get","formModel","actions","validation","loading","mode","setEditEntity","homePageUrl","allFormButton","showComment","intl","useIntl","history","useHistory","initValues","useMemo","InitValues","entityForEdit","setEntityForEdit","_header","modifyPanels","console","log","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","validateForm","push","GetHomePage","window","location","pathname","handleSubmit","setFieldValue","keys","index","val","Error","JSON","stringify","_title","panel","title","goBack","formatMessage","id","toUpperCase","inputGroups","type","keyss","role","icon","label","to","linkto","length","Spinner","animation","variant","size","confirmationStatus","isMaster","API_URL","API_BASE_URL","BULK_API_URL","Create","axios","post","GetAll","queryProps","sortList","paginationProps","params","Count","Get","_id","Update","put","Delete","delete","DeleteMany","entities","GetById","User","InitMasterProps","getServer","countServer","createServer","deleteServer","deleteManyServer","getAllServer","updateServer","deleteEntity","setEntities","setDeleteEntity","createEntity","setCreateEntity","selectedEntities","setSelectedEntities","detailEntity","showDelete","setShowDelete","showDeleteMany","setShowDeleteMany","showDetail","setShowDetail","setPaginationProps","filterProps","setFilterProps","total","add","update","deleteMany","deleteFn","getAll","currentTab","trigger","columns","dataField","text","SortColumn","align","formatter","input","_format","ActionsColumnFormatter","formatExtraData","onShowDetail","onEdit","onLock","NormalColumn","minWidth","masterEntityDetailDialog","dataClassName","image","images","width","height","phone","birthDay","DisplayDate","searchModel","disabled","faculty","onSearch","FacultyService","keyField","email","group1","_subTitle","_className","_type","maxNumber","isArray","required","gender","options","status","trueFalse","true","false","group2","identifier","RoleService","createForm","panel1","updateForm","Yup","shape","max","min","Date","save","iconStyle","cancel","initCreateValues","path","HomePageURL","user","match","exact","DefaultPagination","onCreate","onDeleteMany","onSelectMany","paginationParams","setPaginationParams","isShowId","onHide","show","renderInfo","onDelete","isShow","confirmMessage","bodyTitle","deletingMessage"],"mappings":"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","file":"static/js/25.014fc93a.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM7.07 18.28c.43-.9 3.05-1.78 4.93-1.78s4.51.88 4.93 1.78C15.57 19.36 13.86 20 12 20s-3.57-.64-4.93-1.72zm11.29-1.45c-1.43-1.74-4.9-2.33-6.36-2.33s-4.93.59-6.36 2.33C4.62 15.49 4 13.82 4 12c0-4.41 3.59-8 8-8s8 3.59 8 8c0 1.82-.62 3.49-1.64 4.83zM12 6c-1.94 0-3.5 1.56-3.5 3.5S10.06 13 12 13s3.5-1.56 3.5-3.5S13.94 6 12 6zm0 5c-.83 0-1.5-.67-1.5-1.5S11.17 8 12 8s1.5.67 1.5 1.5S12.83 11 12 11z\"\n}), 'AccountCircleOutlined');\n\nexports.default = _default;","import React from 'react';\nimport { Card, CardBody } from '../../common-library/card';\nimport { TextareaAutosize } from '@material-ui/core';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AxiosResponse } from 'axios';\nimport _ from 'lodash';\n\nconst notifyError = (error: string) => {\n  toast.error(error, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nconst PostComments = ({\n                                  entity,\n                                  onComments,\n                                }: {\n  entity?: any;\n  onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n}) => {\n  const valueRef = React.useRef<any>({ value: '' });\n  const [commentsArr, setCommentArr] = React.useState(entity?.comments || []);\n\n  React.useEffect(() => {\n    if (entity) {\n      setCommentArr(entity.comments)\n    }\n  }, [entity])\n\n  const handleComment = (entity: any, comment: any) => {\n    if (onComments && entity) {\n      onComments(entity, comment)\n          .then(res => {\n            setCommentArr(res.data);\n            // setComment({ content: '' });\n            valueRef.current.value = '';\n          })\n          .catch(err => {\n            throw err;\n          });\n    }\n  };\n\n  return (\n      <Card>\n        <CardBody>\n          <div className=\"pl-xl-15 pl-md-10 pl-5 mb-5\">\n            <span className=\"modify-subtitle text-primary mt-8\">COMMENTS</span>\n            <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n              {//entityForEdit.comments\n                // [\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                //   {\n                //     fullName: 'Đầu khấc',\n                //     content:\n                //       'Kế hoạch như tốt mai cho nghỉ việc..........vsdgkdfhkdfoihnsoirnhiosgboisdnbiodrgiosehuigheubguiwebguwebiugwebfiuwebfiuwebguiebgierdnhiordnhoifdnhidofjhpọhpotfjpofk',\n                //   },\n                // ]\n                commentsArr?.map(\n                    (\n                        value: { createdBy: { _id: string; fullName: string }; content: string },\n                        key: number,\n                    ) => (\n                        <div key={key} className=\"row mb-3\">\n                          <div className=\"col-1 text-center\">\n                            <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                          </div>\n                          <div className=\"col-10 bg-light rounded p-3\">\n                            <p className=\"font-bold\">\n                              {_.isString(value.createdBy)\n                                  ? value.createdBy\n                                  : value.createdBy.fullName\n                                      ? value.createdBy.fullName\n                                      : 'Anonymous'}\n                            </p>\n                            <p>{value.content}</p>\n                          </div>\n                        </div>\n                    ),\n                )}\n              <div className=\"row\">\n                <div className=\"col-1\"></div>\n                <div className=\"col-10\">\n                  <div className=\"row\">\n                    <div className=\"col-11\">\n                      <TextareaAutosize\n                          className=\"form-control\"\n                          rowsMin={1}\n                          aria-label=\"empty textarea\"\n                          ref={valueRef}\n                          placeholder=\"Write comment...\"\n                      />\n                    </div>\n                    <div className=\"col-1\">\n                      <button\n                          className=\"btn btn-primary pl-11 pr-11\"\n                          onClick={() => {\n                            if (valueRef.current.value !== '') {\n                              handleComment(entity, { content: valueRef.current.value });\n                            } else {\n                              notifyError('Comment is empty!');\n                            }\n                          }}>\n                        Sent\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n  );\n};\n\nexport default PostComments;\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {Form, Formik} from 'formik';\nimport {Link, useHistory} from 'react-router-dom';\nimport {Card, CardBody, CardHeader} from '../card';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport {ModifyForm} from '../common-types/common-type';\nimport _ from 'lodash';\nimport {ModifyEntityPage} from './modify-entity-page';\nimport {GetHomePage, InitValues} from \"../helpers/common-function\";\nimport {Spinner} from \"react-bootstrap\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PostComments from \"../../pages/post/post-comments\";\nimport {AxiosResponse} from \"axios\";\n\nfunction EntityCrudPage({\n                          entity,\n                          onModify,\n                          moduleName = 'COMMON_COMPONENT.CREATE_UPDATE.MODULE_NAME',\n                          code,\n                          get,\n                          formModel,\n                          actions,\n                          validation,\n                          loading,\n                          mode,\n                          setEditEntity,\n                          homePageUrl,\n                            allFormButton,\n                            onComments,\n                            showComment = true\n                        }: {\n  // modifyModel: ModifyModel;\n  moduleName?: string;\n  entity?: any;\n  onModify: (values: any) => Promise<any>;\n  code?: string;\n  get?: (code: string) => any;\n  formModel: ModifyForm;\n  mode?: 'horizontal' | 'vertical';\n  actions?: any;\n  validation?: any;\n  autoFill?: any;\n  loading?: boolean;\n  setEditEntity?: (entity: any) => void;\n  homePageUrl?: string\n    allFormButton?: any;\n    onComments?: (entity: any, data: { content: string }) => Promise<AxiosResponse<any>>;\n    showComment?: boolean;\n}) {\n  const intl = useIntl();\n  const history = useHistory();\n  const initValues = useMemo(() => InitValues(formModel), [formModel]);\n\n  const [entityForEdit, setEntityForEdit] = useState(entity);\n  useEffect(()=>{\n    entity && setEntityForEdit(entity);\n  }, [entity])\n\n  useEffect(() => {\n    if (!code && !entity) setEntityForEdit(initValues);\n  }, [initValues, code]);\n  const {_header, ...modifyPanels} = formModel;\n  \n  useEffect(() => {\n    if (code) {\n      get &&\n      get(code).then((res: { data: any }) => {\n        setEntityForEdit({...res.data});\n        if (setEditEntity) { setEditEntity(res.data) }\n      });\n    }\n  }, [code]);\n\n  console.log(entityForEdit)\n  \n  return (\n    <>\n      <Formik\n        enableReinitialize={true}\n        initialValues={entityForEdit}\n        validationSchema={validation}\n        onSubmit={(values, {setSubmitting, validateForm}) => {\n          console.log(values)\n          onModify(values).then(() => {\n            history.push(homePageUrl ?? GetHomePage(window.location.pathname))\n          }).catch((err) => {\n            // setSubmitting(false);\n          });\n        }}>\n        {({handleSubmit, setFieldValue}) => (\n          <>\n            <Form className=\"form form-label-right\">\n              {Object.keys(modifyPanels).map((key, index, keys) => {\n                const val = modifyPanels[key];\n                if (_.isString(val))\n                  throw new Error('Sử dụng sai cách ' + key + '\\n' + JSON.stringify(modifyPanels));\n                const {_title, ...panel} = val;\n                return (\n                  <Card key={`entity-crud-card` + key} className={'modify-page'}>\n                    <CardHeader\n                      className={'border-bottom-0'}\n                      title={\n                        index == 0 ? (\n                          <a\n                            onClick={() => history.goBack()}\n                            className={'cursor-pointer text-primary font-weight-boldest'}>\n                            <ArrowBackIosIcon/>\n                            {_.isString(_header) ? intl\n                              .formatMessage(\n                                {id: _header},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase() : _header(entityForEdit)}\n                          </a>\n                        ) : (\n                          <>\n                            {intl\n                              .formatMessage(\n                                {id: _title},\n                                {moduleName: intl.formatMessage({id: moduleName ?? 'EMPTY'})},\n                              )\n                              .toUpperCase()}\n                          </>\n                        )\n                      }\n                    />\n                    <CardBody>\n                      <ModifyEntityPage\n                        mode={mode}\n                        // className={formPart[key].className}\n                        // images={images}\n                        inputGroups={panel}\n                      />\n                    {allFormButton && allFormButton.type === 'outside' && (\n                        <div className=\"text-right mt-10\">\n                            {Object.keys(allFormButton.data).map(keyss => {\n                                switch (allFormButton['data'][keyss].role) {\n                                    case 'submit':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick();\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n\n                                    case 'special':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                onClick={() => {\n                                                    // handleSubmit();\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'button':\n                                        return (\n                                            <button\n                                                type={allFormButton['data'][keyss].type}\n                                                className={allFormButton['data'][keyss].className}\n                                                key={keyss}\n                                                onClick={() => {\n                                                    allFormButton['data'][keyss].onClick(entityForEdit);\n                                                }}>\n                                                {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                            </button>\n                                        );\n                                    case 'link-button':\n                                        return (\n                                            <Link to={allFormButton['data'][keyss].linkto} key={keyss}>\n                                                <button\n                                                    type={allFormButton['data'][keyss].type}\n                                                    className={allFormButton['data'][keyss].className}>\n                                                    {allFormButton['data'][keyss].icon} {allFormButton['data'][keyss].label}\n                                                </button>\n                                            </Link>\n                                        );\n                                }\n                            })}\n                        </div>\n                    )}\n                      {(actions && index === Object.keys(modifyPanels).length - 1) && (\n                        <div className=\"text-right mt-10\" key={key}>\n                          {Object.keys(actions.data).map(keyss => {\n                            switch (actions.data[keyss].role) {\n                              case 'submit':\n                                return (\n                                  <button\n                                    className={actions.data[keyss].className}\n                                    key={keyss}\n                                    type={'submit'}\n                                  >\n                                    {loading === true ? actions.data[keyss].loading ?? (\n                                      <Spinner animation=\"border\" variant=\"light\"\n                                               size=\"sm\"/>) : actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              \n                              case 'button':\n                                return (\n                                  <button\n                                    type={actions.data[keyss].type}\n                                    className={actions.data[keyss].className}\n                                    key={keyss}>\n                                    {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                  </button>\n                                );\n                              case 'link-button':\n                                return (\n                                  <Link to={actions.data[keyss].linkto} key={keyss}>\n                                    <button\n                                      type={actions.data[keyss].type}\n                                      className={actions.data[keyss].className}>\n                                      {actions.data[keyss].icon} {intl.formatMessage({id: actions.data[keyss].label})}\n                                    </button>\n                                  </Link>\n                                );\n                            }\n                          })}\n                        </div>)\n                      }\n                    </CardBody>\n                  </Card>\n                );\n              })}\n\n            </Form>\n              {showComment !== true || !onComments ? <></> : (entityForEdit?.confirmationStatus === '3'\n                  || (entityForEdit?.isMaster === true && entityForEdit?.confirmationStatus === '2')) ? (\n                  <Card>\n                      <CardBody className={'p-0'}>\n                          <div className=\"mb-5 mt-5\">\n                              <span className=\"text-primary detail-dialog-subtitle mt-8\">BÌNH LUẬN</span>\n                              <div className=\"mt-8 border border-light rounded pt-5 pb-5\">\n                                  {entityForEdit && entityForEdit.comments.length > 0 ? (\n                                      entityForEdit.comments.map(\n                                          (\n                                              value: { createdBy: { _id: string; fullName: string }; content: string },\n                                              key: number,\n                                          ) => (\n                                              <div key={key} className=\"row mb-3\">\n                                                  <div className=\"col-1 text-center\">\n                                                      <AccountCircleOutlinedIcon style={{ fontSize: 30 }} />\n                                                  </div>\n                                                  <div className=\"col-10 bg-light rounded p-3\">\n                                                      <p className=\"font-bold\">{value.createdBy.fullName}</p>\n                                                      <p>{value.content}</p>\n                                                  </div>\n                                              </div>\n                                          ),\n                                      )\n                                  ) : (\n                                      <span>Chưa có bình luận</span>\n                                  )}\n                              </div>\n                          </div>\n                      </CardBody>\n                  </Card>\n              ) : (\n                  <PostComments entity={entityForEdit} onComments={onComments} />\n              )}\n          </>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default EntityCrudPage;\n","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\n\nexport const API_URL = API_BASE_URL + '/role';\n\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\nexport const API_FILE_URL = API_BASE_URL + '/file';\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n    // paramsSerializer: ParamsSerializer\n  });\n};\n\nexport const Count: CountProps<any> = ({\n                                         queryProps,\n                                         sortList,\n                                         paginationProps,\n                                       }) => {\n  return axios.get(`${API_URL}/count`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\n\nexport const Get: GetProps<any> = entity => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {data:entities},\n  });\n};","import axios from 'axios';\nimport {API_BASE_URL} from '../../common-library/common-consts/enviroment';\nimport {\n  CountProps,\n  CreateProps,\n  DeleteManyProps,\n  DeleteProps,\n  GetAllPropsServer,\n  GetProps,\n  UpdateProps,\n} from '../../common-library/common-types/common-type';\nimport {UserModel} from \"./user.model\";\nimport {RoleArrayToObject, RoleObjectToArray} from \"../../common-library/helpers/common-function\";\nimport _ from \"lodash\";\n\n\nexport const API_URL = API_BASE_URL + '/user';\n\nexport const BULK_API_URL = API_URL + '/bulk'\n\n// export const Create: CreateProps<any> = (data: any) => {\n//   const sendData = _.cloneDeep(data);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   console.log(sendData)\n//   return axios.post(API_URL, sendData);\n// };\n\nexport const Create: CreateProps<any> = (data: any) => {\n  return axios.post(API_URL, data);\n};\n\nexport const GetAll: GetAllPropsServer<any> = ({\n                                                 queryProps,\n                                                 sortList,\n                                                 paginationProps,\n                                               }) => {\n  return axios.get(`${API_URL}`, {\n    params: {...queryProps, ...paginationProps, sortList},\n  });\n};\n\nexport const Count: CountProps<UserModel> = (queryProps) => {\n  return axios.get(`${API_URL}/get/count`, {\n    params: {...queryProps},\n  });\n};\n\n// export const GetById = (id: string) => {\n//   return axios.get(`${API_URL}/${id}`).then(res => {\n//     if (_.isArray(res.data.scopes)) {\n//       let scopeArray = res.data.scopes;\n//       scopeArray = _.isEqual(scopeArray, res.data.addedScope.enable) ? [...scopeArray] : [...scopeArray, ...res.data.addedScope.enable];\n//       scopeArray = scopeArray.filter((s: string) => {\n//         return !res.data.addedScope.disable.some((d: string) => (s === d));\n//       });\n//       res.data.scopes = RoleArrayToObject(scopeArray);\n//     }\n//     console.log(res)\n//     return res;\n//   });\n// };\n\nexport const GetById = (_id: string) => {\n  return axios.get(`${API_URL}/${_id}`);\n};\n\nexport const Get: GetProps<UserModel> = (entity) => {\n  return axios.get(`${API_URL}/${entity._id}`);\n};\n\n// export const Update: UpdateProps<any> = (entity) => {\n//   const sendData = _.cloneDeep(entity);\n//   sendData.scopes = RoleObjectToArray(sendData.scopes);\n//   return axios.put(`${API_URL}/${entity._id}`, sendData);\n// };\n\nexport const Update: UpdateProps<any> = (entity: any) => {\n  return axios.put(`${API_URL}/${entity._id}`, entity);\n};\n\nexport const Delete: DeleteProps<any> = (entity: any) => {\n  return axios.delete(`${API_URL}/${entity._id}`);\n};\n\nexport const DeleteMany: DeleteManyProps<any> = (entities: any[]) => {\n  return axios.delete(BULK_API_URL, {\n    data: {data:entities},\n  });\n};\n\n// export const Delete: DeleteProps<UserModel> = (entity) => {\n//   //Lười sửa nên viết như này cho nhanh\n//   return axios.put(`${API_URL}/${entity._id}`, {...entity, status: '0'});\n// };\n//\n// export const DeleteMany: DeleteManyProps<UserModel> = (entities) => {\n//   return axios.delete(API_URL, {\n//     data: {arrayEntities: entities}\n//   });\n// };\n\n","import React, {Fragment, useEffect, useMemo, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {DefaultPagination, HomePageURL, iconStyle, NormalColumn, SortColumn} from '../../common-library/common-consts/const';\nimport {MasterHeader} from '../../common-library/common-components/master-header';\nimport {\n  ActionsColumnFormatter,\n  TickColumnFormatter\n} from '../../common-library/common-components/actions-column-formatter';\nimport {DeleteEntityDialog} from '../../common-library/common-components/delete-entity-dialog';\nimport {\n  ModifyForm,\n  ModifyInputGroup,\n  ModifyPanel,\n  RenderInfoDetail,\n  SearchModel\n} from '../../common-library/common-types/common-type';\nimport {InitMasterProps, InitValues, RoleArrayToObject,} from '../../common-library/helpers/common-function';\nimport {Route, Switch, useHistory} from 'react-router-dom';\nimport EntityCrudPage from '../../common-library/common-components/entity-crud-page';\nimport SaveOutlinedIcon from '@material-ui/icons/SaveOutlined';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\nimport {UserModel} from './user.model';\nimport {MasterEntityDetailDialog} from \"../../common-library/common-components/master-entity-detail-dialog\";\nimport {GetCity, GetDistrict, GetState} from \"../address/address.service\";\nimport * as Yup from \"yup\";\nimport {Count, Create, Delete, DeleteMany, Get, GetAll, GetById, Update} from \"./user.service\";\nimport {\n  DisplayAddress,\n  DisplayDate,\n  DisplayDateTime,\n  DisplayDownloadLink\n} from \"../../common-library/helpers/detail-helpers\";\nimport {DetailImage} from \"../../common-library/common-components/detail/detail-image\";\nimport {Spinner} from \"react-bootstrap\";\nimport './style.scss'\nimport * as FacultyService from \"../faculty/faculty.service\";\nimport * as RoleService from \"../role/role.service\";\nimport DeleteManyEntitiesDialog from \"../../common-library/common-components/delete-many-entities-dialog\";\nimport {MasterBody} from \"../../common-library/common-components/master-body\";\n\nconst headerTitle = 'PRODUCT_TYPE.MASTER.HEADER.TITLE';\nconst detailDialogTitle = 'USER.DETAIL_DIALOG.TITLE';\nconst moduleName = 'USER.MODULE_NAME';\nconst lockDialogTitle = 'USER.LOCK_DIALOG.TITLE';\nconst lockConfirmMessage = 'USER.LOCK_DIALOG.CONFIRM_MESSAGE';\nconst lockDialogBodyTitle = 'USER.LOCK_DIALOG.BODY_TITLE';\nconst lockingMessage = 'USER.LOCK_DIALOG.LOCKING_MESSAGE';\nconst createTitle = 'USER.CREATE.HEADER';\nconst updateTitle = 'USER.UPDATE.HEADER';\n\nfunction User() {\n  const intl = useIntl();\n  \n  const history = useHistory();\n  const {\n    entities,\n    setEntities,\n    deleteEntity,\n    setDeleteEntity,\n    createEntity,\n    setCreateEntity,\n    selectedEntities,\n    setSelectedEntities,\n    detailEntity,\n    showDelete,\n    setShowDelete,\n    showDeleteMany,\n    setShowDeleteMany,\n    showDetail,\n    setShowDetail,\n    paginationProps,\n    setPaginationProps,\n    filterProps,\n    setFilterProps,\n    total,\n    loading,\n    error,\n    add,\n    update,\n    get,\n    deleteMany,\n    deleteFn,\n    getAll,\n  } = InitMasterProps<UserModel>({\n    getServer: Get,\n    countServer: Count,\n    createServer: Create,\n    deleteServer: Delete,\n    deleteManyServer: DeleteMany,\n    getAllServer: GetAll,\n    updateServer: Update,\n  });\n\n  const [currentTab, setCurrentTab] = useState<string | undefined>('0');\n  const [trigger, setTrigger] = useState<boolean>(false);\n  \n  useEffect(() => {\n    getAll(filterProps);\n  }, [paginationProps, filterProps, trigger, currentTab]);\n  \n  const columns = useMemo(() => {\n    return [\n      {\n        dataField: 'fullName',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.DISPLAY_NAME'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      {\n        dataField: 'code',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.CODE'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      {\n        dataField: 'birthDay',\n        text: `${intl.formatMessage({id: 'USER.MASTER.HEADER.BIRTHDAY'})}`,\n        formatter: (input: any) => <DisplayDateTime input={input} _format={'dd/MM/yyyy'} />,\n        ...SortColumn,\n      },\n      {\n        dataField: 'phone',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.PHONE'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      {\n        dataField: 'email',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.EMAIL'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      {\n        dataField: 'role.role',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.ROLE'})}`,\n        ...SortColumn,\n        align: 'center',\n      },\n      {\n        dataField: 'action',\n        text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.ACTION_COLUMN'})}`,\n        formatter: ActionsColumnFormatter,\n        formatExtraData: {\n          intl,\n          onShowDetail: (entity: UserModel) => {\n            get(entity).then(() => {\n              setShowDetail(true);\n            })\n          },\n          onEdit: (entity: UserModel) => {\n            history.push(`${window.location.pathname}/${entity._id}`);\n          },\n          onLock: (entity: UserModel) => {\n            setDeleteEntity(entity);\n            setShowDelete(true);\n          },\n        },\n        ...NormalColumn,\n        style: {minWidth: '130px'},\n      }\n    ]\n  }, []);\n\n  // const customerColumn = useMemo(() => ([\n  //   {\n  //     dataField: '_id',\n  //     text: 'STT',\n  //     formatter: (cell: any, row: any, rowIndex: number) => (\n  //       <p>{rowIndex + 1 + ((paginationProps.page ?? 0) - 1) * (paginationProps.limit ?? 0)}</p>\n  //     ),\n  //     classes: 'mr-3',\n  //     style: { paddingTop: 20 },\n  //   },\n  //   {\n  //     dataField: 'phone',\n  //     text: `${intl.formatMessage({id: 'Họ và tên'})}`,\n  //     ...SortColumn,\n  //     align: 'center',\n  //   },\n  //   {\n  //     dataField: 'email',\n  //     text: `${intl.formatMessage({id: 'Số điện thoại'})}`,\n  //     ...SortColumn,\n  //     align: 'center',\n  //   },\n  //   {\n  //     dataField: 'action',\n  //     text: `${intl.formatMessage({id: 'USER.MASTER.TABLE.ACTION_COLUMN'})}`,\n  //     formatter: ActionsColumnFormatter,\n  //     formatExtraData: {\n  //       intl,\n  //       onShowDetail: (entity: UserModel) => {\n  //         get(entity).then(() => {\n  //           setShowDetail(true);\n  //         })\n  //       },\n  //       onGoHistory: (entity: UserModel) => {\n  //         history.push(`/customers-management/${entity._id}/history`);\n  //       },\n  //     },\n  //     ...NormalColumn,\n  //     style: {minWidth: '130px'},\n  //   }\n  // ]), [])\n  \n  const masterEntityDetailDialog: RenderInfoDetail = useMemo((): RenderInfoDetail => [\n    {\n      className: 'col-md-6 col-12',\n      dataClassName: 'col-md-12 col-12 text-lg-center',\n      data: {\n        image: {\n          formatter: (input) => <DetailImage images={input} width={200} height={200}/>\n        },\n      },\n    },\n    {\n      className: 'col-md-6 col-12',\n      dataClassName: 'col-md-8 col-12',\n      data: {\n        fullName: {title: 'USER.DETAIL_DIALOG.FULL_NAME'},\n        phone: {title: 'USER.DETAIL_DIALOG.PHONE'},\n        birthDay: {title: 'USER.DETAIL_DIALOG.BIRTHDAY', formatter: (input) => DisplayDate({input})},\n        'faculty.faculty': { title: 'FACULTY'},\n      },\n    },\n  ], []);\n\n  const searchModel: SearchModel = useMemo(() => ({\n    code: {\n      type: 'string',\n      label: 'USER.MASTER.SEARCH.CODE',\n      disabled: currentTab === '1',\n    },\n    fullName: {\n      type: 'string',\n      label: 'USER.MASTER.SEARCH.FULL_NAME',\n    },\n    faculty: {\n      type: 'search-select',\n      label: 'USER.MASTER.HEADER.FACULTY',\n      onSearch: FacultyService.GetAll,\n      keyField: 'faculty',\n      disabled: currentTab === '1',\n    },\n    email: {\n      type: 'string',\n      label: 'USER.MASTER.SEARCH.EMAIL',\n      disabled: currentTab === '1',\n    },\n    phone: {\n      type: 'string-number',\n      label: 'USER.MASTER.SEARCH.PHONE',\n    },\n  }), [currentTab]);\n  const group1 = useMemo((): ModifyInputGroup => ({\n    _subTitle: 'USER.MODIFY.DETAIL_INFO',\n    _className: 'col-6 pr-xl-15 pr-md-10 pr-5',\n    image: {\n      _type: 'image',\n      maxNumber: 1,\n      label: 'USER.MODIFY.IMAGE',\n      isArray: false,\n    },\n    fullName: {\n      _type: 'string',\n      maxNumber: 1,\n      label: 'USER.MODIFY.FULLNAME',\n    },\n    code: {\n      _type: 'string',\n      label: 'USER.MODIFY.CODE',\n      disabled: true,\n    },\n    birthDay: {\n      _type: 'date-time',\n      required: true,\n      label: 'USER.MODIFY.BIRTHDAY',\n    },\n    gender: {\n      _type: 'radio',\n      required: true,\n      options: [\n        {label: 'USER.MODIFY.GENDER_OPTION.MALE', value: '1'},\n        {label: 'USER.MODIFY.GENDER_OPTION.FEMALE', value: '0'}\n      ],\n      label: 'USER.MODIFY.GENDER',\n    },\n    status: {\n      _type: 'boolean',\n      label: 'USER.MODIFY.STATUS',\n      trueFalse: {\n        true: '1',\n        false: '0'\n      }\n    },\n    faculty: {\n      _type: 'search-select',\n      label: 'USER.MASTER.HEADER.FACULTY',\n      onSearch: FacultyService.GetAll,\n      keyField: 'faculty',\n      required: false,\n    },\n  }), []);\n  const group2 = useMemo((): ModifyInputGroup => ({\n    _subTitle: 'EMPTY',\n    _className: 'col-6 pl-xl-15 pl-md-10 pl-5',\n    identifier: {\n      _type: 'string-number',\n      required: true,\n      label: 'USER.MODIFY.IDENTIFIER',\n    },\n    email: {\n      _type: 'string',\n      required: true,\n      label: 'USER.MODIFY.EMAIL',\n    },\n    phone: {\n      _type: 'string-number',\n      required: true,\n      label: 'USER.MODIFY.PHONE',\n    },\n    role: {\n      _type: 'search-select',\n      onSearch: RoleService.GetAll,\n      keyField: 'role',\n      required: true,\n      label: 'USER.MODIFY.ROLE',\n    },\n  }), []);\n\n  const createForm = useMemo((): ModifyForm => ({\n    _header: createTitle,\n    panel1: {\n      _title: '',\n      group1: group1,\n      group2: group2,\n    },\n  }), [group1, group2]);\n\n  const updateForm = useMemo((): ModifyForm => {\n    return ({...createForm, _header: updateTitle});\n  }, [createForm]);\n\n  const validationSchema = useMemo(() => Yup.object().shape({\n    phone: Yup.string()\n      .max(11, 'VALIDATE.ERROR.INVALID_INPUT')\n      .min(8, 'VALIDATE.ERROR.INVALID_INPUT'),\n    birthDay: Yup.date().max(new Date(), 'VALIDATE.ERROR.MUST_LESS_THAN_TODAY'),\n\n    // owner: Yup.object().shape({\n    //   phone: Yup.string()\n    //     .max(11, 'VALIDATE.ERROR.INVALID_INPUT')\n    //     .min(8, 'VALIDATE.ERROR.INVALID_INPUT'),\n    // })\n  }), []);\n  const actions: any = useMemo(() => ({\n    type: 'inside',\n    data: {\n      save: {\n        role: 'submit',\n        type: 'submit',\n        linkto: undefined,\n        className: 'btn btn-primary mr-8 fixed-btn-width',\n        label: 'SAVE_BTN_LABEL',\n        icon: loading ? (<Spinner style={iconStyle} animation=\"border\" variant=\"light\" size=\"sm\"/>) :\n          (<SaveOutlinedIcon style={iconStyle}/>)\n      },\n      cancel: {\n        role: 'link-button',\n        type: 'button',\n        linkto: '/account/user',\n        className: 'btn btn-outline-primary fixed-btn-width',\n        label: 'CANCEL_BTN_LABEL',\n        icon: <CancelOutlinedIcon/>,\n      }\n    }\n  }), [loading]);\n  const initCreateValues: any = useMemo(() => ({...InitValues(createForm), status: '0'}), [createForm]);\n\n  return (\n    <Fragment>\n      <Switch>\n        <Route path={`${HomePageURL.user}/0000000`}>\n          <EntityCrudPage\n            moduleName={moduleName}\n            onModify={add}\n            formModel={createForm}\n            entity={createEntity}\n            actions={actions}\n            validation={validationSchema}\n            homePageUrl={HomePageURL.user}\n          />\n        </Route>\n        <Route path={`/account/user/:code`}>\n          {({match}) => (\n            <EntityCrudPage\n              onModify={update}\n              moduleName={moduleName}\n              code={match?.params.code}\n              get={GetById}\n              formModel={updateForm}\n              actions={actions}\n              validation={validationSchema}\n              homePageUrl={HomePageURL.user}\n            />\n          )}\n        </Route>\n        <Route path={`${HomePageURL.user}`} exact={true}>\n          <MasterHeader\n            title={headerTitle}\n            onSearch={(value) => {\n              setPaginationProps(DefaultPagination)\n              setFilterProps(value)\n            }}\n            searchModel={searchModel}\n          />\n          <div className=\"user-body\">\n          {/*  <UserBody*/}\n          {/*    tabData={TabData}*/}\n          {/*    currentTab={currentTab}*/}\n          {/*    setCurrentTab={setCurrentTab}*/}\n          {/*    setEntities={setEntities}*/}\n          {/*    setPaginationProps={setPaginationProps}*/}\n          {/*    setTrigger={setTrigger}*/}\n          {/*    trigger={trigger}*/}\n          {/*    title='Người dùng hệ thống'*/}\n          {/*  />*/}\n          {/*</div>*/}\n          <MasterBody\n            title='USER.MASTER.TABLE.TITLE'\n            onCreate={() => {\n              setCreateEntity(initCreateValues);\n              history.push(`${window.location.pathname}/0000000`);\n            }}\n            onDeleteMany={() => setShowDeleteMany(true)}\n            selectedEntities={selectedEntities}\n            onSelectMany={setSelectedEntities}\n            entities={entities}\n            total={total}\n            columns={columns as any}\n            loading={loading}\n            paginationParams={paginationProps}\n            setPaginationParams={setPaginationProps}\n            isShowId={false}\n          />\n          </div>\n        </Route>\n      </Switch>\n      <MasterEntityDetailDialog\n        title={detailDialogTitle}\n        moduleName={moduleName}\n        entity={detailEntity}\n        onHide={() => {\n          setShowDetail(false);\n        }}\n        show={showDetail}\n        size={'lg'}\n        renderInfo={masterEntityDetailDialog}/>\n      <DeleteEntityDialog\n        entity={deleteEntity}\n        onDelete={deleteFn}\n        isShow={showDelete}\n        loading={loading}\n        error={error}\n        onHide={() => {\n          setShowDelete(false);\n        }}\n        title={lockDialogTitle}\n        confirmMessage={lockConfirmMessage}\n        bodyTitle={lockDialogBodyTitle}\n        deletingMessage={lockingMessage}\n      />\n      <DeleteManyEntitiesDialog\n          moduleName={moduleName}\n          selectedEntities={selectedEntities}\n          loading={loading}\n          error={error}\n          isShow={showDeleteMany}\n          onDelete={deleteMany}\n          onHide={() => {\n            setShowDeleteMany(false);\n            setFilterProps({...filterProps});\n          }}\n      />\n    </Fragment>\n  );\n}\n\nexport default User\n"],"sourceRoot":""}